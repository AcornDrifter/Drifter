ON ERROR SYS263874:MODE12:REPORT:PRINT " at line ";ERL:END
SYS6,200,0,255 TO,esc_state%
SYS6,200,1,0
DIM screen_store% 81920
VOICES4
PROCinit_filenames
PROCsetup_reference_lists
PROCinitialise_edge_tables
PROCsetup_camera
PROCsetup_sprites
PROCsetup_3d_objects
PROCsetup_3d_world
DIM menu_screen_data% 81920
ntxy%=240
DIM textures% ntxy%*1024
DIM texturemap_divisions% 512*4
PROCassemble_screen_handlers
PROCsetup_soundfx
OSCLI"Load <Perpetual_Motion$Dir>.BackDrop "+STR$~screen_store%
PROCsetup_textures
PROCassemble_poly_renderers
PROCassemble_smoke_routines
PROCassemble_3d_handlers
PROCassemble_graphical_display_code
PROCassemble_camera_control_routines
PROCassemble_player_control_routines
PROCassemble_movement_and_collision_handlers
PROCassemble_main_loop_code

CALL init_stack
CALL check_mem_size

IF!total_mem%<=2097152 THEN !no_music_loaded%=1
CALL check_riscos_version

IF!riscos_v%>=165:!crafts_available%=3
MODE15
MODE13
OFF
PROCload_score_table
!quit%=0

IF!no_music_loaded%=0 THEN
  SYS"QTM_Load",intro_music%,0
ELSE
  !music_status%=0
ENDIF

CALL intro_credits
!music_status%=0

IF!no_music_loaded%=0 THEN
  SYS"QTM_Load",ingame_music%,0
  SYS"QTM_Volume",(!(overall_sound_volume%)/2)
ENDIF

failures%=0

REPEAT

  IF!(max_prac_trackno%)<(((!game_level%)*2)+2):!(max_prac_trackno%)=(((!game_level%)*2)+2)

  IF failures%<>0 OR!(game_level%)<>0:plinth_positions%!0=57

  IF failures%=0 AND!(game_level%)=0:plinth_positions%!0=15
  CALL main

  IF(!quit%)<>1 AND(!game_type%)=0 THEN
    !(!(world_data_header%+8)+116)=3
    PROCchampionship_game
  ENDIF


  IF(!quit%)<>1 AND(!game_type%)=1 THEN
    CALL practice_tracks_screen
    PROCload_track(!play_track_no%)
    CALL reset_race
    !(!(world_data_header%+8)+116)=5
    CALL main_game_code
  ENDIF


  IF(!quit%)<>1 AND(!game_type%)=2 AND!(demo_available%)=1 THEN
    PROCdisplay_score_table
    CALL fade_out_menu_backdrop

    IF!no_music_loaded%=0 THEN
      SYS"QTM_Volume",(!(overall_sound_volume%)/2)

      IF!(music_status%)=1 OR!(world_data_header%+52)=1:SYS"QTM_Start"
    ENDIF

    PROCdemo_mode

    IF!no_music_loaded%=0 THEN

      IF!(music_status%)=1 OR!(world_data_header%+52)=1:SYS"QTM_Stop"
      SYS"QTM_Volume",(!(overall_sound_volume%)/2)
    ENDIF

  ENDIF

UNTIL!quit%=1

CALL fade_out_menu_backdrop
PROCsave_score_table
SYS6,200,esc_state%,0
REM *Run <Perpetual_Disc2$Dir>.Out
END

DEF PROCchampionship_game


  REPEAT

    IF!(max_prac_trackno%)<(((!game_level%)*2)+2):!(max_prac_trackno%)=(((!game_level%)*2)+2)

    IF!(track_status%)<>255 THEN
      CALL select_track
    ELSE
      !(play_track_no%)=8
      PROCfinal_track
    ENDIF


    IF(!dont_select_track%)=1 THEN
      !game_type%=2
      !demo_available%=0
    ENDIF


    IF(!dont_select_track%)=0 THEN

      IF(!race_suspended%)=0 THEN
        !position_pre_race_suspension%=(!(!(world_data_header%+8)+116))
      ENDIF

      PROCload_track(!play_track_no%)
      CALL reset_race

      IF(!race_suspended%)=1 THEN
        !(!(world_data_header%+8)+116)=(!position_pre_race_suspension%)
      ENDIF

      PROCreset_starting_grid
      CALL main_game_code

      IF(!race_suspended%)=1:failures%+=1:!demo_available%=0

      IF(!race_suspended%)=0 THEN
        PROCsort_out_champ_points
        CALL sort_out_track_status

        IF!play_track_no%<>8:CALL track_complete

        IF!play_track_no%=8:IF!(!(world_data_header%+8)+116)>2:CALL track_complete

        IF!(world_data_header%+72)>!(!(world_data_header%+8)+124):PROCregister_new_lap_record:CALL congrats_new_lap_record

        IF!(!(world_data_header%+8)+116)>2:failures%+=1

        IF!(!(world_data_header%+8)+116)<=2:failures%=0

        IF!(!(world_data_header%+8)+116)<=2 AND!play_track_no%=8 THEN

          IF!no_music_loaded%=0 THEN
            SYS"QTM_Volume",(!(overall_sound_volume%)/2)

            IF!(music_status%)=1 OR!(world_data_header%+52)=1:SYS"QTM_Start"
          ENDIF

          PROCcomplete_game

          IF!no_music_loaded%=0 THEN

            IF!(music_status%)=1 OR!(world_data_header%+52)=1:SYS"QTM_Stop"
            SYS"QTM_Volume",(!(overall_sound_volume%)/2)
          ENDIF

          PROCcheck_high_score
          PROCdisplay_score_table
          !game_type%=2
          !game_level%=0
          failures%=0
          !track_status%=0
          !( !(world_data_header%+68)+4 )=0
          !( !(world_data_header%+68))=0
          !(!(world_data_header%+8)+116)=3
          !position_pre_race_suspension%=3
          !demo_available%=0

          IF!no_music_loaded%=0 THEN
            SYS"QTM_Load",intro_music%,0
            SYS"QTM_Volume",(!(overall_sound_volume%)/2)
          ENDIF

          CALL intro_credits

          IF!no_music_loaded%=0 THEN
            SYS"QTM_Load",ingame_music%,0
            SYS"QTM_Volume",(!(overall_sound_volume%)/2)
          ENDIF

        ENDIF

      ENDIF


      IF failures%>=4 THEN
        !game_type%=2
        PROCload_track(!play_track_no%)
        CALL reset_race
        PROCreset_starting_grid

        IF!no_music_loaded%=0 THEN
          SYS"QTM_Load",intro_music%,0
          SYS"QTM_Volume",(!(overall_sound_volume%)/2)

          IF!(music_status%)=1 OR!(world_data_header%+52)=1:SYS"QTM_Start"
        ENDIF

        PROCgame_over_cam

        IF!no_music_loaded%=0 THEN
          SYS"QTM_Volume",(!(overall_sound_volume%)/2)

          IF!(music_status%)=1 OR!(world_data_header%+52)=1:SYS"QTM_Stop"
        ENDIF


        IF!no_music_loaded%=0 THEN
          SYS"QTM_Load",ingame_music%,0
          SYS"QTM_Volume",(!(overall_sound_volume%)/2)
        ENDIF

        PROCcheck_high_score
        PROCdisplay_score_table
        !game_level%=0
        failures%=0
        !track_status%=0
        !( !(world_data_header%+68)+4 )=0
        !( !(world_data_header%+68))=0
        !(!(world_data_header%+8)+116)=3
        !position_pre_race_suspension%=3
        !demo_available%=0
      ENDIF

    ENDIF

  UNTIL(!game_type%)<>0


ENDPROC


DEF PROCcheck_high_score

  LOCAL total%,pos%,tabscore%
  total%=!( !(world_data_header%+68)+4 )
  pos%=1

  FOR I%=0 TO7
    tabscore%=!(score_table+(I%*8)+4)

    IF total%<tabscore% THEN pos%+=1
  NEXT I%


  IF pos%<=7 THEN

    FOR I%=6 TO(pos%-1)STEP-1
      tabscore%=!(score_table+(I%*8)+4)
      name%=!(score_table+(I%*8))
      !(score_table+(I%*8)+12)=tabscore%
      !(score_table+(I%*8)+8)=name%
    NEXT I%

  ENDIF


  IF pos%<=8:PROCenter_name(pos%)

ENDPROC


DEF PROCsort_out_champ_points

  LOCAL pos%,points%,total%
  pos%=!( !(world_data_header%+8)+116 )

  CASE pos% OF
  WHEN1
  points%=10
  WHEN2
  points%=5
  OTHERWISE
  points%=0
  ENDCASE

  !(!(world_data_header%+68))=points%
  total%=!( !(world_data_header%+68)+4 )
  total% +=points%
  !( !(world_data_header%+68)+4 )=total%

ENDPROC


DEF PROCreset_starting_grid

  LOCAL x%,z%,pos%,crno%,I%,adr%
  x%=-250
  z%=-2500
  crno%=1
  pos%=!( !(world_data_header%+8)+116 )

  FOR I%=5 TO1 STEP-1

    IF pos%=I% THEN
      adr%=!(world_data_header%+8)
      actcraftno%=0
    ELSE
      adr%=!(world_data_header%+8)
      adr%=adr%+(crno%*128)
      actcraftno%=crno%
      crno%+=1
    ENDIF

    poslistadr%=craft_positioning%+( (I%-1)*8 )
    !(poslistadr%)=actcraftno%
    !(adr%)=(x%<<10)
    !(adr%+8)=(z%<<10)
    z%+=300
    x%=x%*-1
  NEXT I%


ENDPROC


DEF PROCalter_main_lp

  scrno%=0
  time%=0
  time1%=0

  REPEAT
    SYS66 TO time%
    MOUSE mx,my,b
    CALL screen_swap
    CALL plot_ground
    CALL plot_sky
    obadr%=!(world_data_header%+8)
    mvdadr%=!(world_data_header%+8)
    rcedat%=!(world_data_header%+32)
    CALL check_all_crafts_with_missiles
    CALL maintain_crafts
    CALL update_player_crafts_path_pos
    CALL check_view_keys
    cammcm%=!(camera_position%+44)

    IF cammcm%=0 THEN
      CALL focus_camera_on_object
    ELSE
      CALL tracking_camera
    ENDIF

    A%=0
    CALL missile_motion_control
    A%=1
    CALL missile_motion_control
    A%=2
    CALL missile_motion_control
    CALL analyse_craft_positions
    CALL calculate_world
    A%=10
    CALL calculate_smoke_stream
    A%=11
    CALL calculate_smoke_stream
    A%=12
    CALL calculate_smoke_stream
    CALL calculate_explosions
    CALL show_lap_timer
    CALL calculate_craft_speed
    CALL show_damage_meter
    CALL display_craft_position
    CALL display_missile_icons

    IF INKEY-61:OSCLI"SCREENSAVE <Perpetual_Motion$Dir>.ScrShots.ScrShots"+STR$~scrno%:scrno%+=1

    REPEAT
      SYS66 TO time1%
    UNTIL(time1%-time%)>=4

  UNTIL0


ENDPROC


DEF PROCsimple_loop

  ng=0

  REPEAT
    MOUSE mx,my,b
    CALL screen_swap
    CALL clr_scr
    A%=0
    B%=0
    C%=100
    D%=200
    E%=mx/8
    CALL calc_line_intersection
    PRINT TAB(0,0)"Xa ";A%
    PRINT TAB(0,1)"Ya ";B%
    PRINT TAB(0,2)"Xb ";C%
    PRINT TAB(0,3)"Yb ";D%
    PRINT TAB(0,4)"Const X";E%
    PRINT TAB(0,6)"Intersection ";!(interseccy_coord%)
  UNTIL0


ENDPROC


DEF PROCenter_name(pos%)

  LOCAL x%,y%,letter%,xoff%,yoff%
  pos%-=1
  entry%=0
  lastb%=0
  hix%=0
  hiy%=0
  slet%=50

  REPEAT
    MOUSE mx,my,b
  UNTIL b=0


  REPEAT
    CALL screen_swap
    CALL refresh_screen
    CALL print_enter_name
    MOUSE mx,my,b
    letter%=0
    xoff%=64
    yoff%=80

    FOR y%=0 TO3

      FOR x%=0 TO6

        IF letter%<26 THEN
          A%=letter%+slet%
          B%=(x%*28)+xoff%
          C%=(y%*24)+yoff%
          CALL plot_letter_sprite
        ENDIF


        IF letter%=27 THEN
          A%=138
          B%=(x%*28)+xoff%
          C%=(y%*24)+yoff%
          CALL plot_letter_sprite
        ENDIF

        letter%+=1
      NEXT x%

    NEXT y%

    hix%=mx/192
    hiy%=3-(my/256)
    A%=139
    B%=(hix%*28)+xoff%
    C%=(hiy%*24)+yoff%
    CALL plot_letter_sprite
    ?(score_table+entry%+(pos%*8))=slet%+(hiy%*7)+hix%
    B%=120

    FOR I%=0 TO entry%
      A%=?(score_table+I%+(pos%*8))
      C%=196

      IF A%<(slet%+26):CALL plot_letter_sprite
      B%+=28
    NEXT I%


    IF b >0:b=1

    IF b>lastb%:entry%+=1

    IF hix%=6:IF hiy%=3:IF b>lastb%:entry%-=2:IF entry%<0 entry%=0

    IF hix%=5:IF hiy%=3:IF b>lastb%:?(score_table+entry%+(pos%*8))=(slet%+30)
    lastb%=b
  UNTIL entry%>=3


ENDPROC


DEF PROCdisplay_score_table

  LOCAL y%
  y%=40

  REPEAT
    MOUSE mx,my,b
  UNTIL b=0

  CALL refresh_screen
  CALL print_high_scores

  FOR I%=0 TO7
    A%=I%+41
    B%=16
    C%=y%
    CALL plot_letter_sprite
    B%=60

    FOR n=0 TO2
      A%=?(score_table+(I%*8)+n)
      C%=y%

      IF A%<76:CALL plot_letter_sprite
      B%+=20
    NEXT n

    A%=!(score_table+(I%*8)+4)
    B%=260
    C%=y%
    CALL plot_2dig_no_a
    y%+=24
  NEXT I%

  CALL screen_swap
  CALL refresh_screen
  tt%=400

  REPEAT
    MOUSE mx,my,b
    WAIT
    tt%-=1

    IF tt%<0 b=1
  UNTIL b<>0


ENDPROC


DEF PROCfinal_track

  LOCAL fade%,fdout%
  fdout%=0
  fade%=0
  SYS6,21,9

  REPEAT
    MOUSE mx,my,b
  UNTIL b=0


  REPEAT
    CALL register_frame_compensation
    MOUSE mx,my,b
    CALL screen_swap
    CALL refresh_screen
    CALL print_final_track

    IF fdout%=1:fade%+=1

    IF fade%<0 fade%=0

    IF fade%>16 fade%=16
    A%=fade%

    IF fade%<>0:CALL screen_fade

    IF b=1:dont_select_track%!0=1

    IF b>1:dont_select_track%!0=0

    IF b<>0:fdout%=1
    CALL frame_compensation
  UNTIL fade%>15


ENDPROC


DEF PROCgame_over_cam

  LOCAL fade%,fdout%,tt%
  fdout%=0
  fade%=15
  tt%=600
  camera_position%!0=-200
  camera_position%!4=-130
  camera_position%!8=-1200
  camera_position%!16=2
  sndstat%=!(world_data_header%+52)
  !(world_data_header%+52)=0
  !(craft_motion_control_base%+104)=0

  REPEAT
    CALL register_frame_compensation
    MOUSE mx,my,b
    CALL screen_swap
    CALL plot_ground
    CALL plot_sky
    obadr%=!(world_data_header%+8)+128
    mvdadr%=!(world_data_header%+8)
    rcedat%=!(world_data_header%+32)
    CALL maintain_crafts
    CALL tracking_camera
    CALL calculate_world
    CALL print_game_over

    IF fdout%=0:fade%-=1:CALL check_sound_keys

    IF fdout%=1:fade%+=1:CALL fade_out_music

    IF fade%<0 fade%=0

    IF fade%>16 fade%=16
    A%=fade%

    IF fade%<>0:CALL screen_fade

    IF fade%=0:IF b<>0:fdout%=1

    IF fade%=0:IF tt%<=0:fdout%=1
    tt%-=1
    CALL frame_compensation
  UNTIL fade%>14

  !(world_data_header%+52)=sndstat%

ENDPROC


DEF PROCdemo_mode

  LOCAL fade%,fdout%,change%,tt%
  fdout%=0
  fade%=15
  change%=100
  PROCload_track(RND(5)-1)
  CALL reset_race
  sndstat%=!(world_data_header%+52)
  !(world_data_header%+52)=0
  camera_position%!16=2
  cam_mode%=0
  tt%=600

  REPEAT
    CALL register_frame_compensation
    MOUSE mx,my,b
    CALL screen_swap
    CALL plot_ground
    CALL plot_sky
    !(craft_motion_control_base%+104)=0
    CALL maintain_crafts

    IF cam_mode%=0 THEN
      CALL focus_camera_on_object
    ELSE
      CALL tracking_camera
    ENDIF

    A%=0
    CALL missile_motion_control
    A%=1
    CALL missile_motion_control
    A%=2
    CALL missile_motion_control
    CALL calculate_world
    CALL calculate_explosions

    IF fdout%=0:fade%-=1:CALL check_sound_keys

    IF fdout%=1:fade%+=1:CALL fade_out_music

    IF fade%<0 fade%=0

    IF fade%>16 fade%=16
    A%=fade%

    IF fade%<>0:CALL screen_fade
    tt%-=1

    IF fade%=0:IF b<>0:fdout%=1

    IF fade%=0:IF tt%<=0:fdout%=1
    CALL frame_compensation
    change%-=1

    IF change%=0 THEN
      cam_mode%-=1

      IF cam_mode%<0 cam_mode%=1
      camera_position%!16=RND(5)-1
      camera_position%!40=-300-RND(400)
      camera_position%!28=(RND(2)-1)*180
      camera_position%!24=(RND(2)-1)*180
      change%=RND(50)+100
    ENDIF

  UNTIL fade%>14

  !(world_data_header%+52)=sndstat%

ENDPROC


DEF PROCcomplete_game

  LOCAL fade%,fdout%,change%,tt%,txt%,txtno%
  fdout%=0
  fade%=15
  change%=100
  PROCload_track(8)
  CALL reset_race
  sndstat%=!(world_data_header%+52)
  !(world_data_header%+52)=0
  camera_position%!16=2
  cam_mode%=0
  tt%=1168
  txt%=200
  txtno%=0

  REPEAT
    CALL register_frame_compensation
    MOUSE mx,my,b
    CALL screen_swap
    CALL plot_ground
    CALL plot_sky
    !(craft_motion_control_base%+104)=0
    CALL maintain_crafts

    IF cam_mode%=0 THEN
      CALL focus_camera_on_object
    ELSE
      CALL tracking_camera
    ENDIF

    A%=0
    CALL missile_motion_control
    A%=1
    CALL missile_motion_control
    A%=2
    CALL missile_motion_control
    CALL calculate_world
    CALL calculate_explosions

    CASE txtno% OF
    WHEN0
    CALL print_congrats_drifter_complete
    WHEN1
    CALL print_access_secret_craft
    WHEN2
    CALL print_future_releases
    ENDCASE

    txt%-=1

    IF txt%<0 txt%=200:txtno%-=1:IF txtno%<0 txtno%=2

    IF fdout%=0:fade%-=1:CALL check_sound_keys

    IF fdout%=1:fade%+=1:CALL fade_out_music

    IF fade%<0 fade%=0

    IF fade%>16 fade%=16
    A%=fade%

    IF fade%<>0:CALL screen_fade
    tt%-=1

    IF fade%=0:IF b<>0:fdout%=1:CALL check_sound_keys

    IF fade%=0:IF tt%<=0:fdout%=1
    CALL frame_compensation
    change%-=1

    IF change%=0 THEN
      cam_mode%-=1

      IF cam_mode%<0 cam_mode%=1
      camera_position%!16=RND(5)-1
      camera_position%!40=-300-RND(400)
      camera_position%!28=(RND(2)-1)*180
      camera_position%!24=(RND(2)-1)*180
      change%=RND(50)+100
    ENDIF

  UNTIL fade%>15

  !(world_data_header%+52)=sndstat%

ENDPROC


DEF PROCsave_score_table

  LOCAL end%
  end%=score_table+(8*8)
  OSCLI"SAVE <Perpetual_Disc2$Dir>.Tracks._ScoreTab "+STR$~score_table+" "+STR$~end%

ENDPROC


DEF PROCload_score_table

  OSCLI"LOAD <Perpetual_Disc2$Dir>.Tracks._ScoreTab "+STR$~score_table

ENDPROC


DEF PROCassemble_main_loop_code

  LOCAL adr%,pass%,link,sp
  link=14
  sp=11
  adr%=P%

  FOR pass%=8 TO10 STEP2
    P%=adr%
    L%=code% +len%

    [OPT pass%

      .world_data_header_base% EQUD world_data_header%

      .no_music_loaded% EQUD 0

      .riscos_v% EQUD 0

      .total_mem% EQUD 0

      .overall_sound_volume% EQUD 127

      .plot_mouse_ptr
      STMFA (sp)!,{r0-r10,r12,link}
        SWI "OS_Mouse"
        MOV r0,r0,ASR#2
        MOV r1,r1,ASR#2
        RSB r1,r1,#255
        CMP r0,#308
        MOVGT r0,#308
        CMP r1,#239
        MOVGT r1,#239
        ANDr3,r0,#3
        BIC r0,r0,#3
        MOV r2,r1
        MOV r1,r0
        MOV r0,#100
        ADD r0,r0,r3
        BL plot_letter_sprite

      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .snd_opt_sign% EQUD 1

      .check_sound_option
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r10,snd_opt_sign%
        MOVS r10,r10
        BNE cssopt_no_none
        MOV r0,#64
        MOV r1,#260
        MOV r2,#160
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#55
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#55
        BL plot_letter_sprite


        .cssopt_no_none
        CMP r10,#1
        BNE cssopt_no_fx
        MOV r0,#55
        MOV r1,#280
        MOV r2,#160
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#73
        BL plot_letter_sprite


        .cssopt_no_fx
        CMP r10,#2
        BNE cssopt_no_music
        MOV r0,#62
        MOV r1,#220
        MOV r2,#160
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#70
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#68
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#58
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#52
        BL plot_letter_sprite


        .cssopt_no_music
        LDR r0,[r12,#4]
        MOV r4,#3
        CMP r0,#3
        SUBEQ r4,r4,#1
        LDR r0,[r12,#8]
        MOVS r0,r0
        SUBEQ r4,r4,#1
        MOV r0,#129
        MVN r1,#73
        MOV r2,#255
        SWI "OS_Byte"
        MOV r3,#2
        CMP r1,#255
        SUBEQ r3,r3,#1
        CMP r2,#255
        SUBEQ r3,r3,#1
        MOVS r3,r3
        SUBEQ r4,r4,#1
        MOVS r4,r4
        BGT end_cssopt_bbttbb
        SUBS r10,r10,#1
        MOVLT r10,#2
        STR r10,snd_opt_sign%
        LDR r12,world_data_header_base%
        CMP r10,#1
        MOVEQ r0,#1
        MOVNE r0,#0
        STR r0,[r12,#52]
        CMP r10,#2
        MOVEQ r0,#1
        MOVNE r0,#0
        LDR r12,no_music_loaded%
        MOVS r12,r12
        MOVNE r0,#0
        BL req_music_stat

        STR r0,[r12]

        .end_cssopt_bbttbb
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .check_sound_keys
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r12,overall_sound_volume%
        MOV r0,#129
        MVN r1,#113
        MOV r2,#255
        SWI "OS_Byte"
        MOV r3,#2
        CMP r1,#255
        SUBEQ r3,r3,#1
        CMP r2,#255
        SUBEQ r3,r3,#1
        MOVS r3,r3
        SUBEQ r12,r12,#2
        MOV r0,#129
        MVN r1,#114
        MOV r2,#255
        SWI "OS_Byte"
        MOV r3,#2
        CMP r1,#255
        SUBEQ r3,r3,#1
        CMP r2,#255
        SUBEQ r3,r3,#1
        MOVS r3,r3
        ADDEQ r12,r12,#2
        MOVS r12,r12
        MOVLT r12,#0
        CMP r12,#127
        MOVGT r12,#127
        LDR r10,overall_sound_volume%
        STR r12,overall_sound_volume%
        MOV r0,r12,ASR#1
        SWI "QTM_Volume"
        CMP r10,r12
        BEQ end_check_sound_keys
        MOV r0,r12
        BL request_ssvol_base

        MOV r0,r0,ASR#3
        RSB r0,r0,#15
        STR r0,[r12]

        .end_check_sound_keys
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .check_riscos_version
      STMFA (sp)!,{r0-r10,r12,link}
        MOV r0,#129
        MOV r1,#0
        MOV r2,#&FF
        SWI "OS_Byte"
        STR r1,riscos_v%
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .check_mem_size
      STMFA (sp)!,{r0-r10,r12,link}
        SWI "OS_ReadMemMapInfo"
        MUL r2,r1,r0
        STR r2,total_mem%
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .max_prac_trackno% EQUD 2

      .practice_tracks_screen
      STMFA (sp)!,{r0-r10,r12,link}
        MOV r0,#21
        MOV r1,#9
        SWI "OS_Byte"
        MOV r12,#50
        MOV r5,#100
        MOV r4,#0
        MOV r3,#4096

        .practice_track_intro_loop
          BL screen_swap

          BL refresh_screen

          BL plot_sel_trk

          MOV r10,#8
          ADR r9,track_piccies%

          .track_piccie_intro
          LDMIA r9!,{r0-r2}
          BL display_object

          SUBS r10,r10,#1
          BGT track_piccie_intro
          SUBS r5,r5,#2
          ADDLT r5,r5,#360
          SUB r3,r3,#68
          SUBS r12,r12,#1
        BGT practice_track_intro_loop

        MOV r12,#2048

        .practice_track_main_loop
          BL screen_swap

          BL refresh_screen

          BL plot_sel_trk

          MOV r10,#8
          ADR r9,track_piccies%

          .track_piccie_main
          LDMIA r9!,{r0-r2}
          BL display_object

          SUBS r10,r10,#1
          BGT track_piccie_main
          SUBS r5,r5,#2
          ADDLT r5,r5,#360
          STMFA (sp)!,{r0-r5}
            MOV r7,#0
            MOV r6,#2
            SWI "OS_Mouse"
            MOVS r2,r2
            SUBNE r6,r6,#1
            MOV r0,r0,ASR#2
            MOV r1,r1,ASR#2
            CMP r0,#80
            ADDGE r7,r7,#1
            CMP r0,#160
            ADDGE r7,r7,#1
            CMP r0,#240
            ADDGE r7,r7,#1
            CMP r1,#128
            ADDLT r7,r7,#4
          LDMFA (sp)!,{r0-r5}
          STR r7,play_track_no%
          LDR r1,max_prac_trackno%
          CMP r7,r1
          SUBLT r6,r6,#1
          BL plot_mouse_ptr

          MOVS r6,r6
        BNE practice_track_main_loop

        MOV r12,#50

        .practice_track_outro_loop
          BL screen_swap

          BL refresh_screen

          BL plot_sel_trk

          MOV r10,#8
          ADR r9,track_piccies%

          .track_piccie_outro
          LDMIA r9!,{r0-r2}
          BL display_object

          SUBS r10,r10,#1
          BGT track_piccie_outro
          SUBS r5,r5,#2
          ADDLT r5,r5,#360
          ADD r3,r3,#68
          SUBS r12,r12,#1
        BGT practice_track_outro_loop

        MOV r12,#16

        .practice_track_fdout_loop
          BL screen_swap

          BL refresh_screen

          BL plot_sel_trk

          MOV r10,#8
          ADR r9,track_piccies%

          .track_piccie_fdout
          LDMIA r9!,{r0-r2}
          BL display_object

          SUBS r10,r10,#1
          BGT track_piccie_fdout
          SUBS r5,r5,#2
          ADDLT r5,r5,#360
          STMFA (sp)!,{r0}
            RSB r0,r12,#16
            CMP r0,#15
            MOVGT r0,#15
            BL screen_fade

          LDMFA (sp)!,{r0}
          ADD r3,r3,#68
          SUBS r12,r12,#1
        BGT practice_track_fdout_loop

        BL screen_swap

        BL clr_scr


        .end_practice_tracks_screen
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .play_track_no% EQUD 0

      .game_level% EQUD 0

      .dont_select_track% EQUD 0

      .track_status% EQUD 0

      .seltrk_data%
      EQUD 36
      EQUD 37
      EQUD 44
      EQUD 45
      EQUD 50
      EQUD 51
      EQUD 52
      EQUD 53

      .select_track
      STMFA (sp)!,{r0-r10,r12,link}
        MOV r0,#21
        MOV r1,#9
        SWI "OS_Byte"
        LDR r12,game_level%
        MOV r12,r12,ASL#1
        ADR r10,seltrk_data%
        MOV r9,#50
        MOV r5,#100
        MOV r4,#0
        MOV r3,#3776

        .select_track_intro
        BL screen_swap

        BL refresh_screen

        BL plot_sel_trk

        STMFA (sp)!,{r0}
          MOV r0,r12,ASR#1
          BL plot_level_text

        LDMFA (sp)!,{r0}
        ADD r8,r10,r12,ASL#2
        LDR r0,[r8]
        MOV r1,#120
        RSB r1,r1,#0
        MOV r2,#0
        BL display_object

        LDR r0,[r8,#4]
        MOV r1,#120
        BL display_object

        SUBS r5,r5,#2
        ADDLT r5,r5,#360
        SUB r3,r3,#68
        SUBS r9,r9,#1
        BGT select_track_intro

        .select_track_loop
          BL screen_swap

          BL refresh_screen

          BL plot_sel_trk

          STMFA (sp)!,{r0}
            MOV r0,r12,ASR#1
            BL plot_level_text

          LDMFA (sp)!,{r0}
          ADD r8,r10,r12,ASL#2
          LDR r0,[r8]
          MOV r1,#120
          RSB r1,r1,#0
          MOV r2,#0
          BL display_object

          LDR r0,[r8,#4]
          MOV r1,#120
          BL display_object

          SUBS r5,r5,#2
          ADDLT r5,r5,#360
          MOV r6,#0
          MOV r7,#1
          STMFA (sp)!,{r0-r3}
            SWI "OS_Mouse"
            MOVS r2,r2
            MOV r0,r0,ASR#2
            MOV r1,r1,ASR#2
            SUBNE r7,r7,#1
            MOV r1,#0
            CMP r2,#1
            MOVGT r1,#0
            STR r1,dont_select_track%
            CMP r2,#1
            MOVEQ r1,#1
            STR r1,dont_select_track%
            CMP r0,#160
            ADDGT r6,r6,#1
            ADD r6,r6,r12
          LDMFA (sp)!,{r0-r3}
          LDR r0,track_status%
          MOV r2,#1
          TST r0,r2,LSL r6
          MOVNE r7,#1
          LDR r1,dont_select_track%
          CMP r1,#1
          MOVEQ r7,#0
          BL plot_mouse_ptr

          STR r6,play_track_no%
          MOVS r7,r7
        BGT select_track_loop

        MOV r9,#34

        .select_track_outro
        BL screen_swap

        BL refresh_screen

        BL plot_sel_trk

        STMFA (sp)!,{r0}
          MOV r0,r12,ASR#1
          BL plot_level_text

        LDMFA (sp)!,{r0}
        ADD r8,r10,r12,ASL#2
        LDR r0,[r8]
        MOV r1,#120
        RSB r1,r1,#0
        MOV r2,#0
        BL display_object

        LDR r0,[r8,#4]
        MOV r1,#120
        BL display_object

        SUBS r5,r5,#2
        ADDLT r5,r5,#360
        ADD r3,r3,#68
        SUBS r9,r9,#1
        BGT select_track_outro
        MOV r9,#16

        .select_track_fdout
        BL register_frame_compensation

        BL screen_swap

        BL refresh_screen

        BL plot_sel_trk

        STMFA (sp)!,{r0}
          MOV r0,r12,ASR#1
          BL plot_level_text

        LDMFA (sp)!,{r0}
        ADD r8,r10,r12,ASL#2
        LDR r0,[r8]
        MOV r1,#120
        RSB r1,r1,#0
        MOV r2,#0
        BL display_object

        LDR r0,[r8,#4]
        MOV r1,#120
        BL display_object

        SUBS r5,r5,#2
        ADDLT r5,r5,#360
        ADD r3,r3,#68
        STMFA (sp)!,{r0}
          RSB r0,r9,#16
          CMP r0,#15
          MOVGT r0,#15
          BL screen_fade

        LDMFA (sp)!,{r0}
        BL frame_compensation

        SUBS r9,r9,#1
        BGT select_track_fdout
        BL screen_swap

        BL clr_scr

        MOV r0,#21
        MOV r1,#9
        SWI "OS_Byte"
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .track_piccies%
      EQUD 36
      EQUD -325
      EQUD -100
      EQUD 37
      EQUD -110
      EQUD -100
      EQUD 44
      EQUD 110
      EQUD -100
      EQUD 45
      EQUD 325
      EQUD -100
      EQUD 50
      EQUD -325
      EQUD 170
      EQUD 51
      EQUD -110
      EQUD 170
      EQUD 52
      EQUD 110
      EQUD 170
      EQUD 53
      EQUD 325
      EQUD 170

      .sort_out_track_status
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r12,world_data_header_base%
        LDR r10,[r12,#8]
        LDR r12,track_status%
        LDR r9,play_track_no%
        LDR r8,[r10,#116]
        MOV r0,#1
        CMP r8,#2
        ORRLE r12,r12,r0,LSL r9
        STR r12,track_status%
        MOV r0,#3
        MOV r1,#0
        ANDr2,r12,r0
        CMP r2,#3
        ADDEQ r1,r1,#1
        MOV r0,#15
        ANDr2,r12,r0
        CMP r2,#15
        ADDEQ r1,r1,#1
        MOV r0,#63
        ANDr2,r12,r0
        CMP r2,#63
        ADDEQ r1,r1,#1
        STR r1,game_level%
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .req_music_stat
      ADR r12,music_status%
      MOV PC,link

      .detail_level_adr% EQUD detail_level_status%

      .camera_position_base% EQUD camera_position%

      .world_data_header_base% EQUD world_data_header%

      .ingame_music%
      EQUS "<Perpetual_Disc2$Dir>.Music.InGame"
      EQUB 0
      ALIGN

      .intro_music%
      EQUS "<Perpetual_Disc2$Dir>.Music.Intro"
      EQUB 0
      ALIGN

      .music_status% EQUD 1

      .soundfx_stat% EQUD 0

      .start_music
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r12,music_status%
        MOVS r12,r12
        MOV r0,#63
        SWI "QTM_Volume"
        SWINE "QTM_Start"
        MOVS r12,r12
        BEQ no_music
        LDR r10,world_data_header_base%
        LDR r9,[r10,#52]
        STR r9,soundfx_stat%
        MOV r9,#0
        STR r9,[r10,#52]

        .no_music
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .stop_music
      STMFA (sp)!,{r0-r10,r12,link}
        SWI "QTM_Stop"
        LDR r12,music_status%
        MOVS r12,r12
        BEQ end_stop_music
        LDR r10,world_data_header_base%
        LDR r9,soundfx_stat%
        STR r9,[r10,#52]

        .end_stop_music
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .fade_out_music
      STMFA (sp)!,{r0-r10,r12,link}
        MOV r0,#1
        RSB r0,r0,#0
        SWI "QTM_Volume"
        SUBS r0,r0,#4
        MOVLT r0,#0
        SWI "QTM_Volume"
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .check_music_opt
      STMFA (sp)!,{r0-r10,r12,link}
        CMP r10,#3
        MOV r5,#1
        LDR r9,music_status%
        BNE not_on_musopt
        MOV r0,#129
        MVN r1,#73
        MOV r2,#255
        SWI "OS_Byte"
        MOV r3,#2
        CMP r1,#255
        SUBEQ r3,r3,#1
        CMP r2,#255
        SUBEQ r3,r3,#1
        MOVS r3,r3
        SUBEQ r5,r5,#1
        LDR r6,[r12,#8]
        MOVS r6,r6
        BNE not_on_musopt
        MOVS r5,r5
        SUBEQS r9,r9,#1
        MOVLT r9,#1
        LDR r8,no_music_loaded%
        MOVS r8,r8
        MOVNE r9,#0
        STR r9,music_status%

        .not_on_musopt
        MOVS r9,r9
        MOVEQ r0,#64
        MOVEQ r1,#260
        MOVEQ r2,#180
        BLEQ plot_letter_sprite

        MOVS r9,r9
        MOVEQ r0,#55
        ADDEQ r1,r1,#20
        BLEQ plot_letter_sprite

        MOVS r9,r9
        MOVEQ r0,#55
        ADDEQ r1,r1,#20
        BLEQ plot_letter_sprite

        MOVS r9,r9
        MOVNE r0,#64
        MOVNE r1,#280
        MOVNE r2,#180
        BLNE plot_letter_sprite

        MOVS r9,r9
        MOVNE r0,#63
        MOVNE r1,#300
        BLNE plot_letter_sprite

      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .track_complete
      STMFA (sp)!,{r0-r10,r12,link}
        MOV r12,#16

        .track_complete_fadein
        BL screen_swap

        BL refresh_screen

        BL track_complete_information

        SUB r0,r12,#1
        BL screen_fade

        SUBS r12,r12,#1
        BGT track_complete_fadein
        MOV r12,#800

        .track_complete_loop
          BL screen_swap

          BL refresh_screen

          BL track_complete_information

          CMP r12,#700
          BGT dont_check_mouse
          SWI "OS_Mouse"
          MOVS r2,r2
          MOVNE r12,#0

          .dont_check_mouse
          SUBS r12,r12,#1
        BGT track_complete_loop

      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .track_complete_information
      STMFA (sp)!,{r0-r10,r12,link}
        MOV r1,#4
        MOV r2,#8
        MOV r0,#29
        ADD r1,r1,#20
        BL plot_letter_sprite

        MOV r0,#27
        ADD r1,r1,#20
        BL plot_letter_sprite

        MOV r0,#10
        ADD r1,r1,#20
        BL plot_letter_sprite

        MOV r0,#12
        ADD r1,r1,#20
        BL plot_letter_sprite

        MOV r0,#20
        ADD r1,r1,#20
        BL plot_letter_sprite

        MOV r0,#12
        ADD r1,r1,#32
        BL plot_letter_sprite

        MOV r0,#24
        ADD r1,r1,#20
        BL plot_letter_sprite

        MOV r0,#22
        ADD r1,r1,#20
        BL plot_letter_sprite

        MOV r0,#25
        ADD r1,r1,#20
        BL plot_letter_sprite

        MOV r0,#21
        ADD r1,r1,#20
        BL plot_letter_sprite

        MOV r0,#14
        ADD r1,r1,#20
        BL plot_letter_sprite

        MOV r0,#29
        ADD r1,r1,#20
        BL plot_letter_sprite

        MOV r0,#14
        ADD r1,r1,#20
        BL plot_letter_sprite

        MOV r12,#5
        ADR r10,track_complete_text

        .track_complete_plotwords_lp
        LDR r9,[r10],#4
        LDR r1,[r10],#4
        LDR r2,[r10],#4

        .track_complete_plotletters_lp
        LDR r0,[r10],#4
        CMP r0,#255
        BLNE plot_letter_sprite

        ADDNE r1,r1,#20
        ADDEQ r1,r1,#8
        SUBS r9,r9,#1
        BGT track_complete_plotletters_lp
        SUBS r12,r12,#1
        BGT track_complete_plotwords_lp
        LDR r12,world_data_header_base%
        LDR r10,[r12,#8]
        LDR r6,[r10,#116]
        ADD r4,r6,#159
        MOV r2,#32
        MOV r0,#292
        MOV r1,#58
        BL scaled_sprite

        LDR r0,[r10,#124]
        MOV r1,#300
        MOV r2,#90
        BL plot_4dig_time

        LDR r10,[r12,#68]
        LDR r0,[r10,#4]
        MOV r1,#260
        MOV r2,#162
        BL plot_2dig_no

        LDR r0,[r10]
        MOV r2,#138
        BL plot_2dig_no

        LDR r0,[r12,#72]
        MOV r1,#300
        MOV r2,#114
        BL plot_4dig_time

        CMP r6,#2
        BLGT plot_sorry_try_again

        CMP r6,#2
        BLLE plot_next_track

      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .track_complete_text
      EQUD 8
      EQUD 4
      EQUD 50
      EQUD 25
      EQUD 24
      EQUD 28
      EQUD 18
      EQUD 29
      EQUD 18
      EQUD 24
      EQUD 23
      EQUD 11
      EQUD 4
      EQUD 90
      EQUD 15
      EQUD 10
      EQUD 28
      EQUD 29
      EQUD 14
      EQUD 28
      EQUD 29
      EQUD 255
      EQUD 21
      EQUD 10
      EQUD 25
      EQUD 10
      EQUD 4
      EQUD 114
      EQUD 27
      EQUD 14
      EQUD 12
      EQUD 24
      EQUD 27
      EQUD 13
      EQUD 255
      EQUD 21
      EQUD 10
      EQUD 25
      EQUD 6
      EQUD 4
      EQUD 138
      EQUD 25
      EQUD 24
      EQUD 18
      EQUD 23
      EQUD 29
      EQUD 28
      EQUD 12
      EQUD 4
      EQUD 162
      EQUD 29
      EQUD 24
      EQUD 29
      EQUD 10
      EQUD 21
      EQUD 255
      EQUD 25
      EQUD 24
      EQUD 18
      EQUD 23
      EQUD 29
      EQUD 28

      .plot_2dig_no
      STMFA (sp)!,{r0-r10,r12,link}
        MOV r3,#10
        FNint_div(0,3,4,5)
        MOV r0,r5
        ADD r1,r1,#20
        BL plot_letter_sprite

        FNint_div(4,3,5,0)
        SUB r1,r1,#20
        MOVS r0,r0
        BLNE plot_letter_sprite

      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .plot_2dig_no_a
      STMFA (sp)!,{r0-r10,r12,link}
        MOV r3,#10
        FNint_div(0,3,4,5)
        MOV r0,r5
        ADD r0,r0,#40
        ADD r1,r1,#20
        BL plot_letter_sprite

        FNint_div(4,3,5,0)
        SUB r1,r1,#20
        MOVS r0,r0
        ADD r0,r0,#40
        BLNE plot_letter_sprite

      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .plot_4dig_time
      STMFA (sp)!,{r0-r10,r12,link}
        MOV r3,#10
        FNint_div(0,3,4,5)
        MOV r0,r5
        BL plot_letter_sprite

        SUB r1,r1,#16
        MOV r0,#38
        BL plot_letter_sprite

        FNint_div(4,3,5,0)
        SUB r1,r1,#16
        BL plot_letter_sprite

        FNint_div(5,3,4,6)
        FNint_div(4,3,5,7)
        MOVS r6,r6
        MOVNE r0,r6
        SUB r1,r1,#20
        BLNE plot_letter_sprite

        MOVS r7,r7
        BEQ end_plot_4dig_time
        SUB r1,r1,#20
        MOV r0,r7
        BL plot_letter_sprite

        MOVS r6,r6
        ADDEQ r1,r1,#20
        MOVEQ r0,r6
        BL plot_letter_sprite


        .end_plot_4dig_time
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .game_type% EQUD 2

      .quit% EQUD 0

      .intro_credits
      STMFA (sp)!,{r0-r10,r12,link}
        MOV r12,#16
        MOV r4,#0
        MOV r5,#0
        BL start_music


        .intro_credits_fadein
        BL register_frame_compensation

        BL screen_swap

        BL clr_scr

        BL check_sound_keys

        MOV r0,#130
        MOV r1,#3
        MOV r2,#4
        BL plot_sprite32

        ADD r0,r0,#1
        ADD r1,r1,#1
        BL plot_sprite32

        ADD r0,r0,#1
        ADD r1,r1,#1
        BL plot_sprite32

        ADD r0,r0,#1
        ADD r1,r1,#1
        BL plot_sprite32

        MOV r0,#140
        MOV r1,#3
        MOV r2,#5
        BL plot_sprite32

        ADD r0,r0,#1
        ADD r1,r1,#1
        BL plot_sprite32

        ADD r0,r0,#1
        ADD r1,r1,#1
        BL plot_sprite32

        ADD r0,r0,#1
        ADD r1,r1,#1
        BL plot_sprite32

        MOV r0,#134
        MOV r1,#3
        MOV r2,#6
        BL plot_sprite32

        ADD r0,r0,#1
        ADD r1,r1,#1
        BL plot_sprite32

        ADD r0,r0,#1
        ADD r1,r1,#1
        BL plot_sprite32

        ADD r0,r0,#1
        ADD r1,r1,#1
        BL plot_sprite32

        MOV r0,#20
        MOV r1,#0
        MOV r2,#240
        RSB r2,r2,#0
        MOV r3,#856
        BL display_object

        SUBS r4,r4,#4
        ADDLT r4,r4,#360
        SUBS r5,r5,#2
        ADDLT r5,r5,#360
        SUB r0,r12,#1
        BL screen_fade

        BL frame_compensation

        SUBS r12,r12,#1
        BGT intro_credits_fadein
        MOV r6,#0
        MOV r7,#4
        MOV r12,#2560

        .intro_credits_loop
          BL register_frame_compensation

          BL screen_swap

          BL clr_scr

          BL check_sound_keys

          MOV r0,#130
          MOV r1,#3
          MOV r2,#4
          BL plot_sprite32

          ADD r0,r0,#1
          ADD r1,r1,#1
          BL plot_sprite32

          ADD r0,r0,#1
          ADD r1,r1,#1
          BL plot_sprite32

          ADD r0,r0,#1
          ADD r1,r1,#1
          BL plot_sprite32

          MOV r0,#140
          MOV r1,#3
          MOV r2,#5
          BL plot_sprite32

          ADD r0,r0,#1
          ADD r1,r1,#1
          BL plot_sprite32

          ADD r0,r0,#1
          ADD r1,r1,#1
          BL plot_sprite32

          ADD r0,r0,#1
          ADD r1,r1,#1
          BL plot_sprite32

          MOV r0,#134
          MOV r1,#3
          MOV r2,#6
          BL plot_sprite32

          ADD r0,r0,#1
          ADD r1,r1,#1
          BL plot_sprite32

          ADD r0,r0,#1
          ADD r1,r1,#1
          BL plot_sprite32

          ADD r0,r0,#1
          ADD r1,r1,#1
          BL plot_sprite32

          MOV r0,#20
          MOV r1,#0
          MOV r2,#240
          RSB r2,r2,#0
          MOV r3,#856
          BL display_object

          SUBS r4,r4,#4
          ADDLT r4,r4,#360
          SUBS r5,r5,#2
          ADDLT r5,r5,#360
          MOVS r6,r6
          MOVEQ r0,r7
          BLEQ plot_small_letters

          MOVS r6,r6
          MOVEQ r0,#224
          BLEQ store_section

          MOVS r6,r6
          MOVGT r0,#224
          BLGT refresh_section

          CMP r6,#3
          RSBLE r0,r6,#3
          MOVLE r1,#224
          MOVLE r2,#244
          BLLE section_fade

          CMP r6,#124
          SUBGE r0,r6,#124
          MOVGE r1,#224
          MOVGE r2,#244
          BLGE section_fade

          ADD r6,r6,#1
          CMP r6,#128
          MOVGE r6,#0
          ADDGE r7,r7,#1
          BL check_for_hyper_cheat

          SWI "OS_Mouse"
          MOVS r2,r2
          MOVNE r12,#0

          .intro_synctime
          BL frame_compensation

          SUBS r12,r12,#1
        BGT intro_credits_loop

        MOV r12,#16

        .intro_credits_fadeout
        BL register_frame_compensation

        BL screen_swap

        BL clr_scr

        MOV r0,#130
        MOV r1,#3
        MOV r2,#4
        BL plot_sprite32

        ADD r0,r0,#1
        ADD r1,r1,#1
        BL plot_sprite32

        ADD r0,r0,#1
        ADD r1,r1,#1
        BL plot_sprite32

        ADD r0,r0,#1
        ADD r1,r1,#1
        BL plot_sprite32

        MOV r0,#140
        MOV r1,#3
        MOV r2,#5
        BL plot_sprite32

        ADD r0,r0,#1
        ADD r1,r1,#1
        BL plot_sprite32

        ADD r0,r0,#1
        ADD r1,r1,#1
        BL plot_sprite32

        ADD r0,r0,#1
        ADD r1,r1,#1
        BL plot_sprite32

        MOV r0,#134
        MOV r1,#3
        MOV r2,#6
        BL plot_sprite32

        ADD r0,r0,#1
        ADD r1,r1,#1
        BL plot_sprite32

        ADD r0,r0,#1
        ADD r1,r1,#1
        BL plot_sprite32

        ADD r0,r0,#1
        ADD r1,r1,#1
        BL plot_sprite32

        MOV r0,#20
        MOV r1,#0
        MOV r2,#240
        RSB r2,r2,#0
        MOV r3,#856
        BL display_object

        SUBS r4,r4,#4
        ADDLT r4,r4,#360
        SUBS r5,r5,#2
        ADDLT r5,r5,#360
        RSB r0,r12,#16
        CMP r0,#15
        MOVGT r0,#15
        BL screen_fade

        BL fade_out_music

        BL frame_compensation

        SUBS r12,r12,#1
        BGE intro_credits_fadeout
        BL stop_music

        BL check_sound_keys

      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .hyper_cheat% EQUD 0

      .check_for_hyper_cheat
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r12,hyper_cheat%
        MOV r0,#129
        MVN r1,#84
        MOV r2,#255
        SWI "OS_Byte"
        MOV r3,#2
        CMP r1,#255
        SUBEQ r3,r3,#1
        CMP r2,#255
        SUBEQ r3,r3,#1
        MOVS r3,r3
        ORREQ r12,r12,#1
        STREQ r12,hyper_cheat%
        TST r12,#1
        BEQ end_check_for_cheat
        MOV r0,#129
        MVN r1,#68
        MOV r2,#255
        SWI "OS_Byte"
        MOV r3,#2
        CMP r1,#255
        SUBEQ r3,r3,#1
        CMP r2,#255
        SUBEQ r3,r3,#1
        MOVS r3,r3
        ORREQ r12,r12,#1<<1
        STREQ r12,hyper_cheat%
        TST r12,#1<<1
        BEQ end_check_for_cheat
        MOV r0,#129
        MVN r1,#55
        MOV r2,#255
        SWI "OS_Byte"
        MOV r3,#2
        CMP r1,#255
        SUBEQ r3,r3,#1
        CMP r2,#255
        SUBEQ r3,r3,#1
        MOVS r3,r3
        ORREQ r12,r12,#1<<2
        STREQ r12,hyper_cheat%
        TST r12,#1<<2
        BEQ end_check_for_cheat
        MOV r0,#129
        MVN r1,#34
        MOV r2,#255
        SWI "OS_Byte"
        MOV r3,#2
        CMP r1,#255
        SUBEQ r3,r3,#1
        CMP r2,#255
        SUBEQ r3,r3,#1
        MOVS r3,r3
        ORREQ r12,r12,#1<<3
        STREQ r12,hyper_cheat%
        TST r12,#1<<3
        BEQ end_check_for_cheat
        MOV r0,#129
        MVN r1,#51
        MOV r2,#255
        SWI "OS_Byte"
        MOV r3,#2
        CMP r1,#255
        SUBEQ r3,r3,#1
        CMP r2,#255
        SUBEQ r3,r3,#1
        MOVS r3,r3
        ORREQ r12,r12,#1<<4
        STREQ r12,hyper_cheat%
        TST r12,#1<<4
        BEQ end_check_for_cheat
        CMP r12,#31
        MOV r0,#4
        STREQ r0,crafts_available%

        .end_check_for_cheat
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .fade_in_menu_backdrop
      STMFA (sp)!,{r0-r10,r12,link}
        MOV r1,#16

        .fdin_menubkdrop_lp
        BL register_frame_compensation

        BL screen_swap

        BL refresh_screen

        SUBS r0,r1,#1
        MOVLT r0,#0
        BL screen_fade

        BL frame_compensation

        SUBS r1,r1,#1
        BGE fdin_menubkdrop_lp
        BL screen_swap

      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .fade_out_menu_backdrop
      STMFA (sp)!,{r0-r10,r12,link}
        MOV r1,#16

        .fdout_menubkdrop_lp
        BL register_frame_compensation

        BL screen_swap

        BL refresh_screen

        RSB r0,r1,#16
        CMP r0,#15
        MOVGT r0,#15
        BL screen_fade

        BL frame_compensation

        SUBS r1,r1,#1
        BGE fdout_menubkdrop_lp
        BL screen_swap

      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .detail_level_adr% EQUD detail_level_status%

      .camera_position_base% EQUD camera_position%

      .world_data_header_base% EQUD world_data_header%

      .demo_available% EQUD 0

      .main
      STMFA (sp)!,{r0-r10,r12,link}
        MOV r0,#1
        STR r0,demo_available%
        MOV r0,#2048
        STR r0,menu_time%
        BL fade_in_menu_backdrop

        BL main_menu_intro


        .main_menu_loop
          BL screen_swap

          BL refresh_menu_screen

          BL plot_mouse_ptr

          MOV r10,#1
          SWI "OS_Mouse"
          MOV r0,r0,ASR#2
          MOV r1,r1,ASR#2
          MOV r3,#4
          CMP r0,#72
          SUBGE r3,r3,#1
          CMP r0,#125
          SUBLE r3,r3,#1
          CMP r1,#170
          SUBLE r3,r3,#1
          CMP r1,#120
          SUBGE r3,r3,#1
          MOV r4,#2
          MOVS r3,r3
          SUBEQ r4,r4,#1
          MOVS r2,r2
          SUBNE r4,r4,#1
          MOVS r4,r4
          SUBEQ r10,r10,#1
          MOVEQ r0,#0
          STREQ r0,game_type%
          MOVEQ r0,#2048
          STREQ r0,menu_time%
          MOV r3,#4
          CMP r0,#135
          SUBGE r3,r3,#1
          CMP r0,#185
          SUBLE r3,r3,#1
          CMP r1,#100
          SUBLE r3,r3,#1
          CMP r1,#50
          SUBGE r3,r3,#1
          MOV r4,#2
          MOVS r3,r3
          SUBEQ r4,r4,#1
          MOVS r2,r2
          SUBNE r4,r4,#1
          MOVS r4,r4
          MOVEQ r0,#2048
          STREQ r0,menu_time%
          BLEQ main_menu_outro

          MOVS r4,r4
          BLEQ options_menu

          MOVS r4,r4
          BLEQ main_menu_intro

          MOV r3,#4
          CMP r0,#20
          SUBGE r3,r3,#1
          CMP r0,#75
          SUBLE r3,r3,#1
          CMP r1,#100
          SUBLE r3,r3,#1
          CMP r1,#50
          SUBGE r3,r3,#1
          MOV r4,#2
          MOVS r3,r3
          SUBEQ r4,r4,#1
          MOVS r2,r2
          SUBNE r4,r4,#1
          MOVS r4,r4
          MOVEQ r0,#2048
          STREQ r0,menu_time%
          BLEQ main_menu_outro

          MOVS r4,r4
          BLEQ choose_craft_screen

          MOVS r4,r4
          BLEQ main_menu_intro

          MOV r3,#4
          CMP r0,#195
          SUBGE r3,r3,#1
          CMP r0,#248
          SUBLE r3,r3,#1
          CMP r1,#170
          SUBLE r3,r3,#1
          CMP r1,#120
          SUBGE r3,r3,#1
          MOV r4,#2
          MOVS r3,r3
          SUBEQ r4,r4,#1
          MOVS r2,r2
          SUBNE r4,r4,#1
          MOVS r4,r4
          SUBEQ r10,r10,#1
          MOVEQ r0,#1
          STREQ r0,game_type%
          MOVEQ r0,#2048
          STREQ r0,menu_time%
          MOV r3,#4
          CMP r0,#245
          SUBGE r3,r3,#1
          CMP r0,#300
          SUBLE r3,r3,#1
          CMP r1,#100
          SUBLE r3,r3,#1
          CMP r1,#50
          SUBGE r3,r3,#1
          MOV r4,#2
          MOVS r3,r3
          SUBEQ r4,r4,#1
          MOVS r2,r2
          SUBNE r4,r4,#1
          MOVS r4,r4
          SUBEQ r10,r10,#1
          MOVEQ r9,#1
          STR r9,quit%
          LDR r0,menu_time%
          SUB r0,r0,#1
          MOVS r0,r0
          MOVEQ r0,#2048
          SUBEQ r10,r10,#1
          STR r0,menu_time%
          MOVEQ r0,#2
          STREQ r0,game_type%
          MOVS r10,r10
        BGT main_menu_loop

        BL main_menu_outro

        MOV r0,#2048
        STR r0,menu_time%

        .quit_game
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .registered_sync_time% EQUD 0

      .max_frame_rate% EQUD 1

      .max_speed_option% EQUD 1

      .menu_time% EQUD 2048

      .register_frame_compensation
      STMFA (sp)!,{r0-r10,r12,link}
        SWI "OS_ReadMonotonicTime"
        STR r0,registered_sync_time%
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .frame_compensation
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r8,registered_sync_time%
        LDR r2,max_frame_rate%

        .frame_synctime
        MOV r0,#0
        MOV r1,#1
        SWI "OS_ReadMonotonicTime"
        SUB r0,r0,r8
        CMP r0,r2
        BLO frame_synctime

      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .check_speed_option
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r12,max_speed_option%
        MOVS r12,r12
        MOVEQ r1,#0
        CMP r12,#1
        MOVEQ r1,#4
        CMP r12,#2
        MOVEQ r1,#5
        CMP r12,#3
        MOVEQ r1,#6
        STR r1,max_frame_rate%
        MOVS r12,r12
        MOV r2,#100
        MOV r1,#260
        MOV r0,#62
        BLEQ plot_letter_sprite

        MOVS r12,r12
        ADD r1,r1,#20
        MOV r0,#50
        BLEQ plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#73
        MOVS r12,r12
        BLEQ plot_letter_sprite

        MOV r1,#240
        MOV r0,#55
        CMP r12,#1
        BLEQ plot_letter_sprite

        MOV r0,#50
        ADD r1,r1,#20
        CMP r12,#1
        BLEQ plot_letter_sprite

        MOV r0,#68
        ADD r1,r1,#20
        CMP r12,#1
        BLEQ plot_letter_sprite

        MOV r0,#69
        ADD r1,r1,#20
        CMP r12,#1
        BLEQ plot_letter_sprite

        MOV r1,#260
        MOV r0,#62
        CMP r12,#2
        BLEQ plot_letter_sprite

        MOV r0,#54
        ADD r1,r1,#20
        CMP r12,#2
        BLEQ plot_letter_sprite

        MOV r0,#53
        ADD r1,r1,#20
        CMP r12,#2
        BLEQ plot_letter_sprite

        MOV r1,#240
        MOV r0,#68
        CMP r12,#3
        BLEQ plot_letter_sprite

        MOV r0,#61
        ADD r1,r1,#20
        CMP r12,#3
        BLEQ plot_letter_sprite

        MOV r0,#64
        ADD r1,r1,#20
        CMP r12,#3
        BLEQ plot_letter_sprite

        MOV r0,#72
        ADD r1,r1,#20
        CMP r12,#3
        BLEQ plot_letter_sprite

        MOV r5,#3
        MOV r0,#129
        MVN r1,#73
        MOV r2,#255
        SWI "OS_Byte"
        MOV r3,#2
        CMP r1,#255
        SUBEQ r3,r3,#1
        CMP r2,#255
        SUBEQ r3,r3,#1
        MOVS r3,r3
        SUBEQ r5,r5,#1
        CMP r8,#6
        SUBEQ r5,r5,#1
        MOVS r9,r9
        SUBEQ r5,r5,#1
        MOVS r5,r5
        BNE end_check_speed_option
        SUBS r12,r12,#1
        MOVLT r12,#3
        STR r12,max_speed_option%

        .end_check_speed_option
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .plot_and_store_menu_backdrop
      STMFA (sp)!,{r0-r10,r12,link}
        BL screen_swap

        BL clr_scr

        MOV r12,#80
        MOV r1,#0
        MOV r2,#0
        MOV r0,#9

        .plot_menu_backdrop_loop
          BL plot_sprite32

          ADD r1,r1,#1
          CMP r1,#10
          MOVGE r1,#0
          ADDGE r2,r2,#1
          SUBS r12,r12,#1
        BGT plot_menu_backdrop_loop

        BL store_screen

      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .plinth_positions%
      EQUD 15
      EQUD -225
      EQUD -60
      EQUD 130
      EQUD 200
      EQUD 100
      EQUD 19
      EQUD 225
      EQUD -60
      EQUD 130
      EQUD 200
      EQUD 100
      EQUD 18
      EQUD -420
      EQUD 200
      EQUD 130
      EQUD 200
      EQUD 100
      EQUD 17
      EQUD 0
      EQUD 200
      EQUD 130
      EQUD 200
      EQUD 100
      EQUD 16
      EQUD 420
      EQUD 200
      EQUD 130
      EQUD 200
      EQUD 100
      EQUD 20
      EQUD 0
      EQUD -320
      EQUD 130
      EQUD 200
      EQUD 100

      .main_menu_intro
      STMFA (sp)!,{r0-r10,r12,link}
        MOV r0,#21
        MOV r1,#9
        SWI "OS_Byte"
        ADR r12,plinth_positions%
        LDR r9,detail_level_adr%
        LDR r8,[r9]
        STMFA (sp)!,{r8}
          MOVS r8,#0
          STR r8,[r9]
          MOV r9,#50
          MOV r6,#16
          MOV r7,#4
          MOV r8,#2

          .main_menu_intro_loop
            BL register_frame_compensation

            MOV r10,r12
            BL screen_swap

            BL refresh_screen

            LDMIA r10,{r0-r5}
            ADD r3,r3,r6
            SUBS r4,r4,r7
            MOVLT r4,#0
            SUBS r5,r5,r8
            MOVLT r5,#0
            BL display_object

            STMIA r10!,{r0-r5}
            LDMIA r10,{r0-r5}
            ADD r3,r3,r6
            SUBS r4,r4,r7
            MOVLT r4,#0
            SUBS r5,r5,r8
            MOVLT r5,#0
            BL display_object

            STMIA r10!,{r0-r5}
            LDMIA r10,{r0-r3}
            ADD r3,r3,r6
            SUBS r4,r4,r7
            MOVLT r4,#0
            SUBS r5,r5,r8
            MOVLT r5,#0
            BL display_object

            STMIA r10!,{r0-r5}
            LDMIA r10,{r0-r5}
            ADD r3,r3,r6
            SUBS r4,r4,r7
            MOVLT r4,#0
            SUBS r5,r5,r8
            MOVLT r5,#0
            BL display_object

            STMIA r10!,{r0-r5}
            LDMIA r10,{r0-r5}
            ADD r3,r3,r6
            SUBS r4,r4,r7
            MOVLT r4,#0
            SUBS r5,r5,r8
            MOVLT r5,#0
            BL display_object

            STMIA r10!,{r0-r5}
            LDMIA r10,{r0-r5}
            ADD r3,r3,r6
            SUBS r4,r4,r7
            MOVLT r4,#0
            SUBS r5,r5,r8
            MOVLT r5,#0
            BL display_object

            STMIA r10!,{r0-r5}
            BL frame_compensation

            SUBS r9,r9,#1
          BGT main_menu_intro_loop

          BL store_menu_screen

          LDR r9,detail_level_adr%
        LDMFA (sp)!,{r8}
        STR r8,[r9]
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .main_menu_outro
      STMFA (sp)!,{r0-r10,r12,link}
        ADR r12,plinth_positions%
        LDR r9,detail_level_adr%
        LDR r8,[r9]
        STMFA (sp)!,{r8}
          MOVS r8,#0
          STR r8,[r9]
          MOV r9,#50
          MOV r6,#16
          MOV r7,#4
          MOV r8,#2

          .main_menu_outro_loop
            BL register_frame_compensation

            MOV r10,r12
            BL screen_swap

            BL refresh_screen

            LDMIA r10,{r0-r5}
            SUB r3,r3,r6
            ADD r4,r4,r7
            ADD r5,r5,r8
            BL display_object

            STMIA r10!,{r0-r5}
            LDMIA r10,{r0-r5}
            SUB r3,r3,r6
            ADD r4,r4,r7
            ADD r5,r5,r8
            BL display_object

            STMIA r10!,{r0-r5}
            LDMIA r10,{r0-r3}
            SUB r3,r3,r6
            ADD r4,r4,r7
            ADD r5,r5,r8
            BL display_object

            STMIA r10!,{r0-r5}
            LDMIA r10,{r0-r5}
            SUB r3,r3,r6
            ADD r4,r4,r7
            ADD r5,r5,r8
            BL display_object

            STMIA r10!,{r0-r5}
            LDMIA r10,{r0-r5}
            SUB r3,r3,r6
            ADD r4,r4,r7
            ADD r5,r5,r8
            BL display_object

            STMIA r10!,{r0-r5}
            LDMIA r10,{r0-r5}
            SUB r3,r3,r6
            ADD r4,r4,r7
            ADD r5,r5,r8
            BL display_object

            STMIA r10!,{r0-r5}
            BL frame_compensation

            SUBS r9,r9,#1
          BGT main_menu_outro_loop

          LDR r9,detail_level_adr%
        LDMFA (sp)!,{r8}
        STR r8,[r9]
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .craft_ms_stat% EQUD 0

      .crafts_available% EQUD 2

      .craft_characteristics
      EQUD (6<<10)+768
      EQUD (1<<10)
      EQUD 7
      EQUD 80
      EQUD (6<<10)+512
      EQUD (2<<10)
      EQUD 8
      EQUD 120
      EQUD (7<<10)
      EQUD (4<<10)
      EQUD 6
      EQUD 50
      EQUD (6<<10)+896
      EQUD (1<<10)
      EQUD 9
      EQUD 50
      EQUD (10<<10)
      EQUD (6<<10)
      EQUD 12
      EQUD 140

      .choose_craft_screen
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r9,detail_level_adr%
        LDR r8,[r9]
        STMFA (sp)!,{r8}
          MOVS r8,#0
          STR r8,[r9]
          MOV r1,#0
          MOV r2,#40
          MOV r3,#256
          MOV r4,#0
          MOV r5,#0
          MOV r6,#0
          MOV r8,#0

          .choose_craft_loop
            BL screen_swap

            BL refresh_screen

            CMP r6,#1
            MOVEQ r0,#24
            CMP r6,#2
            MOVEQ r0,#25
            CMP r6,#3
            MOVEQ r0,#26
            CMP r6,#4
            MOVEQ r0,#55
            MOVS r6,r6
            MOVEQ r0,#1
            BL display_object

            ADD r4,r4,#4
            MOVS r4,r4
            ADDLT r4,r4,#360
            CMP r4,#360
            SUBGE r4,r4,#360
            ADD r5,r5,#1
            MOVS r5,r5
            ADDLT r5,r5,#360
            CMP r5,#360
            SUBGE r5,r5,#360
            STMFA (sp)!,{r0}
              CMP r6,#4
              MOVEQ r0,#24
              MOVNE r0,r6
              BL plot_small_letters

            LDMFA (sp)!,{r0}
            STMFA (sp)!,{r0-r3}
              MOV r0,#97
              MOV r1,#280
              MOV r2,#215
              BL plot_letter_sprite

              MOV r0,#98
              MOV r1,#20
              MOV r2,#215
              BL plot_letter_sprite

              MOV r0,#96
              MOV r1,#152
              MOV r2,#215
              BL plot_letter_sprite

              MOV r0,#52
              MOV r1,#48
              MOV r2,#8
              BL plot_letter_sprite

              ADD r1,r1,#20
              MOV r0,#57
              BL plot_letter_sprite

              ADD r1,r1,#20
              MOV r0,#64
              BL plot_letter_sprite

              ADD r1,r1,#20
              MOV r0,#64
              BL plot_letter_sprite

              ADD r1,r1,#20
              MOV r0,#68
              BL plot_letter_sprite

              ADD r1,r1,#20
              MOV r0,#54
              BL plot_letter_sprite

              ADD r1,r1,#40
              MOV r0,#68
              BL plot_letter_sprite

              ADD r1,r1,#20
              MOV r0,#57
              BL plot_letter_sprite

              ADD r1,r1,#20
              MOV r0,#58
              BL plot_letter_sprite

              ADD r1,r1,#20
              MOV r0,#65
              BL plot_letter_sprite

              SWI "OS_Mouse"
              MOV r0,r0,ASR#2
              MOV r1,r1,ASR#2
              RSB r1,r1,#256
              MOVS r2,r2
              MOVNE r2,#1
              LDR r8,craft_ms_stat%
              MOV r7,#5
              CMP r0,#20
              SUBGE r7,r7,#1
              CMP r1,#215
              SUBGE r7,r7,#1
              CMP r0,#36
              SUBLE r7,r7,#1
              CMP r1,#231
              SUBLE r7,r7,#1
              CMP r2,r8
              SUBGT r7,r7,#1
              LDR r9,crafts_available%
              MOVS r7,r7
              SUBEQS r6,r6,#1
              MOVLT r6,r9
              MOV r7,#5
              CMP r0,#280
              SUBGE r7,r7,#1
              CMP r1,#215
              SUBGE r7,r7,#1
              CMP r0,#296
              SUBLE r7,r7,#1
              CMP r1,#231
              SUBLE r7,r7,#1
              CMP r2,r8
              SUBGT r7,r7,#1
              MOVS r7,r7
              ADDEQ r6,r6,#1
              LDR r9,crafts_available%
              CMP r6,r9
              MOVGT r6,#0
              MOV r7,#5
              CMP r0,#152
              SUBGE r7,r7,#1
              CMP r1,#215
              SUBGE r7,r7,#1
              CMP r0,#168
              SUBLE r7,r7,#1
              CMP r1,#231
              SUBLE r7,r7,#1
              CMP r2,r8
              SUBGT r7,r7,#1
              STR r2,craft_ms_stat%
            LDMFA (sp)!,{r0-r3}
            BL plot_mouse_ptr

            MOVS r7,r7
          BGT choose_craft_loop

          LDR r12,world_data_header_base%
          ADR r8,craft_characteristics
          ADD r8,r8,r6,ASL#4
          LDR r7,[r12,#8]
          LDR r10,[r12,#4]
          LDR r9,[r10,#4]
          STR r0,[r9,#12]
          LDMIA r8,{r0-r3}
          STR r0,[r7,#64]
          STR r1,[r7,#68]
          STR r2,[r7,#72]
          STR r3,[r7,#100]
          LDR r9,detail_level_adr%
        LDMFA (sp)!,{r8}
        STR r8,[r9]
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .detail_level_adr% EQUD detail_level_status%

      .camera_position_base% EQUD camera_position%

      .world_data_header_base% EQUD world_data_header%

      .position_pre_race_suspension% EQUD 3

      .continues% EQUD 0

      .main_game_code
      STMFA (sp)!,{r0-r10,r12,link}
        MOV r0,#0
        STR r0,race_suspended%
        MOV r6,#4
        MOV r7,#120
        BL req_music_stat

        LDR r0,[r12]
        MOVS r0,r0
        LDRGT r12,world_data_header_base%
        MOVGT r1,#1
        STRGT r1,[r12,#52]

        .pre_race_loop
          BL register_frame_compensation

          BL sort_out_race_screen

          MOV r0,#0
          BL craft_motion_control

          MOV r0,#1
          BL craft_motion_control

          MOV r0,#2
          BL craft_motion_control

          MOV r0,#3
          BL craft_motion_control

          MOV r0,#4
          BL craft_motion_control

          LDR r1,camera_position_base%
          LDR r0,[r1,#44]
          MOVS r0,r0
          BLEQ focus_camera_on_object

          MOVS r0,r0
          BLNE tracking_camera

          BL calculate_world

          BL maintain_all_smoke_streams

          BL calculate_explosions

          BL show_lap_timer

          BL calculate_craft_speed

          BL show_damage_meter

          BL display_craft_position

          BL display_missile_icons

          BL check_sound_keys

          LDR r5,world_data_header_base%
          LDR r3,[r5,#32]
          LDR r4,[r3,#8]
          ADD r4,r4,#1
          STR r4,[r3,#8]
          MOV r5,#3
          MOV r0,#2
          MOV r1,#3
          MOV r2,#15
          MOV r3,#0
          BL play_sample

          CMP r4,#4
          MOVEQ r0,#1
          MOVEQ r1,#4
          MOVEQ r2,#15
          MOVEQ r3,#40
          BLEQ play_sample

          CMP r4,#24
          SUBGT r5,r5,#1
          MOVEQ r0,#1
          MOVEQ r1,#5
          MOVEQ r2,#15
          MOVEQ r3,#40
          ADDEQ r7,r7,#1
          MOVEQ r6,#4
          BLEQ play_sample

          CMP r4,#44
          SUBGT r5,r5,#1
          MOVEQ r0,#1
          MOVEQ r1,#6
          MOVEQ r2,#15
          MOVEQ r3,#40
          ADDEQ r7,r7,#1
          MOVEQ r6,#4
          BLEQ play_sample

          MOV r0,#160
          MOV r1,#128
          MOV r2,r6
          STMFA (sp)!,{r4}
            MOV r4,r7
            BL split_sprite

          LDMFA (sp)!,{r4}
          ADD r6,r6,#8
          BL frame_compensation

          CMP r4,#60
        BLT pre_race_loop

        MOV r6,#4
        MOV r0,#1
        MOV r1,#7
        MOV r2,#15
        MOV r3,#40
        BL play_sample

        BL req_music_stat

        LDR r0,[r12]
        MOVS r0,r0
        LDRGT r12,world_data_header_base%
        MOVGT r1,#0
        STRGT r1,[r12,#52]
        MOV r0,#0
        LDR r12,world_data_header_base%
        LDR r10,[r12,#32]
        STR r0,[r10,#8]
        BL mouse_centre


        .main_race_loop
          BL register_frame_compensation

          BL sort_out_race_screen

          BL update_player_crafts_path_pos

          BL maintain_crafts

          MOV r0,#0
          BL missile_motion_control

          MOV r0,#1
          BL missile_motion_control

          MOV r0,#2
          BL missile_motion_control

          LDR r1,camera_position_base%
          LDR r0,[r1,#44]
          MOVS r0,r0
          BLEQ focus_camera_on_object

          MOVS r0,r0
          BLNE tracking_camera

          BL analyse_craft_positions

          BL calculate_world

          MOV r0,#10
          BL calculate_smoke_stream

          MOV r0,#11
          BL calculate_smoke_stream

          MOV r0,#12
          BL calculate_smoke_stream

          MOV r0,#13
          BL calculate_smoke_stream

          BL calculate_explosions

          BL show_lap_timer

          BL calculate_craft_speed

          BL show_damage_meter

          BL display_craft_position

          BL display_missile_icons

          BL show_lastlap

          BL check_sound_keys

          BL check_auto_repair

          CMP r6,#200
          MOVLT r0,#160
          MOVLT r1,#128
          MOVLT r2,r6
          MOVLT r4,#123
          BLLT split_sprite

          CMP r6,#200
          ADDLT r6,r6,#8
          BL plot_zoom_sprite

          MOV r0,#129
          MVN r1,#55
          MOV r2,#255
          SWI "OS_Byte"
          MOV r3,#2
          CMP r1,#255
          SUBEQ r3,r3,#1
          CMP r2,#255
          SUBEQ r3,r3,#1
          MOVS r3,r3
          MOVNE r3,#1
          LDR r4,pbut%
          CMP r3,r4
          BLLT pause_game

          STR r3,pbut%
          BL frame_compensation

          LDR r5,world_data_header_base%
          LDR r3,[r5,#32]
          LDR r0,[r3,#8]
          ADD r0,r0,#1
          CMP r0,#33
          BLEQ start_music

          STR r0,[r3,#8]
          MOV r5,#1
          LDR r0,world_data_header_base%
          LDR r10,[r0,#8]
          LDR r4,[r10,#104]
          CMP r4,#3
          SUBEQ r5,r5,#1
          MOVEQ r7,#1
          STREQ r7,race_suspended%
          LDR r8,[r0,#32]
          LDR r9,[r10,#80]
          LDR r7,[r8,#4]
          CMP r9,r7
          SUBGT r5,r5,#1
          MOV r0,#129
          MVN r1,#16
          MOV r2,#255
          SWI "OS_Byte"
          MOV r3,#2
          CMP r1,#255
          SUBEQ r3,r3,#1
          CMP r2,#255
          SUBEQ r3,r3,#1
          MOVS r3,r3
          SUBEQ r5,r5,#1
          MOVEQ r7,#1
          STREQ r7,race_suspended%
          MOVS r5,r5
        BGT main_race_loop

        LDR r0,camera_position_base%
        MOV r1,#896
        RSB r1,r1,#0
        MOV r2,#182
        STR r1,[r0,#40]
        STR r2,[r0,#28]
        LDR r0,world_data_header_base%
        LDR r2,[r0,#8]
        MOV r1,#0
        STR r1,[r2,#104]
        LDR r1,world_data_header_base%
        LDR r10,[r1,#8]
        LDR r8,[r1,#32]
        MOV r0,#0
        STR r0,[r8,#8]
        MOV r6,#8

        .post_race_loop
          BL register_frame_compensation

          BL sort_out_race_screen

          BL maintain_crafts

          MOV r0,#0
          BL missile_motion_control

          MOV r0,#1
          BL missile_motion_control

          MOV r0,#2
          BL missile_motion_control

          LDR r1,camera_position_base%
          LDR r0,[r1,#44]
          MOVS r0,r0
          BLEQ focus_camera_on_object

          MOVS r0,r0
          BLNE tracking_camera

          BL analyse_craft_positions

          BL calculate_world

          MOV r0,#10
          BL calculate_smoke_stream

          MOV r0,#11
          BL calculate_smoke_stream

          MOV r0,#12
          BL calculate_smoke_stream

          MOV r0,#13
          BL calculate_smoke_stream

          BL calculate_explosions

          BL show_lastlap

          MOV r0,#67
          MOV r1,#70
          MOV r2,#200
          BL plot_letter_sprite

          ADD r1,r1,#20
          MOV r0,#50
          BL plot_letter_sprite

          ADD r1,r1,#20
          MOV r0,#52
          BL plot_letter_sprite

          ADD r1,r1,#20
          MOV r0,#54
          BL plot_letter_sprite

          ADD r1,r1,#44
          MOV r0,#64
          BL plot_letter_sprite

          ADD r1,r1,#20
          MOV r0,#71
          BL plot_letter_sprite

          ADD r1,r1,#20
          MOV r0,#54
          BL plot_letter_sprite

          ADD r1,r1,#20
          MOV r0,#67
          BL plot_letter_sprite

          MOV r5,#1
          LDR r2,world_data_header_base%
          LDR r10,[r2,#8]
          LDR r8,[r2,#32]
          LDR r0,[r8,#8]
          ADD r0,r0,#1
          LDR r2,camera_position_base%
          MOV r1,#1
          LDR r3,race_suspended%
          MOVS r3,r3
          BNE post_lp_race_was_suspended
          STMFA (sp)!,{r0-r4}
            LDR r4,[r10,#116]
            ADD r4,r4,#159
            MOV r2,r6
            MOV r0,#160
            MOV r1,#128
            BL scaled_sprite

          LDMFA (sp)!,{r0-r4}
          ADD r6,r6,#2

          .post_lp_race_was_suspended
          BL fade_out_music

          CMP r0,#20
          STRGT r1,[r2,#44]
          CMP r0,#35
          STMGTFA (sp)!,{r0,r1}
          MOVGT r1,r0
          SUBGT r0,r0,#36
          BLGT screen_fade

          CMP r1,#35
          LDMGTFA (sp)!,{r0,r1}
          CMP r0,#50
          SUBGT r5,r5,#1
          STR r0,[r8,#8]
          BL frame_compensation

          MOV r0,#129
          MVN r1,#98
          MOV r2,#255
          SWI "OS_Byte"
          MOV r3,#2
          CMP r1,#255
          SUBEQ r3,r3,#1
          CMP r2,#255
          SUBEQ r3,r3,#1
          MOVS r3,r3
          SUBEQ r5,r5,#1
          MOVS r5,r5
        BGT post_race_loop

        BL flush_kb

        BL mouse_centre

        BL stop_music

      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .race_suspended% EQUD 0

      .pbut% EQUD 0

      .detail_level_adr% EQUD detail_level_status%

      .camera_position_base% EQUD camera_position%

      .world_data_header_base% EQUD world_data_header%

      .sort_out_race_screen
      STMFA (sp)!,{r0-r10,r12,link}
        BL screen_swap

        BL check_view_keys

        LDR r1,detail_level_adr%
        LDR r0,[r1]
        MOVS r0,r0
        BLEQ plot_ground

        MOVS r0,r0
        BLEQ plot_sky

        MOVS r0,r0
        BEQ finish_sorting_out_race_screen
        CMP r0,#4
        BLEQ plot_ground

        CMP r0,#4
        BLEQ plot_sky

        CMP r0,#4
        BEQ finish_sorting_out_race_screen
        MOV r1,#2
        MOVS r0,r0,LSR#1
        SUBCS r1,r1,#1
        MOVS r0,r0,LSR#1
        SUBCS r1,r1,#1
        MOVS r1,r1
        BLEQ plot_ground_ilace

        MOVS r1,r1
        BLEQ plot_sky_ilace

        MOVS r1,r1
        BLNE plot_ground_ilace

        MOVS r1,r1
        BLNE plot_sky


        .finish_sorting_out_race_screen
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .pkey_state% EQUD 0

      .sksks% EQUD 1

      .pause_game
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r12,world_data_header_base%
        LDR r10,[r12,#52]
        STR r10,sksks%
        MOV r10,#0
        STR r10,[r12,#52]

        .pause_game_lp
        BL register_frame_compensation

        BL sort_out_race_screen

        BL calculate_world

        BL frame_compensation

        BL show_lap_timer

        BL calculate_craft_speed

        BL show_damage_meter

        BL display_craft_position

        BL display_missile_icons

        BL check_sound_keys

        BL show_lastlap

        BL print_pause

        LDR r1,pkey_state%
        BL scan_key_p

        CMP r0,r1
        STR r0,pkey_state%
        BLE pause_game_lp

        LDR r10,sksks%
        STR r10,[r12,#52]
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .print_pause
      STMFA (sp)!,{r0-r10,r12,link}
        MOV r2,#128
        MOV r1,#100
        MOV r0,#25
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#10
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#30
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#28
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#14
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#13
        BL plot_letter_sprite

      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .scan_key_p
      STMFA (sp)!,{r1-r10,r12,link}
        MOV r0,#129
        MVN r1,#55
        MOV r2,#255
        SWI "OS_Byte"
        MOV r3,#2
        CMP r1,#255
        SUBEQ r3,r3,#1
        CMP r2,#255
        SUBEQ r3,r3,#1
        MOVS r3,r3
        MOVEQ r0,#1
        MOVNE r0,#0
      LDMFA (sp)!,{r1-r10,r12,link}
      MOV PC,link

      .detail_level_adr% EQUD detail_level_status%

      .camera_position_base% EQUD camera_position%

      .world_data_header_base% EQUD world_data_header%

      .options_menu
      STMFA (sp)!,{r0-r10,r12,link}

        .options_menu_loop
          BL screen_swap

          BL refresh_screen

          ADR r12,options_menu_data
          LDR r10,[r12],#4
          LDR r4,[r12]
          LDR r5,[r12,#4]
          ADD r5,r5,#1
          CMP r5,#6
          MOVGT r5,#0
          STR r5,[r12,#4]
          MOVS r5,r5
          BNE options_menu_skip_key_test
          MOV r0,#129
          MVN r1,#41
          MOV r2,#255
          SWI "OS_Byte"
          MOV r3,#2
          CMP r1,#255
          SUBEQ r3,r3,#1
          CMP r2,#255
          SUBEQ r3,r3,#1
          MOVS r3,r3
          SUBEQ r4,r4,#1
          MOV r0,#129
          MVN r1,#57
          MOV r2,#255
          SWI "OS_Byte"
          MOV r3,#2
          CMP r1,#255
          SUBEQ r3,r3,#1
          CMP r2,#255
          SUBEQ r3,r3,#1
          MOVS r3,r3
          ADDEQ r4,r4,#1
          CMP r4,#1
          MOVLT r4,#7
          CMP r4,#7
          MOVGT r4,#1

          .options_menu_skip_key_test
          STR r4,[r12],#8
          MOV r7,#100

          .options_plot_items_loop
            LDR r9,[r12],#4
            LDR r8,[r12],#4
            LDR r2,[r12],#4
            LDR r1,[r12],#4

            .options_plot_letters_loop
              LDR r3,[r12],#4
              CMP r4,r10
              ADDNE r0,r3,r8
              ADDEQ r0,r3,r7
              MOVS r3,r3
              BLGE plot_letter_sprite

              MOVS r3,r3
              ADDGE r1,r1,#20
              ADDLT r1,r1,#12
              SUBS r9,r9,#1
            BGT options_plot_letters_loop

            SUBS r10,r10,#1
          BGT options_plot_items_loop

          ADR r12,options_menu_data
          LDR r8,[r12,#4]
          LDR r9,[r12,#8]
          BL check_speed_option

          ADR r12,options_menu_data
          LDR r10,[r12,#4]
          MOV r5,#3
          CMP r10,#7
          SUBEQ r5,r5,#1
          MOV r0,#129
          MVN r1,#73
          MOV r2,#255
          SWI "OS_Byte"
          MOV r3,#2
          CMP r1,#255
          SUBEQ r3,r3,#1
          CMP r2,#255
          SUBEQ r3,r3,#1
          MOVS r3,r3
          SUBEQ r5,r5,#1
          ADR r12,options_menu_data
          LDR r10,[r12,#8]
          MOVS r10,r10
          SUBEQ r5,r5,#1
          MOVS r5,r5
          LDR r12,world_data_header_base%
          LDR r10,[r12,#32]
          LDR r12,[r10]
          BNE skip_control_option
          SUB r12,r12,#1
          MOVS r12,r12
          MOVLT r12,#2
          STR r12,[r10]

          .skip_control_option
          MOV r0,#91
          ADD r0,r0,r12
          MOV r1,#280
          MOV r2,#80
          BL plot_letter_sprite

          ADR r12,options_menu_data
          BL check_view_distance_option

          BL check_object_detail_option

          BL check_track_detail_option

          BL check_sound_option

          LDR r10,[r12,#4]
          MOV r5,#2
          CMP r10,#1
          SUBEQ r5,r5,#1
          MOV r0,#129
          MVN r1,#73
          MOV r2,#255
          SWI "OS_Byte"
          MOV r3,#2
          CMP r1,#255
          SUBEQ r3,r3,#1
          CMP r2,#255
          SUBEQ r3,r3,#1
          MOVS r3,r3
          SUBEQ r5,r5,#1
          MOVS r5,r5
        BGT options_menu_loop

      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .options_menu_data
      EQUD 8
      EQUD 7
      EQUD 0
      EQUD 7
      EQUD 40
      EQUD 8
      EQUD 90
      EQUD 24
      EQUD 25
      EQUD 29
      EQUD 18
      EQUD 24
      EQUD 23
      EQUD 28
      EQUD 7
      EQUD 40
      EQUD 80
      EQUD 4
      EQUD 12
      EQUD 24
      EQUD 23
      EQUD 29
      EQUD 27
      EQUD 24
      EQUD 21
      EQUD 5
      EQUD 40
      EQUD 100
      EQUD 4
      EQUD 28
      EQUD 25
      EQUD 14
      EQUD 14
      EQUD 13
      EQUD 12
      EQUD 40
      EQUD 120
      EQUD 4
      EQUD 29
      EQUD 27
      EQUD 10
      EQUD 12
      EQUD 20
      EQUD -1
      EQUD 13
      EQUD 14
      EQUD 29
      EQUD 10
      EQUD 18
      EQUD 21
      EQUD 13
      EQUD 40
      EQUD 140
      EQUD 4
      EQUD 24
      EQUD 11
      EQUD 19
      EQUD 14
      EQUD 12
      EQUD 29
      EQUD -1
      EQUD 13
      EQUD 14
      EQUD 29
      EQUD 10
      EQUD 18
      EQUD 21
      EQUD 5
      EQUD 40
      EQUD 160
      EQUD 4
      EQUD 28
      EQUD 24
      EQUD 30
      EQUD 23
      EQUD 13
      EQUD 13
      EQUD 40
      EQUD 180
      EQUD 4
      EQUD 31
      EQUD 18
      EQUD 14
      EQUD 32
      EQUD -1
      EQUD 13
      EQUD 18
      EQUD 28
      EQUD 29
      EQUD 10
      EQUD 23
      EQUD 12
      EQUD 14
      EQUD 9
      EQUD 40
      EQUD 200
      EQUD 4
      EQUD 22
      EQUD 10
      EQUD 18
      EQUD 23
      EQUD -1
      EQUD 22
      EQUD 14
      EQUD 23
      EQUD 30

      .detail_level_adr% EQUD detail_level_status%

      .camera_position_base% EQUD camera_position%

      .world_data_header_base% EQUD world_data_header%

      .starting_grid
      EQUD (-150<<10)
      EQUD (-55<<10)
      EQUD (-1300<<10)
      EQUD (150<<10)
      EQUD (-55<<10)
      EQUD (-1600<<10)
      EQUD (-150<<10)
      EQUD (-55<<10)
      EQUD (-1900<<10)
      EQUD (150<<10)
      EQUD (-55<<10)
      EQUD (-2200<<10)
      EQUD (-150<<10)
      EQUD (-55<<10)
      EQUD (-2500<<10)

      .reset_race
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r10,world_data_header_base%
        LDR r12,[r10,#8]
        LDR r6,[r10,#32]
        MOV r0,#0
        STR r0,[r6,#8]
        LDR r6,[r10,#16]
        LDR r5,[r10,#20]
        ADD r6,r6,#16

        .reset_race_boundaries_loop
          STR r0,[r6],#24
          SUBS r5,r5,#1
        BGT reset_race_boundaries_loop

        LDR r6,[r10,#28]
        ADD r6,r6,#8
        MOV r5,#6

        .reset_race_checkzone_loop
          STR r0,[r6],#16
          SUBS r5,r5,#1
        BGT reset_race_checkzone_loop

        ADR r9,starting_grid
        ADD r10,r12,#(128*4)
        MOV r8,#4
        LDR r7,camera_position_base%

        .reset_grid_positions_loop
          LDMIA r9!,{r0-r2}
          STMIA r10,{r0-r2}
          MOV r0,#0
          STR r0,[r10,#12]
          STR r0,[r10,#16]
          STR r0,[r10,#20]
          STR r0,[r10,#24]
          STR r0,[r10,#28]
          STR r0,[r10,#32]
          STR r0,[r10,#36]
          STR r0,[r10,#40]
          MOV r1,#92
          STR r1,[r10,#44]
          STR r0,[r10,#48]
          STR r0,[r10,#56]
          STR r0,[r10,#60]
          MOV r1,#1
          STR r1,[r10,#76]
          STR r1,[r10,#80]
          STR r0,[r10,#84]
          STR r0,[r10,#88]
          STR r0,[r10,#92]
          STR r0,[r10,#96]
          MOVS r8,r8
          MOV r1,#1
          STRNE r0,[r10,#104]
          STREQ r1,[r10,#104]
          MOV r0,#3
          STR r0,[r10,#120]
          MOV r0,#8128
          STR r0,[r10,#124]
          SUB r10,r10,#128
          SUBS r8,r8,#1
        BGE reset_grid_positions_loop

        MOV r0,#0
        MOV r1,#0
        MOV r2,#0
        MOV r3,#0
        ADD r6,r7,#16
        STMIA r6,{r0-r3}
        MOV r0,#220
        RSB r0,r0,#0
        STR r0,[r7,#4]
        MOV r0,#700
        RSB r0,r0,#0
        STR r0,[r7,#32]
        MOV r0,#178
        STR r0,[r7,#36]
        MOV r0,#340
        RSB r0,r0,#0
        STR r0,[r7,#40]
        MOV r0,#0
        STR r0,[r7,#44]
        MOV r0,#140
        RSB r0,r0,#0
        STR r0,[r7,#48]
        LDR r10,world_data_header_base%
        LDR r12,[r10,#36]
        LDR r10,[r12],#4

        .reset_effects_tiles_loop
          LDR r0,[r12]
          MOVS r0,r0
          RSBLT r0,r0,#0
          STRLT r0,[r12]
          ADD r12,r12,#12
          SUBS r10,r10,#1
        BGT reset_effects_tiles_loop

        LDR r12,world_data_header_base%
        LDR r10,[r12,#4]
        LDR r9,[r12,#32]
        LDR r12,[r10,#4]
        ADD r12,r12,#32
        ADD r9,r9,#12
        MOV r8,#4

        .correct_ship_types_loop
          LDR r0,[r9,#12]
          STR r0,[r12,#12]
          ADD r9,r9,#16
          ADD r12,r12,#32
          SUBS r8,r8,#1
        BGT correct_ship_types_loop

        BL clear_zoom_sprite

      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .plot_small_letters
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r10,world_data_header_base%
        LDR r12,[r10,#56]
        MOV r1,r0,ASL#8
        MOV r2,r0,ASL#3
        MOV r3,r0,ASL#2
        ADD r1,r1,r2
        ADD r1,r1,r3
        ADD r12,r12,r1
        LDR r1,[r12]
        LDR r2,[r12,#4]
        LDR r10,[r12,#8]
        ADD r12,r12,#12

        .plot_small_letters_loop
          LDRB r0,[r12],#1
          CMP r0,#254
          ADDEQ r2,r2,#12
          MOVEQ r1,#8
          RSBEQ r1,r1,#0
          CMP r0,#254
          ADDLT r0,r0,#140
          BLLT plot_letter_sprite

          ADD r1,r1,#8
          CMP r1,#304
          MOVGE r1,#0
          ADDGE r2,r2,#12
          SUBS r10,r10,#1
        BGT plot_small_letters_loop

      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .param_block%
      EQUB 3
      EQUW 640
      EQUW 512

      .mouse_centre
      STMFA (sp)!,{r0-r10,r12,link}
        MOV r0,#21
        ADR r1,param_block%
        SWI "OS_Word"
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .flush_kb
      STMFA (sp)!,{r0-r10,r12,link}
        MOV r0,#21
        MOV r1,#0
        SWI "OS_Byte"
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .plot_level_text
      STMFA (sp)!,{r0-r10,r12,link}
        MOV r1,#80
        MOV r2,#223
        MOV r3,r0
        MOV r0,#21
        BL plot_letter_sprite

        MOV r0,#14
        ADD r1,r1,#20
        BL plot_letter_sprite

        MOV r0,#31
        ADD r1,r1,#20
        BL plot_letter_sprite

        MOV r0,#14
        ADD r1,r1,#20
        BL plot_letter_sprite

        MOV r0,#21
        ADD r1,r1,#20
        BL plot_letter_sprite

        ADD r0,r3,#1
        ADD r1,r1,#40
        BL plot_letter_sprite

      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .plot_sel_trk
      STMFA (sp)!,{r0-r3,link}
        MOV r1,#44
        MOV r2,#20
        MOV r0,#28
        BL plot_letter_sprite

        MOV r0,#14
        ADD r1,r1,#20
        BL plot_letter_sprite

        MOV r0,#21
        ADD r1,r1,#20
        BL plot_letter_sprite

        MOV r0,#14
        ADD r1,r1,#20
        BL plot_letter_sprite

        MOV r0,#12
        ADD r1,r1,#20
        BL plot_letter_sprite

        MOV r0,#29
        ADD r1,r1,#20
        BL plot_letter_sprite

        ADD r1,r1,#32
        MOV r0,#29
        BL plot_letter_sprite

        MOV r0,#27
        ADD r1,r1,#20
        BL plot_letter_sprite

        MOV r0,#10
        ADD r1,r1,#20
        BL plot_letter_sprite

        MOV r0,#12
        ADD r1,r1,#20
        BL plot_letter_sprite

        MOV r0,#20
        ADD r1,r1,#20
        BL plot_letter_sprite

      LDMFA (sp)!,{r0-r3,link}
      MOV PC,link

      .plot_sorry_try_again
      STMFA (sp)!,{r0-r10,r12,link}
        MOV r2,#232
        MOV r1,#20
        MOV r0,#68
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#64
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#67
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#67
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#74
        BL plot_letter_sprite

        ADD r1,r1,#32
        MOV r0,#69
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#67
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#74
        BL plot_letter_sprite

        ADD r1,r1,#32
        MOV r0,#50
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#56
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#50
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#58
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#63
        BL plot_letter_sprite

      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .plot_next_track
      STMFA (sp)!,{r0-r10,r12,link}
        MOV r2,#232
        MOV r1,#60
        MOV r0,#63
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#54
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#73
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#69
        BL plot_letter_sprite

        ADD r1,r1,#32
        MOV r0,#69
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#67
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#50
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#52
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#60
        BL plot_letter_sprite

      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .congrats_new_lap_record
      STMFA (sp)!,{r1-r10,r12,link}
        MOV r0,#21
        MOV r1,#9
        SWI "OS_Byte"
        MOV r12,#400

        .congats_nlrec_loop
          BL screen_swap

          BL refresh_screen

          MOV r1,#12
          MOV r2,#68
          MOV r0,#12
          BL plot_letter_sprite

          ADD r1,r1,#20
          MOV r0,#24
          BL plot_letter_sprite

          ADD r1,r1,#20
          MOV r0,#23
          BL plot_letter_sprite

          ADD r1,r1,#20
          MOV r0,#16
          BL plot_letter_sprite

          ADD r1,r1,#20
          MOV r0,#27
          BL plot_letter_sprite

          ADD r1,r1,#20
          MOV r0,#10
          BL plot_letter_sprite

          ADD r1,r1,#20
          MOV r0,#29
          BL plot_letter_sprite

          ADD r1,r1,#20
          MOV r0,#30
          BL plot_letter_sprite

          ADD r1,r1,#20
          MOV r0,#21
          BL plot_letter_sprite

          ADD r1,r1,#20
          MOV r0,#10
          BL plot_letter_sprite

          ADD r1,r1,#20
          MOV r0,#29
          BL plot_letter_sprite

          ADD r1,r1,#20
          MOV r0,#18
          BL plot_letter_sprite

          ADD r1,r1,#20
          MOV r0,#24
          BL plot_letter_sprite

          ADD r1,r1,#20
          MOV r0,#23
          BL plot_letter_sprite

          ADD r1,r1,#20
          MOV r0,#28
          BL plot_letter_sprite

          ADD r1,r1,#20
          ADD r2,r2,#40
          MOV r1,#20
          MOV r0,#23
          BL plot_letter_sprite

          ADD r1,r1,#20
          MOV r0,#14
          BL plot_letter_sprite

          ADD r1,r1,#20
          MOV r0,#32
          BL plot_letter_sprite

          ADD r1,r1,#40
          MOV r0,#21
          BL plot_letter_sprite

          ADD r1,r1,#20
          MOV r0,#10
          BL plot_letter_sprite

          ADD r1,r1,#20
          MOV r0,#25
          BL plot_letter_sprite

          ADD r1,r1,#40
          MOV r0,#27
          BL plot_letter_sprite

          ADD r1,r1,#20
          MOV r0,#14
          BL plot_letter_sprite

          ADD r1,r1,#20
          MOV r0,#12
          BL plot_letter_sprite

          ADD r1,r1,#20
          MOV r0,#24
          BL plot_letter_sprite

          ADD r1,r1,#20
          MOV r0,#27
          BL plot_letter_sprite

          ADD r1,r1,#20
          MOV r0,#13
          BL plot_letter_sprite

          ADD r1,r1,#20
          LDR r10,world_data_header_base%
          LDR r0,[r10,#72]
          MOV r1,#180
          ADD r2,r2,#40
          BL plot_4dig_time

          SWI "OS_Mouse"
          CMP r12,#200
          MOVGT r2,#0
          MOVS r2,r2
          MOVNE r12,#0
          SUBS r12,r12,#1
        BGT congats_nlrec_loop

        MOV r0,#21
        MOV r1,#9
        SWI "OS_Byte"
      LDMFA (sp)!,{r1-r10,r12,link}
      MOV PC,link

      .score_table
      EQUD 0
      EQUD 80
      EQUD 0
      EQUD 60
      EQUD 0
      EQUD 55
      EQUD 0
      EQUD 40
      EQUD 0
      EQUD 35
      EQUD 0
      EQUD 30
      EQUD 0
      EQUD 25
      EQUD 0
      EQUD 20

      .print_high_scores
      STMFA (sp)!,{r0-r10,r12,link}
        MOV r1,#52
        MOV r2,#4
        MOV r0,#57
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#58
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#56
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#57
        BL plot_letter_sprite

        ADD r1,r1,#36
        MOV r0,#68
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#52
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#64
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#67
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#54
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#68
        BL plot_letter_sprite

      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .print_enter_name
      STMFA (sp)!,{r0-r10,r12,link}
        MOV r1,#16
        MOV r2,#28
        MOV r0,#54
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#63
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#69
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#54
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#67
        BL plot_letter_sprite

        ADD r1,r1,#36
        MOV r0,#74
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#64
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#70
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#67
        BL plot_letter_sprite

        ADD r1,r1,#36
        MOV r0,#63
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#50
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#62
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#54
        BL plot_letter_sprite

      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .print_game_over
      STMFA (sp)!,{r0-r10,r12,link}
        MOV r1,#72
        MOV r2,#200
        MOV r0,#56
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#50
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#62
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#54
        BL plot_letter_sprite

        ADD r1,r1,#36
        MOV r0,#64
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#71
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#54
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#67
        BL plot_letter_sprite

      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .repair_time% EQUD 0

      .check_auto_repair
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r12,world_data_header_base%
        LDR r10,[r12,#4]
        LDR r9,[r10,#4]
        LDR r0,[r9,#12]
        CMP r0,#26
        BNE end_check_auto_repair
        LDR r10,[r12,#8]
        LDR r1,[r10,#96]
        LDR r0,repair_time%
        SUBS r0,r0,#1
        MOVLT r0,#40
        STR r0,repair_time%
        SUBLTS r1,r1,#1
        MOVLT r1,#0
        STR r1,[r10,#96]

        .end_check_auto_repair
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .print_final_track
      STMFA (sp)!,{r0-r10,r12,link}
        MOV r1,#8
        MOV r2,#100
        MOV r0,#34
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#24
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#30
        BL plot_letter_sprite

        ADD r1,r1,#36
        MOV r0,#17
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#10
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#31
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#14
        BL plot_letter_sprite

        ADD r1,r1,#36
        MOV r0,#27
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#14
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#10
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#12
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#17
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#14
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#13
        BL plot_letter_sprite

        MOV r1,#16
        MOV r2,#124
        MOV r0,#29
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#17
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#14
        BL plot_letter_sprite

        ADD r1,r1,#36
        MOV r0,#15
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#18
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#23
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#10
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#21
        BL plot_letter_sprite

        ADD r1,r1,#36
        MOV r0,#29
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#27
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#10
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#12
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#20
        BL plot_letter_sprite

        MOV r1,#4
        MOV r2,#230
        MOV r0,#25
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#27
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#14
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#25
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#10
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#27
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#14
        BL plot_letter_sprite

        ADD r1,r1,#36
        MOV r0,#34
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#24
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#30
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#27
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#28
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#14
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#21
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#15
        BL plot_letter_sprite

      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .print_congrats_drifter_complete
      STMFA (sp)!,{r0-r10,r12,link}
        MOV r1,#8
        MOV r2,#80
        MOV r0,#12
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#24
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#23
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#16
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#27
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#10
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#29
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#30
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#21
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#10
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#29
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#18
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#24
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#23
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#28
        BL plot_letter_sprite

        MOV r1,#80
        MOV r2,#104
        MOV r0,#34
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#24
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#30
        BL plot_letter_sprite

        ADD r1,r1,#36
        MOV r0,#17
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#10
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#31
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#14
        BL plot_letter_sprite

        MOV r1,#68
        MOV r2,#128
        MOV r0,#12
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#24
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#22
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#25
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#21
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#14
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#29
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#14
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#13
        BL plot_letter_sprite

        MOV r1,#88
        MOV r2,#152
        MOV r0,#13
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#27
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#18
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#15
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#29
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#14
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#27
        BL plot_letter_sprite

      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .print_access_secret_craft
      STMFA (sp)!,{r0-r10,r12,link}
        MOV r1,#32
        MOV r2,#56
        MOV r0,#29
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#24
        BL plot_letter_sprite

        ADD r1,r1,#36
        MOV r0,#10
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#12
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#12
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#14
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#28
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#28
        BL plot_letter_sprite

        ADD r1,r1,#36
        MOV r0,#29
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#17
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#14
        BL plot_letter_sprite

        MOV r1,#40
        MOV r2,#80
        MOV r0,#28
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#14
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#12
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#27
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#14
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#29
        BL plot_letter_sprite

        ADD r1,r1,#36
        MOV r0,#12
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#27
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#10
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#15
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#29
        BL plot_letter_sprite

        MOV r1,#32
        MOV r2,#144
        MOV r0,#29
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#34
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#25
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#14
        BL plot_letter_sprite

        ADD r1,r1,#36
        MOV r0,#17
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#34
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#25
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#14
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#27
        BL plot_letter_sprite

        ADD r1,r1,#36
        MOV r0,#18
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#23
        BL plot_letter_sprite

        MOV r1,#52
        MOV r2,#168
        MOV r0,#29
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#17
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#14
        BL plot_letter_sprite

        ADD r1,r1,#36
        MOV r0,#24
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#25
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#14
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#23
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#18
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#23
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#16
        BL plot_letter_sprite

        MOV r1,#80
        MOV r2,#192
        MOV r0,#28
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#14
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#26
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#30
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#14
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#23
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#12
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#14
        BL plot_letter_sprite

      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .print_future_releases
      STMFA (sp)!,{r0-r10,r12,link}
        MOV r1,#44
        MOV r2,#80
        MOV r0,#21
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#24
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#24
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#20
        BL plot_letter_sprite

        ADD r1,r1,#36
        MOV r0,#24
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#30
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#29
        BL plot_letter_sprite

        ADD r1,r1,#36
        MOV r0,#15
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#24
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#27
        BL plot_letter_sprite

        MOV r1,#12
        MOV r2,#104
        MOV r0,#15
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#30
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#29
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#30
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#27
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#14
        BL plot_letter_sprite

        ADD r1,r1,#36
        MOV r0,#27
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#14
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#21
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#14
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#10
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#28
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#14
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#28
        BL plot_letter_sprite

        MOV r1,#80
        MOV r2,#128
        MOV r0,#15
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#27
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#24
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#22
        BL plot_letter_sprite

        ADD r1,r1,#36
        MOV r0,#29
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#17
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#14
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r1,#4
        MOV r2,#152
        MOV r0,#15
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#24
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#30
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#27
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#29
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#17
        BL plot_letter_sprite

        ADD r1,r1,#36
        MOV r0,#13
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#18
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#22
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#14
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#23
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#28
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#18
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#24
        BL plot_letter_sprite

        ADD r1,r1,#20
        MOV r0,#23
        BL plot_letter_sprite

      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link
    ]

  NEXT pass%


ENDPROC


DEF PROCassemble_smoke_routines

  LOCAL adr%,pass%,link,sp
  link=14
  sp=11
  adr%=P%

  FOR pass%=8 TO10 STEP2
    P%=adr%
    L%=code% +len%

    [OPT pass%

      .swm_rdiv_list_base% EQUD swm_rdiv_list%

      .sine_table_base% EQUD sine_table%

      .cosine_table_base% EQUD cosine_table%

      .tangent_table_base% EQUD tangent_table%

      .arc_tangent_table_base% EQUD arc_tangent_table%

      .camera_position_base% EQUD camera_position%

      .world_data_header_base% EQUD world_data_header%

      .detail_level_adr% EQUD detail_level_status%

      .stasis_sound_vol% EQUD 0

      .request_ssvol_base
      ADR r12,stasis_sound_vol%
      MOV PC,link

      .play_sample
      STMFA (sp)!,{r0-r10,r12,link}
        ;LDR r12,world_data_header_base%
        LDR r10,[r12,#52]
        MOVS r10,r10
        BEQ end_play_sample
        MOVS R5,R3,LSR#1
        MOVEQ R5,#24
        LDR R4,stasis_sound_vol%
        SUBS R3,R2,R4
        MOVLT R3,#0
        MVN R0,#0
        ADD R1,R1,#32
        MOV R2,R5
        MOV R3,R3,LSL #2
        MOV R4,#0
        MOV R5,#255
        SWI "QTM_PlaySample"

        .end_play_sample
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .smoke_colour_list_base% EQUD smoke_colour_list%

      .smoke_colour_list%
      EQUB 44
      EQUB 45
      EQUB 45
      EQUB 46
      EQUB 47
      EQUB 208
      EQUB 209
      EQUB 210
      EQUB 211
      EQUB 252
      EQUB 252
      EQUB 252
      EQUB 253
      EQUB 253
      EQUB 254
      EQUB 255

      .dust_colour_list%
      EQUB 247
      EQUB 246
      EQUB 245
      EQUB 244
      EQUB 91
      EQUB 90
      EQUB 89
      EQUB 88
      EQUB 88
      EQUB 39
      EQUB 38
      EQUB 38
      EQUB 37
      EQUB 37
      EQUB 36
      EQUB 36

      .smoke_or_dust% EQUD 0

      .calculate_smoke_stream
      STMFA (sp)!,{r0-r10,r12,link}
        CMP r0,#10
        MOVGE r1,#1
        MOVLT r1,#0
        STR r1,smoke_or_dust%
        LDR r10,world_data_header_base%
        LDR r12,[r10,#40]
        ADD r12,r12,#64
        MOV r1,r0,ASL#8
        ADD r12,r12,r1
        LDR r10,camera_position_base%
        LDR r1,[r10,#12]
        LDR r0,cosine_table_base%
        LDR r7,[r0,r1,ASL#2]
        LDR r0,sine_table_base%
        LDR r8,[r0,r1,ASL#2]
        MOV r9,#16

        .calculate_single_smoke_element_loop
          LDR r4,[r12,#12]
          SUBS r4,r4,#1
          MOVLT r4,#0
          STRGE r4,[r12,#12]
          BLE ignore_current_smoke_element

          LDMIA r10,{r3-r5}
          LDMIA r12,{r0-r2}
          SUB r0,r0,r3
          SUB r1,r1,r4
          SUB r2,r2,r5
          MUL r3,r0,r7
          MUL r4,r2,r8
          SUB r5,r3,r4
          MUL r3,r2,r7
          MUL r4,r0,r8
          ADD r3,r3,r4
          MOV r0,r5,ASR#8
          MOV r2,r3,ASR#8
          MOV r3,#2
          CMP r2,#128
          SUBGE r3,r3,#1
          MOV r5,#250
          MOV r5,r5,ASL#4
          CMP r2,r5
          SUBLE r3,r3,#1
          MOVS r3,r3
          BGT ignore_current_smoke_element
          MOV r0,r0,ASL#8
          MOV r1,r1,ASL#8
          FNswm_rdiv_act(0,2,4)
          FNswm_rdiv_act(1,2,5)
          SUB r0,r2,#128
          MOV r0,r0,ASR#3
          ADD r1,r4,#160
          ADD r2,r5,#128
          LDR r4,[r12,#4]
          SUB r4,r4,#4
          STR r4,[r12,#4]
          LDR r5,smoke_colour_list_base%
          LDR r3,smoke_or_dust%
          MOVS r3,r3
          ADDNE r5,r5,#16
          LDR r4,[r12,#12]
          SUB r4,r4,#1
          CMP r4,#15
          MOVGT r4,#15
          LDRB r3,[r5,r4]
          BL plot_smoke


          .ignore_current_smoke_element
          ADD r12,r12,#16
          SUBS r9,r9,#1
        BGT calculate_single_smoke_element_loop

      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .calculate_explosions
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r10,world_data_header_base%
        LDR r6,[r10,#60]
        LDR r12,[r10,#64]
        ADD r12,r12,#4
        LDR r10,camera_position_base%
        LDR r1,[r10,#12]
        LDR r0,cosine_table_base%
        LDR r7,[r0,r1,ASL#2]
        LDR r0,sine_table_base%
        LDR r8,[r0,r1,ASL#2]
        MOV r9,#16

        .rotate_project_explosion_elements
        LDMIA r12,{r0-r3}
        SUB r3,r3,#1
        MOVS r3,r3
        MOVLE r3,#0
        STR r3,[r12,#12]
        BLE forget_current_explosion

        LDMIA r10,{r3-r5}
        SUB r0,r0,r3
        SUB r1,r1,r4
        SUB r2,r2,r5
        MUL r3,r0,r7
        MUL r4,r2,r8
        SUB r3,r3,r4
        MUL r4,r2,r7
        MUL r5,r0,r8
        ADD r4,r4,r5
        MOV r0,r3,ASR#8
        MOV r2,r4,ASR#8
        CMP r2,#50
        BLE forget_current_explosion

        CMP r2,#4032
        BGE forget_current_explosion
        MOV r0,r0,ASL#8
        MOV r1,r1,ASL#8
        FNswm_rdiv_act(0,2,4)
        FNswm_rdiv_act(1,2,5)
        ADD r0,r4,#160
        ADD r1,r5,#128
        LDR r5,[r6,r2,ASL#2]
        MOV r2,r5
        MOV r4,#157
        LDR r3,[r12,#12]
        SUB r4,r4,r3
        MOV r3,#0
        SUB r5,r0,r2,ASR#1
        MOVS r5,r5
        SUBLE r3,r3,#1
        ADD r5,r5,r2
        CMP r5,#320
        SUBGE r3,r3,#1
        SUB r5,r1,r2,ASR#1
        MOVS r5,r5
        SUBLE r3,r3,#1
        ADD r5,r5,r2
        CMP r5,#255
        SUBGE r3,r3,#1
        MOVS r3,r3
        BLEQ scaled_sprite


        .forget_current_explosion
        ADD r12,r12,#16
        SUBS r9,r9,#1
        BGT rotate_project_explosion_elements
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .generate_mini_explosion
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r10,world_data_header_base%
        LDR r12,[r10,#64]
        LDR r3,[r12]
        ADD r4,r3,#1
        CMP r4,#15
        MOVGT r4,#0
        STR r4,[r12]
        ADD r12,r12,#4
        ADD r12,r12,r3,ASL#4
        STMIA r12!,{r0-r2}
        MOV r3,#15
        STR r3,[r12],#4
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .generate_smoke
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r10,world_data_header_base%
        LDR r12,[r10,#40]
        LDR r9,[r12,r0,ASL#2]
        ADD r8,r9,#1
        CMP r8,#15
        MOVGT r8,#0
        STR r8,[r12,r0,ASL#2]
        ADD r12,r12,#64
        MOV r10,r0,ASL#8
        ADD r12,r12,r10
        ADD r12,r12,r9,ASL#4
        STMIA r12,{r1-r3}
        BL random_number

        MOV r4,#14
        ADD r4,r4,r0,ASR#2
        STR r4,[r12,#12]
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .generate_crafts_exhaust_smoke
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r12,world_data_header_base%
        LDR r9,[r12,#8]
        LDR r10,[r12,#4]
        LDR r12,[r10,#4]
        ADD r10,r12,r0,ASL#5
        ADD r9,r9,r0,ASL#7
        LDR r5,[r9,#32]
        MOVS r5,r5
        BEQ end_generate_crafts_exhaust_smoke
        LDR r2,[r10,#20]
        LDR r1,cosine_table_base%
        LDR r7,[r1,r2,ASL#2]
        LDR r1,sine_table_base%
        LDR r8,[r1,r2,ASL#2]
        MOV r3,r0,ASL#1
        BL random_number

        SUB r1,r0,#8
        MOV r2,#30
        RSB r2,r2,#0
        MOV r0,r3
        MUL r4,r1,r7
        MUL r5,r2,r8
        SUB r4,r4,r5
        MUL r5,r2,r7
        MUL r6,r1,r8
        ADD r5,r5,r6
        MOV r4,r4,ASR#8
        MOV r5,r5,ASR#8
        LDMIA r10,{r1-r3}
        ADD r1,r1,r4
        ADD r3,r3,r5
        BL generate_smoke

        ADD r3,r0,#1
        BL random_number

        SUB r1,r0,#8
        MOV r2,#56
        RSB r2,r2,#0
        MUL r4,r1,r7
        MUL r5,r2,r8
        SUB r4,r4,r5
        MUL r5,r2,r7
        MUL r6,r1,r8
        ADD r5,r5,r6
        MOV r4,r4,ASR#8
        MOV r5,r5,ASR#8
        MOV r0,r3
        LDMIA r10,{r1-r3}
        ADD r1,r1,r4
        ADD r3,r3,r5
        BL generate_smoke


        .end_generate_crafts_exhaust_smoke
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .maintain_all_smoke_streams
      STMFA (sp)!,{r0-r10,r12,link}
        MOV r0,#15

        .maintain_all_smoke_streams_loop
          BL calculate_smoke_stream

          SUBS r0,r0,#1
        BGE maintain_all_smoke_streams_loop

      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .generate_dust
      STMFA (sp)!,{r0-r10,r12,link}
        MOV r12,#16
        MOV r5,r0
        MOV r6,r1
        MOV r7,r2

        .generate_dust_loop
          BL random_number

          MOV r4,r0,ASL#2
          ADD r1,r5,r4
          BL random_number

          MOV r4,r0
          ADD r2,r6,r4
          BL random_number

          MOV r4,r0,ASL#2
          ADD r3,r7,r4
          MOV r0,#13
          BL generate_smoke

          SUBS r12,r12,#1
        BGT generate_dust_loop

      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .generate_big_explosion
      STMFA (sp)!,{r0-r10,r12,link}
        MOV r12,#16
        MOV r5,r0
        MOV r6,r1
        MOV r7,r2
        MOV r4,r0

        .generate_big_explosion_loop
          BL random_number

          MOV r0,r0,ASL#3
          MOV r9,#16<<3
          MOV r9,r9,ASR#1
          SUB r0,r0,r9
          ADD r4,r5,r0
          BL random_number

          MOV r0,r0,ASL#3
          MOV r9,#16<<3
          MOV r9,r9,ASR#1
          SUB r0,r0,r9
          ADD r2,r7,r0
          MOV r0,r4
          BL generate_mini_explosion

          SUBS r12,r12,#1
        BGT generate_big_explosion_loop

      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .random_number_seed% EQUD 1234

      .random_number
      STMFA (sp)!,{r1-r10,r12,link}
        LDR r0,random_number_seed%
        CMP r0,#0
        MOVEQ r0,#255
        MOV r2,#17

        .random_number_loop
          MOV r1,r0,ASR#13
          EORr1,r1,r0,ASR#24
          MOVS r1,r1,ROR#1
          ADCS r0,r0,r0
          SUBS r2,r2,#1
        BNE random_number_loop

        STR r0,random_number_seed%
        ANDr0,r0,#&FF
        ADD r0,r0,r0,LSL#4
        MOV r0,r0,LSR#8
      LDMFA (sp)!,{r1-r10,r12,link}
      MOV PC,link
    ]

  NEXT pass%


ENDPROC


DEF PROCassemble_movement_and_collision_handlers

  LOCAL adr%,pass%,link,sp
  link=14
  sp=11
  adr%=P%

  FOR pass%=8 TO10 STEP2
    P%=adr%
    L%=code% +len%

    [OPT pass%

      .polygon_workspace_base% EQUD polygon_workspace%

      .swm_rdiv_list_base% EQUD swm_rdiv_list%

      .sine_table_base% EQUD sine_table%

      .cosine_table_base% EQUD cosine_table%

      .tangent_table_base% EQUD tangent_table%

      .arc_tangent_table_base% EQUD arc_tangent_table%

      .camera_position_base% EQUD camera_position%

      .object_header_list_base% EQUD object_header_list%

      .world_data_header_base% EQUD world_data_header%

      .detail_level_adr% EQUD detail_level_status%

      .maintain_crafts
      STMFA (sp)!,{r0-r10,r12,link}
        MOV r0,#4
        LDR r12,world_data_header_base%
        LDR r10,[r12,#8]
        BL check_craft_collisions

        BL check_craft_and_static_object_collisions

        BL check_all_crafts_with_checkzones

        BL check_all_crafts_with_missiles


        .maintain_crafts_loop
          ADD r9,r10,r0,ASL#7
          LDR r5,[r9,#104]
          MOVS r5,r5
          BLEQ point_craft_in_direction_of_coords

          MOVS r5,r5
          BLEQ craft_artificial_inteligence

          MOVS r5,r5
          BLEQ check_craft_with_all_effects_tiles

          MOVS r5,r5
          BLEQ check_craft_with_all_boundaries

          MOVS r5,r5
          BLEQ craft_motion_control

          CMP r5,#1
          BLEQ check_player_craft_control_input

          CMP r5,#1
          BLEQ check_craft_with_all_effects_tiles

          CMP r5,#1
          BLEQ check_craft_with_all_boundaries

          CMP r5,#1
          BLEQ craft_motion_control

          MOVS r0,r0
          MOVEQ r3,#1
          MOVNE r3,#0
          LDR r2,[r9,#96]
          LDR r4,[r9,#100]
          CMP r2,r4
          MOVGE r3,#3
          CMP r5,#2
          BNE craft_in_control
          LDR r2,[r9,#108]
          SUBS r2,r2,#1
          MOVEQ r2,#0
          STREQ r3,[r9,#104]
          STR r2,[r9,#108]
          BL check_craft_with_all_boundaries

          BL craft_motion_control


          .craft_in_control
          CMP r5,#3
          BLEQ check_craft_with_all_boundaries

          CMP r5,#3
          BLEQ dead_craft_motion_control

          BL generate_crafts_exhaust_smoke

          SUBS r0,r0,#1
        BGE maintain_crafts_loop

        MOV r0,#129
        MVN r1,#98
        MOV r2,#255
        SWI "OS_Byte"
        MOV r3,#2
        CMP r1,#255
        SUBEQ r3,r3,#1
        CMP r2,#255
        SUBEQ r3,r3,#1
        MOVS r3,r3
        BNE end_maintain_crafts
        MOV r0,#0
        LDR r2,[r10,#120]
        MOVS r2,r2
        BLGT fire_missile


        .end_maintain_crafts
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .point_craft_in_direction_of_coords
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r12,world_data_header_base%
        LDR r8,[r12,#8]
        ADD r8,r8,r0,ASL#7
        LDR r10,[r12,#4]
        LDR r9,[r12,#24]
        ADD r9,r9,#4
        LDR r12,[r10,#4]
        LDR r1,[r8,#60]
        ADD r9,r9,r1,ASL#3
        LDR r2,[r9]
        LDR r3,[r9,#4]
        ADD r12,r12,r0,ASL#5
        LDR r0,[r12]
        LDR r1,[r12,#8]
        MOV r10,#0
        SUBS r2,r2,r0
        ORRGE r10,r10,#1
        RSBLT r2,r2,#0
        SUBS r3,r3,r1
        ORRGE r10,r10,#2
        RSBLT r3,r3,#0
        LDR r6,[r8,#60]
        MOV r7,#2
        CMP r2,#460
        SUBLT r7,r7,#1
        CMP r3,#460
        SUBLT r7,r7,#1
        MOVS r7,r7
        ADDEQ r6,r6,#1
        LDR r12,world_data_header_base%
        LDR r1,[r12,#24]
        LDR r7,[r1]
        CMP r6,r7
        MOVGE r6,#0
        STR r6,[r8,#60]
        MOVS r2,r2
        MOVEQ r5,#90
        BEQ point_craft_in_direction_of_coords_ignore_tangent_value
        MOVS r3,r3
        MOVEQ r5,#0
        BEQ point_craft_in_direction_of_coords_ignore_tangent_value
        MOV r3,r3,ASL#6
        FNswm_rdiv_act(3,2,4)
        CMP r4,#3648
        MOVGT r5,#90
        BGT point_craft_in_direction_of_coords_ignore_tangent_value
        MOVS r4,r4
        MOVLT r5,#90
        BLT point_craft_in_direction_of_coords_ignore_tangent_value

        LDR r9,arc_tangent_table_base%
        LDR r5,[r9,r4,ASL#2]

        .point_craft_in_direction_of_coords_ignore_tangent_value
        RSB r5,r5,#90
        CMP r10,#1
        RSBEQ r5,r5,#180
        CMP r10,#0
        ADDEQ r5,r5,#181
        CMP r10,#2
        RSBEQ r5,r5,#360
        MOVS r5,r5
        ADDLT r5,r5,#360
        CMP r5,#360
        SUBGE r5,r5,#360
        RSB r5,r5,#360
        SUB r5,r5,#1
        STR r5,[r8,#48]

        .end_point_craft_in_direction_of_coords
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .point_missile_in_direction_of_craft
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r12,world_data_header_base%
        LDR r8,[r12,#8]
        LDR r7,[r12,#44]
        SUB r1,r0,#5
        ADD r7,r7,r1,ASL#6
        LDR r10,[r12,#4]
        LDR r9,[r12,#24]
        LDR r4,[r9],#4
        LDR r12,[r10,#4]
        LDR r1,[r7,#60]
        ADD r9,r9,r1,ASL#3
        LDR r2,[r9]
        LDR r3,[r9,#4]
        ADD r12,r12,r0,ASL#5
        LDR r0,[r12]
        LDR r1,[r12,#8]
        MOV r10,#0
        SUBS r2,r2,r0
        ORRGE r10,r10,#1
        RSBLT r2,r2,#0
        SUBS r3,r3,r1
        ORRGE r10,r10,#2
        RSBLT r3,r3,#0
        MOV r0,#2
        CMP r2,#460
        SUBLT r0,r0,#1
        CMP r3,#460
        SUBLT r0,r0,#1
        MOVS r0,r0
        LDR r0,[r7,#60]
        ADDEQ r0,r0,#1
        CMP r0,r4
        MOVGE r0,#0
        STR r0,[r7,#60]
        MOVS r2,r2
        MOVEQ r5,#90
        BEQ point_missile_in_direction_of_coords_ignore_tangent_value
        MOVS r3,r3
        MOVEQ r5,#0
        BEQ point_missile_in_direction_of_coords_ignore_tangent_value
        MOV r3,r3,ASL#6
        FNswm_rdiv_act(3,2,4)
        CMP r4,#3648
        MOVGT r5,#90
        BGT point_missile_in_direction_of_coords_ignore_tangent_value
        MOVS r4,r4
        MOVLT r5,#90
        BLT point_missile_in_direction_of_coords_ignore_tangent_value

        LDR r9,arc_tangent_table_base%
        LDR r5,[r9,r4,ASL#2]

        .point_missile_in_direction_of_coords_ignore_tangent_value
        RSB r5,r5,#90
        CMP r10,#1
        RSBEQ r5,r5,#180
        CMP r10,#0
        ADDEQ r5,r5,#181
        CMP r10,#2
        RSBEQ r5,r5,#360
        MOVS r5,r5
        ADDLT r5,r5,#360
        CMP r5,#360
        SUBGE r5,r5,#360
        RSB r5,r5,#360
        SUB r5,r5,#1
        STR r5,[r7,#44]

        .end_point_missile_in_direction_of_coords
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .update_player_crafts_path_pos
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r12,world_data_header_base%
        LDR r8,[r12,#8]
        LDR r9,[r12,#24]
        LDR r1,[r8,#60]
        ADD r9,r9,#4
        ADD r9,r9,r1,ASL#3
        LDR r2,[r9]
        LDR r3,[r9,#4]
        LDR r0,[r8]
        LDR r1,[r8,#8]
        MOV r0,r0,ASR#10
        MOV r1,r1,ASR#10
        SUBS r2,r2,r0
        RSBLT r2,r2,#0
        SUBS r3,r3,r1
        RSBLT r3,r3,#0
        MOV r4,#2
        CMP r2,#2048
        SUBLT r4,r4,#1
        CMP r3,#2048
        SUBLT r4,r4,#1
        MOVS r4,r4
        BNE dont_inc_ppnt_no
        LDR r6,[r8,#60]
        ADD r6,r6,#1
        LDR r1,[r12,#24]
        LDR r7,[r1]
        CMP r6,r7
        MOVGE r6,#0
        STR r6,[r8,#60]

        .dont_inc_ppnt_no
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .camera_position_base% EQUD camera_position%

      .object_header_list_base% EQUD object_header_list%

      .world_data_header_base% EQUD world_data_header%

      .detail_level_adr% EQUD detail_level_status%

      .craft_artificial_inteligence
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r12,world_data_header_base%
        LDR r10,[r12,#8]
        ADD r10,r10,r0,ASL#7
        LDR r0,[r10,#36]
        LDR r1,[r10,#48]
        MOV r9,#0
        SUBS r0,r0,r1
        MOVEQ r1,#0
        STREQ r1,[r10,#40]
        LDREQ r3,[r10,#64]
        STREQ r3,[r10,#32]
        BEQ end_craft_artificial_inteligence
        ORRGT r9,r9,#1
        MOVS r0,r0
        RSBLT r0,r0,#0
        CMP r0,#180
        ORRGT r9,r9,#2
        TST r9,#2
        RSBNE r0,r0,#360
        SUBNE r0,r0,#1
        MOV r2,r0,ASR#1
        LDR r4,[r10,#72]
        CMP r2,r4
        MOVGT r2,r4
        MOVS r2,r2
        MOVEQ r2,#1
        MOV r4,#0
        CMP r2,#3
        LDRGT r4,[r10,#68]
        CMP r9,#0
        RSBEQ r2,r2,#0
        RSBEQ r4,r4,#0
        CMP r9,#3
        RSBEQ r2,r2,#0
        RSBEQ r4,r4,#0
        STR r4,[r10,#24]
        STR r2,[r10,#40]

        .end_craft_artificial_inteligence
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .polygon_workspace_base% EQUD polygon_workspace%

      .swm_rdiv_list_base% EQUD swm_rdiv_list%

      .sine_table_base% EQUD sine_table%

      .cosine_table_base% EQUD cosine_table%

      .tangent_table_base% EQUD tangent_table%

      .arc_tangent_table_base% EQUD arc_tangent_table%

      .camera_position_base% EQUD camera_position%

      .object_header_list_base% EQUD object_header_list%

      .world_data_header_base% EQUD world_data_header%

      .detail_level_adr% EQUD detail_level_status%

      .craft_motion_control
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r12,world_data_header_base%
        LDR r10,[r12,#8]
        ADD r10,r10,r0,ASL#7
        LDR r9,[r12,#4]
        LDR r12,[r9,#4]
        ADD r12,r12,r0,ASL#5
        LDR r3,[r10,#12]
        LDR r4,[r10,#20]
        LDMIA r10,{r0-r2}
        ADD r0,r0,r3
        ADD r2,r2,r4
        STMIA r10,{r0-r2}
        MOV r0,r0,ASR#10
        MOV r1,r1,ASR#10
        MOV r2,r2,ASR#10
        STMIA r12,{r0-r2}
        LDR r9,[r12,#20]
        MOVS r9,r9
        ADDLT r9,r9,#360
        CMP r9,#360
        SUBGE r9,r9,#360
        LDR r8,cosine_table_base%
        LDR r5,[r8,r9,ASL#2]
        LDR r8,sine_table_base%
        LDR r6,[r8,r9,ASL#2]
        LDR r3,[r10,#24]
        LDR r4,[r10,#32]
        MUL r7,r3,r5
        MUL r8,r4,r6
        SUB r0,r7,r8
        MOV r0,r0,ASR#8
        MUL r7,r4,r5
        MUL r8,r3,r6
        ADD r1,r7,r8
        MOV r1,r1,ASR#8
        LDR r3,[r10,#12]
        LDR r4,[r10,#20]
        ADD r3,r3,r0
        ADD r4,r4,r1
        STR r3,[r10,#12]
        STR r4,[r10,#20]
        LDR r3,[r10,#12]
        LDR r4,[r10,#20]
        LDR r8,[r10,#52]
        MUL r5,r8,r3
        MUL r6,r8,r4
        SUB r3,r3,r5,ASR#8
        SUB r4,r4,r6,ASR#8
        STR r3,[r10,#12]
        STR r4,[r10,#20]
        LDR r1,[r10,#36]
        LDR r2,[r10,#40]
        SUB r1,r1,r2
        MOVS r1,r1
        ADDLT r1,r1,#360
        CMP r1,#360
        SUBGE r1,r1,#360
        STR r1,[r10,#36]
        STR r1,[r12,#20]
        LDR r1,[r10,#44]
        LDR r2,[r10,#40]
        MOV r2,r2,ASL#3
        ADD r3,r2,#92
        BIC r3,r3,#3
        CMP r1,r3
        ADDLT r1,r1,#4
        SUBGT r1,r1,#4
        CMP r1,#48
        MOVLT r1,#48
        CMP r1,#140
        MOVGT r1,#140
        STR r1,[r10,#44]
        SUBS r1,r1,#92
        ADDLT r1,r1,#360
        CMP r1,#360
        SUBLE r1,r1,#360
        STR r1,[r12,#24]
        LDR r0,[r10,#96]
        LDR r1,[r10,#100]
        CMP r0,r1
        MOVGE r2,#3
        STRGE r2,[r10,#104]
        MOVGE r2,#40<<10
        STRGE r2,[r10,#16]
        BLT end_craft_motion_control

        MOV r2,#20
        STR r2,[r10,#40]
        MOV r0,#1
        MOV r1,#0
        MOV r2,#15
        MOV r3,#0
        BL play_sample

        LDMIA r10,{r0-r2}
        MOV r0,r0,ASR#10
        MOV r1,r1,ASR#10
        MOV r2,r2,ASR#10
        BL generate_big_explosion


        .end_craft_motion_control
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .check_craft_collisions
      STMFA (sp)!,{r0-r10,r12,link}
        MOV r0,#0
        MOV r10,#4

        .check_craft_collisions_subject_loop
          MOV r1,r0
          ADD r1,r1,#1

          .check_craft_collisions_colliding_loop
            BL check_collision_between_crafts

            ADD r1,r1,#1
            CMP r1,#5
          BLT check_craft_collisions_colliding_loop

          ADD r0,r0,#1
          SUBS r10,r10,#1
        BGT check_craft_collisions_subject_loop

      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .check_collision_between_crafts
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r12,world_data_header_base%
        LDR r10,[r12,#4]
        LDR r12,[r10,#4]
        ADD r9,r12,r0,ASL#5
        ADD r10,r12,r1,ASL#5
        LDR r2,[r9]
        LDR r3,[r9,#8]
        LDR r4,[r10]
        LDR r5,[r10,#8]
        MOV r8,#0
        SUBS r4,r4,r2
        ORRGE r8,r8,#1
        SUBS r5,r5,r3
        ORRGE r8,r8,#2
        MUL r2,r4,r4
        MUL r3,r5,r5
        ADD r2,r2,r3
        MOV r4,#55
        MUL r3,r4,r4
        ADD r3,r3,r3
        LDR r12,world_data_header_base%
        LDR r10,[r12,#8]
        ADD r10,r10,r0,ASL#7
        LDR r9,[r12,#8]
        ADD r9,r9,r1,ASL#7
        LDR r4,[r10,#56]
        MOV r5,#1
        MOV r5,r5,ASL r1
        CMP r3,r2
        ORRGE r6,r4,r5
        BICLT r6,r4,r5
        STR r6,[r10,#56]
        BLT end_check_collision_between_crafts

        TST r4,r5
        BNE end_check_collision_between_crafts
        STMFA (sp)!,{r0}
          LDR r0,[r10,#12]
          LDR r1,[r10,#20]
          LDR r2,[r9,#12]
          LDR r3,[r9,#20]
          MOV r7,#0
          MOVS r0,r0
          ORRGE r7,r7,#1
          MOVS r1,r1
          ORRGE r7,r7,#2
          ANDr5,r7,#1
          ANDr6,r8,#1
          CMP r5,r6
          SUBEQ r4,r0,r2
          SUBEQ r5,r0,r4,ASL#1
          ADDNE r5,r0,r2
          STR r5,[r10,#12]
          ANDr5,r7,#2
          ANDr6,r8,#2
          CMP r5,r6
          SUBEQ r4,r1,r3
          SUBEQ r5,r1,r4,ASL#1
          ADDNE r5,r1,r3
          STR r5,[r10,#20]
          LDR r5,[r10,#96]
          ADD r5,r5,#8
          STR r5,[r10,#96]
          LDR r5,[r10,#104]
          CMP r5,#3
          BEQ cmc_first_craft_is_dead
          MOV r5,#1
          STR r5,[r10,#108]
          MOV r5,#2
          STR r5,[r10,#104]
          MOV r5,#0
          STR r5,[r10,#24]
          STR r5,[r10,#32]
          STMFA (sp)!,{r0-r2}
            LDR r0,[r10]
            LDR r1,[r10,#4]
            LDR r2,[r10,#8]
            MOV r0,r0,ASR#10
            MOV r1,r1,ASR#10
            MOV r2,r2,ASR#10
            BL generate_dust

            BL generate_mini_explosion

          LDMFA (sp)!,{r0-r2}

          .cmc_first_craft_is_dead
          MOV r7,#0
          MOVS r2,r2
          ORRGE r7,r7,#1
          MOVS r3,r3
          ORRGE r7,r7,#2
          ANDr5,r7,#1
          ANDr6,r8,#1
          CMP r5,r6
          SUBEQ r4,r2,r0
          SUBEQ r5,r2,r4,ASL#1
          ADDNE r5,r2,r0
          STR r5,[r9,#12]
          ANDr5,r7,#2
          ANDr6,r8,#2
          CMP r5,r6
          SUBEQ r4,r3,r1
          SUBEQ r5,r3,r4,ASL#1
          ADDNE r5,r3,r1
          STR r5,[r9,#20]
          LDR r5,[r9,#96]
          ADD r5,r5,#8
          STR r5,[r9,#96]
          LDR r5,[r10,#104]
          CMP r5,#3
          BEQ cmc_second_craft_is_dead
          MOV r5,#10
          STR r5,[r9,#108]
          MOV r5,#2
          STR r5,[r9,#104]

          .cmc_second_craft_is_dead
          STR r5,[r9,#24]
          STR r5,[r9,#32]
        LDMFA (sp)!,{r0}
        MOVS r0,r0
        BNE end_check_collision_between_crafts
        MOV r0,#4
        MOV r1,#10
        MOV r2,#15
        MOV r3,#20
        BL play_sample


        .end_check_collision_between_crafts
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .check_craft_and_static_object_collisions
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r12,world_data_header_base%
        LDR r10,[r12,#4]
        MOV r0,#4

        .check_craft_colloop
        MOV r1,#8
        LDR r9,[r10]
        SUB r9,r9,r1

        .check_static_object_colloop
        BL check_collision_between_craft_and_static_object

        ADD r1,r1,#1
        SUBS r9,r9,#1
        BGT check_static_object_colloop
        SUBS r0,r0,#1
        BGE check_craft_colloop
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .check_collision_between_craft_and_static_object
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r12,world_data_header_base%
        LDR r10,[r12,#4]
        LDR r12,[r10,#4]
        ADD r9,r12,r0,ASL#5
        ADD r10,r12,r1,ASL#5
        LDR r8,[r10,#16]
        MOVS r8,r8
        BLE end_check_collision_between_craft_and_static_object

        MOV r4,#55
        MUL r5,r4,r4
        MUL r6,r8,r8
        ADD r8,r5,r6
        LDR r4,[r9]
        LDR r1,[r9,#8]
        LDR r2,[r10]
        LDR r3,[r10,#8]
        MOV r6,#0
        SUBS r2,r2,r4
        ORRGE r6,r6,#1
        SUBS r3,r3,r1
        ORRGE r6,r6,#2
        MUL r4,r2,r2
        MUL r1,r3,r3
        ADD r4,r4,r1
        CMP r4,r8
        BGE end_check_collision_between_craft_and_static_object
        STMFA (sp)!,{r0}
          LDR r12,world_data_header_base%
          LDR r10,[r12,#8]
          ADD r10,r10,r0,ASL#7
          STMFA (sp)!,{r0-r2}
            LDR r0,[r10]
            LDR r1,[r10,#4]
            LDR r2,[r10,#8]
            MOV r0,r0,ASR#10
            MOV r1,r1,ASR#10
            MOV r2,r2,ASR#10
            BL generate_dust

            BL generate_big_explosion

          LDMFA (sp)!,{r0-r2}
          LDR r0,[r10,#12]
          LDR r1,[r10,#20]
          MOV r7,#0
          MOVS r0,r0
          ORRGE r7,r7,#1
          MOVS r1,r1
          ORRGE r7,r7,#2
          ANDr2,r6,#1
          ANDr3,r7,#1
          CMP r2,r3
          RSBEQ r0,r0,#0
          ANDr2,r6,#2
          ANDr3,r7,#2
          CMP r2,r3
          RSBEQ r1,r1,#0
          STR r0,[r10,#12]
          STR r1,[r10,#20]
          MOV r0,#0
          STR r0,[r10,#24]
          STR r0,[r10,#32]
          LDR r0,[r10,#96]
          ADD r0,r0,#8
          STR r0,[r10,#96]
        LDMFA (sp)!,{r0}
        MOVS r0,r0
        BNE end_check_collision_between_craft_and_static_object
        MOV r0,#4
        MOV r1,#10
        MOV r2,#15
        MOV r3,#20
        BL play_sample


        .end_check_collision_between_craft_and_static_object
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .check_craft_with_all_boundaries
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r12,world_data_header_base%
        MOV r9,#4

        .chch_bound_pass
        LDR r12,world_data_header_base%
        LDR r1,[r12,#20]
        SUB r1,r1,#1

        .check_craft_and_boundary_bndlp
        BL craft_boundary_collision_check

        LDR r10,[r12,#8]
        ADD r10,r10,r0,ASL#7
        LDR r2,xob_displ%
        MOVS r2,r2
        LDRNE r3,[r10,#12]
        RSBNE r3,r3,#0
        STRNE r3,[r10,#12]
        LDRNE r3,xbnd_cood%
        ADDNE r3,r3,r2
        STRNE r3,[r10]
        LDR r2,zob_displ%
        MOVS r2,r2
        LDRNE r3,[r10,#20]
        RSBNE r3,r3,#0
        STRNE r3,[r10,#20]
        LDRNE r3,zbnd_cood%
        ADDNE r3,r3,r2
        STRNE r3,[r10,#8]
        SUBS r1,r1,#1
        BGE check_craft_and_boundary_bndlp
        SUBS r9,r9,#1
        BGT chch_bound_pass
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .bnd_crno% EQUD 0

      .craft_boundary_collision_check
      STMFA (sp)!,{r0-r10,r12,link}
        MOV r9,#0
        STR r9,xob_displ%
        STR r9,zob_displ%
        STR r0,bnd_crno%
        LDR r9,world_data_header_base%
        LDR r12,[r9,#8]
        LDR r10,[r9,#16]
        MOV r2,r1,ASL#4
        MOV r3,r1,ASL#3
        ADD r2,r2,r3
        ADD r10,r10,r2
        ADD r12,r12,r0,ASL#7
        LDR r0,[r10]
        MOVS r0,r0
        BLEQ x_bound

        MOVS r0,r0
        BLNE z_bound


        .end_craft_boundary_collision_check
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .xob_displ% EQUD 0

      .zob_displ% EQUD 0

      .xbnd_cood% EQUD 0

      .zbnd_cood% EQUD 0

      .x_bound
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r0,[r12]
        LDR r1,[r12,#8]
        LDR r4,[r12,#12]
        LDR r5,[r12,#20]
        ADD r2,r0,r4
        ADD r3,r1,r5
        LDR r4,[r10,#4]
        MOV r4,r4,ASL#10
        SUB r5,r0,r4
        SUB r6,r2,r4
        MOVS r5,r5
        MOVGT r5,#1
        MOVLE r5,#0
        MOVS r6,r6
        MOVGT r6,#1
        MOVLE r6,#0
        MOV r9,r5
        CMP r5,r6
        BEQ end_x_bound
        MOV r0,r0,ASR#6
        MOV r1,r1,ASR#6
        MOV r2,r2,ASR#6
        MOV r3,r3,ASR#6
        MOV r4,r4,ASR#6
        BL calc_line_intersection

        LDR r5,[r10,#8]
        LDR r6,[r10,#12]
        MOV r5,r5,ASL#4
        MOV r6,r6,ASL#4
        MOV r7,#2
        CMP r0,r5
        SUBGE r7,r7,#1
        CMP r0,r6
        SUBLE r7,r7,#1
        MOVS r7,r7
        BNE end_x_bound
        LDR r1,[r10,#4]
        MOV r1,r1,ASL#10
        STR r1,xbnd_cood%
        MOVS r9,r9
        MOVNE r1,#(32<<10)
        MOVEQ r1,#(32<<10)
        RSBEQ r1,r1,#0
        STR r1,xob_displ%
        LDR r4,[r12,#96]
        LDR r0,bnd_crno%
        MOVS r0,r0
        ADDEQ r4,r4,#4
        ADDNE r4,r4,#1
        STR r4,[r12,#96]
        STMFA (sp)!,{r0-r2}
          LDR r0,[r12]
          LDR r1,[r12,#4]
          LDR r2,[r12,#8]
          MOV r0,r0,ASR#10
          MOV r1,r1,ASR#10
          MOV r2,r2,ASR#10
          BL generate_dust

          BL generate_mini_explosion

        LDMFA (sp)!,{r0-r2}
        LDR r0,bnd_crno%
        MOVS r0,r0
        BNE end_x_bound
        MOV r0,#4
        MOV r1,#10
        MOV r2,#15
        MOV r3,#20
        BL play_sample


        .end_x_bound
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .z_bound
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r0,[r12]
        LDR r1,[r12,#8]
        LDR r4,[r12,#12]
        LDR r5,[r12,#20]
        ADD r2,r0,r4
        ADD r3,r1,r5
        LDR r4,[r10,#4]
        MOV r4,r4,ASL#10
        SUB r5,r1,r4
        SUB r6,r3,r4
        MOVS r5,r5
        MOVGT r5,#1
        MOVLE r5,#0
        MOVS r6,r6
        MOVGT r6,#1
        MOVLE r6,#0
        MOV r9,r5
        CMP r5,r6
        BEQ end_z_bound
        MOV r4,r4,ASR#6
        MOV r5,r0
        MOV r0,r1,ASR#6
        MOV r1,r5,ASR#6
        MOV r5,r2
        MOV r2,r3,ASR#6
        MOV r3,r5,ASR#6
        BL calc_line_intersection

        LDR r5,[r10,#8]
        LDR r6,[r10,#12]
        MOV r5,r5,ASL#4
        MOV r6,r6,ASL#4
        MOV r7,#2
        CMP r0,r5
        SUBGE r7,r7,#1
        CMP r0,r6
        SUBLE r7,r7,#1
        MOVS r7,r7
        BNE end_z_bound
        LDR r1,[r10,#4]
        MOV r1,r1,ASL#10
        STR r1,zbnd_cood%
        MOVS r9,r9
        MOVNE r1,#(32<<10)
        MOVEQ r1,#(32<<10)
        RSBEQ r1,r1,#0
        STR r1,zob_displ%
        LDR r4,[r12,#96]
        LDR r0,bnd_crno%
        MOVS r0,r0
        ADDEQ r4,r4,#4
        ADDNE r4,r4,#1
        STR r4,[r12,#96]
        STMFA (sp)!,{r0-r2}
          LDR r0,[r12]
          LDR r1,[r12,#4]
          LDR r2,[r12,#8]
          MOV r0,r0,ASR#10
          MOV r1,r1,ASR#10
          MOV r2,r2,ASR#10
          BL generate_dust

          BL generate_mini_explosion

        LDMFA (sp)!,{r0-r2}
        LDR r0,bnd_crno%
        MOVS r0,r0
        BNE end_z_bound
        MOV r0,#4
        MOV r1,#10
        MOV r2,#15
        MOV r3,#20
        BL play_sample


        .end_z_bound
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .calc_line_intersection
      STMFA (sp)!,{r1-r10,r12,link}
        CMP r0,r2
        MOVEQ r0,r1
        BEQ end_calc_line_intersection
        MOVGT r5,r0
        MOVGT r6,r1
        MOVGT r0,r2
        MOVGT r1,r3
        MOVGT r2,r5
        MOVGT r3,r6
        SUBS r2,r2,r0
        SUBS r3,r3,r1
        MOVEQ r0,r1
        BEQ end_calc_line_intersection
        FNswm_rdiv_sca8(3,2,5)
        SUB r4,r4,r0
        MUL r6,r5,r4
        MOV r1,r1,ASL#8
        ADD r1,r1,r6
        MOV r0,r1,ASR#8

        .end_calc_line_intersection
        STR r0,interseccy_coord%
      LDMFA (sp)!,{r1-r10,r12,link}
      MOV PC,link

      .interseccy_coord% EQUD 0

      .check_all_crafts_with_checkzones
      STMFA (sp)!,{r0-r10,r12,link}
        MOV r0,#4

        .check_all_crafts_with_checkzones_lp
        BL check_craft_with_checkzone

        SUBS r0,r0,#1
        BGE check_all_crafts_with_checkzones_lp
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .check_craft_with_checkzone
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r12,world_data_header_base%
        LDR r10,[r12,#8]
        ADD r10,r10,r0,ASL#7
        LDR r9,[r12,#28]
        LDR r8,[r10,#76]
        LDR r7,[r10,#84]
        ADD r7,r7,#1
        STR r7,[r10,#84]
        ADD r9,r9,r8,ASL#4
        LDR r1,[r10]
        MOV r1,r1,ASR#10
        LDR r2,[r10,#8]
        MOV r2,r2,ASR#10
        LDR r3,[r9]
        LDR r4,[r9,#4]
        MOV r5,#4
        SUB r3,r3,#452
        CMP r1,r3
        SUBGT r5,r5,#1
        SUB r4,r4,#452
        CMP r2,r4
        SUBGT r5,r5,#1
        ADD r3,r3,#904
        CMP r1,r3
        SUBLT r5,r5,#1
        ADD r4,r4,#904
        CMP r2,r4
        SUBLT r5,r5,#1
        MOVS r5,r5
        BGT end_check_craft_with_checkzone
        LDR r7,[r10,#80]
        MOVS r8,r8
        BNE cchec_not_new_lap
        ADD r7,r7,#1
        STR r7,[r10,#80]
        LDR r7,[r10,#84]
        STR r7,[r10,#88]
        LDR r5,[r10,#124]
        CMP r7,r5
        STRLT r7,[r10,#124]
        MOV r7,#0
        STR r7,[r10,#84]

        .cchec_not_new_lap
        ADD r8,r8,#1
        CMP r8,#6
        MOVGE r8,#0
        STR r8,[r10,#76]
        MOV r5,#3
        MOVS r0,r0
        SUBEQ r5,r5,#1
        LDR r7,[r10,#80]
        LDR r4,world_data_header_base%
        LDR r6,[r4,#32]
        LDR r8,[r6,#4]
        CMP r7,r8
        SUBEQ r5,r5,#1
        LDR r8,[r10,#76]
        CMP r8,#1
        SUBEQ r5,r5,#1
        MOVS r5,r5
        MOVEQ r0,#3
        MOVEQ r1,#8
        MOVEQ r2,#15
        MOVEQ r3,#40
        BLEQ play_sample

        MOVS r5,r5
        BEQ end_check_craft_with_checkzone
        MOVS r0,r0
        MOVEQ r0,#1
        MOVEQ r1,#1
        MOVEQ r2,#6
        MOVEQ r3,#40
        BLEQ play_sample


        .end_check_craft_with_checkzone
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .craft_positioning%
      EQUD 0
      EQUD 0
      EQUD 1
      EQUD 0
      EQUD 2
      EQUD 0
      EQUD 3
      EQUD 0
      EQUD 4
      EQUD 0

      .reset_craft_position_list
      STMFA (sp)!,{r0-r10,r12,link}
        ADR r12,craft_positioning%
        MOV r1,#0
        MOV r0,#0
        STR r0,[r12]
        MOV r0,#1
        STR r0,[r12,#8]
        MOV r0,#2
        STR r0,[r12,#16]
        MOV r0,#3
        STR r0,[r12,#24]
        MOV r0,#4
        STR r0,[r12,#32]
        STR r1,[r12,#4]
        STR r1,[r12,#12]
        STR r1,[r12,#20]
        STR r1,[r12,#28]
        STR r1,[r12,#36]
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .analyse_craft_positions
      STMFA (sp)!,{r0-r10,r12,link}
        ADR r10,craft_positioning%
        LDR r12,world_data_header_base%
        LDR r9,[r12,#8]
        LDR r0,[r10]
        ADD r12,r9,r0,ASL#7
        LDR r1,[r12,#76]
        MOVS r1,r1
        MOVEQ r1,#6
        LDR r2,[r12,#80]
        SUB r2,r2,#1
        MOV r3,r2,ASL#2
        MOV r4,r2,ASL#1
        ADD r3,r3,r4
        ADD r3,r3,r1
        STR r3,[r10,#4]
        LDR r0,[r10,#8]
        ADD r12,r9,r0,ASL#7
        LDR r1,[r12,#76]
        MOVS r1,r1
        MOVEQ r1,#6
        LDR r2,[r12,#80]
        SUB r2,r2,#1
        MOV r3,r2,ASL#2
        MOV r4,r2,ASL#1
        ADD r3,r3,r4
        ADD r3,r3,r1
        STR r3,[r10,#12]
        LDR r0,[r10,#16]
        ADD r12,r9,r0,ASL#7
        LDR r1,[r12,#76]
        MOVS r1,r1
        MOVEQ r1,#6
        LDR r2,[r12,#80]
        SUB r2,r2,#1
        MOV r3,r2,ASL#2
        MOV r4,r2,ASL#1
        ADD r3,r3,r4
        ADD r3,r3,r1
        STR r3,[r10,#20]
        LDR r0,[r10,#24]
        ADD r12,r9,r0,ASL#7
        LDR r1,[r12,#76]
        MOVS r1,r1
        MOVEQ r1,#6
        LDR r2,[r12,#80]
        SUB r2,r2,#1
        MOV r3,r2,ASL#2
        MOV r4,r2,ASL#1
        ADD r3,r3,r4
        ADD r3,r3,r1
        STR r3,[r10,#28]
        LDR r0,[r10,#32]
        ADD r12,r9,r0,ASL#7
        LDR r1,[r12,#76]
        MOVS r1,r1
        MOVEQ r1,#6
        LDR r2,[r12,#80]
        SUB r2,r2,#1
        MOV r3,r2,ASL#2
        MOV r4,r2,ASL#1
        ADD r3,r3,r4
        ADD r3,r3,r1
        STR r3,[r10,#36]
        MOV r8,#5

        .ccpos_outer_lp
        MOV r0,#0
        MOV r9,#4

        .check_craft_pos_loop
          ADD r12,r10,r0,ASL#3
          LDR r1,[r12,#4]
          LDR r2,[r12,#12]
          CMP r1,r2
          LDRLT r1,[r12]
          LDRLT r2,[r12,#4]
          LDRLT r3,[r12,#8]
          LDRLT r4,[r12,#12]
          STRLT r3,[r12]
          STRLT r4,[r12,#4]
          STRLT r1,[r12,#8]
          STRLT r2,[r12,#12]
          ADD r0,r0,#1
          SUBS r9,r9,#1
        BGT check_craft_pos_loop

        SUBS r8,r8,#1
        BGT ccpos_outer_lp
        LDR r12,world_data_header_base%
        LDR r9,[r12,#8]
        MOV r0,#5
        MOV r2,#1

        .assign_craft_positions
        LDR r1,[r10],#8
        ADD r8,r9,r1,ASL#7
        STR r2,[r8,#116]
        ADD r2,r2,#1
        SUBS r0,r0,#1
        BGT assign_craft_positions
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .check_craft_with_all_effects_tiles
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r12,world_data_header_base%
        LDR r10,[r12,#36]
        LDR r9,[r12,#8]
        MOVS r0,r0
        MOVEQ r8,#16
        STREQ r8,[r9,#52]
        LDR r1,[r10]
        MOVS r1,r1
        BLE end_check_craft_with_all_effects_tiles

        SUB r1,r1,#1

        .check_craft_with_all_effects_tiles_loop
          BL check_craft_with_effects_tile

          SUBS r1,r1,#1
        BGE check_craft_with_all_effects_tiles_loop


        .end_check_craft_with_all_effects_tiles
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .check_craft_with_effects_tile
      STMFA (sp)!,{r0-r10,r12,link}
        MOV r8,r0
        LDR r12,world_data_header_base%
        LDR r10,[r12,#8]
        ADD r10,r10,r0,ASL#7
        LDR r9,[r12,#36]
        ADD r9,r9,#4
        MOV r2,r1,ASL#2
        MOV r3,r1,ASL#3
        ADD r2,r2,r3
        ADD r9,r9,r2
        LDR r0,[r10]
        LDR r1,[r10,#8]
        MOV r0,r0,ASR#10
        MOV r1,r1,ASR#10
        LDR r2,[r9,#4]
        LDR r3,[r9,#8]
        MOV r4,#4
        SUB r2,r2,#75
        CMP r0,r2
        SUBGT r4,r4,#1
        ADD r2,r2,#150
        CMP r0,r2
        SUBLT r4,r4,#1
        SUB r3,r3,#75
        CMP r1,r3
        SUBGT r4,r4,#1
        ADD r3,r3,#150
        CMP r1,r3
        SUBLT r4,r4,#1
        MOVS r4,r4
        BGT end_check_craft_with_effects_tile
        LDR r1,[r9]
        MOV r2,#2
        MOVS r8,r8
        SUBEQ r2,r2,#1
        MOVS r1,r1
        SUBEQ r2,r2,#1
        MOVS r2,r2
        MOVEQ r4,#70<<10
        STREQ r4,[r10,#32]
        MOVS r2,r2
        MOVEQ r0,#124
        BLEQ register_zoom_sprite

        MOVS r2,r2
        MOVEQ r0,#3
        MOVEQ r1,#9
        MOVEQ r2,#12
        MOVEQ r3,#20
        BLEQ play_sample

        LDR r1,[r9]
        MOV r2,#2
        MOVS r8,r8
        SUBEQ r2,r2,#1
        CMP r1,#1
        SUBEQ r2,r2,#1
        MOVEQ r4,#40<<10
        STREQ r4,[r10,#24]
        MOVS r2,r2
        MOVEQ r0,#124
        BLEQ register_zoom_sprite

        MOVS r2,r2
        MOVEQ r0,#3
        MOVEQ r1,#9
        MOVEQ r2,#12
        MOVEQ r3,#20
        BLEQ play_sample

        LDR r1,[r9]
        MOV r2,#2
        MOVS r8,r8
        SUBEQ r2,r2,#1
        CMP r1,#2
        SUBEQ r2,r2,#1
        MOVEQ r4,#40<<10
        RSBEQ r4,r4,#0
        STREQ r4,[r10,#24]
        MOVS r2,r2
        MOVEQ r0,#124
        BLEQ register_zoom_sprite

        MOVS r2,r2
        MOVEQ r0,#3
        MOVEQ r1,#9
        MOVEQ r2,#12
        MOVEQ r3,#20
        BLEQ play_sample

        LDR r1,[r9]
        MOVS r8,r8
        BNE crnot_oocntrol
        CMP r1,#3
        MOVEQ r4,#17
        MOVEQ r5,#2
        MOVEQ r6,#40
        STREQ r5,[r10,#104]
        STREQ r4,[r10,#108]
        STREQ r6,[r10,#40]
        MOVEQ r0,#3
        MOVEQ r1,#11
        MOVEQ r2,#15
        MOVEQ r3,#40
        BLEQ play_sample


        .crnot_oocntrol
        LDR r1,[r9]
        MOV r2,#2
        CMP r1,#4
        SUBEQ r2,r2,#1
        MOVS r8,r8
        SUBEQ r2,r2,#1
        MOVS r2,r2
        MOVEQ r0,#126
        BLEQ register_zoom_sprite

        MOVS r2,r2
        LDREQ r4,[r10,#120]
        ADDEQ r4,r4,#1
        STREQ r4,[r10,#120]
        RSBEQ r1,r1,#0
        STREQ r1,[r9]
        MOVEQ r0,#1
        MOVEQ r1,#12
        MOVEQ r2,#15
        MOVEQ r3,#40
        BLEQ play_sample

        LDR r1,[r9]
        MOV r2,#2
        MOVS r8,r8
        SUBEQ r2,r2,#1
        CMP r1,#5
        SUBEQ r2,r2,#1
        MOVS r2,r2
        MOVEQ r0,#4
        STREQ r0,[r10,#52]
        LDR r1,[r9]
        MOV r2,#2
        MOVS r8,r8
        SUBEQ r2,r2,#1
        CMP r1,#6
        SUBEQ r2,r2,#1
        MOVS r2,r2
        MOVEQ r0,#64
        STREQ r0,[r10,#52]

        .end_check_craft_with_effects_tile
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .object_header_list_base% EQUD object_header_list%

      .world_data_header_base% EQUD world_data_header%

      .detail_level_adr% EQUD detail_level_status%

      .polygon_workspace_base% EQUD polygon_workspace%

      .swm_rdiv_list_base% EQUD swm_rdiv_list%

      .sine_table_base% EQUD sine_table%

      .cosine_table_base% EQUD cosine_table%

      .tangent_table_base% EQUD tangent_table%

      .arc_tangent_table_base% EQUD arc_tangent_table%

      .camera_position_base% EQUD camera_position%

      .dead_craft_motion_control
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r12,world_data_header_base%
        LDR r10,[r12,#8]
        ADD r10,r10,r0,ASL#7
        LDR r9,[r12,#4]
        LDR r12,[r9,#4]
        ADD r12,r12,r0,ASL#5
        LDMIA r12,{r1-r3}
        MOV r4,r0,ASL#1
        BL random_number

        ADD r1,r1,r0
        MOV r0,r4
        BL generate_smoke

        ADD r4,r0,#1
        BL random_number

        ADD r3,r3,r0
        MOV r0,r4
        BL generate_smoke

        LDMIA r10,{r0-r5}
        LDR r8,[r10,#112]
        MOV r9,#20<<10
        RSB r9,r9,#0
        CMP r1,r9
        MOVGT r4,r8
        SUBGT r8,r8,#5<<10
        STMFA (sp)!,{r0-r2}
          LDMIA r10,{r0-r2}
          MOV r0,r0,ASR#10
          MOV r1,r1,ASR#10
          MOV r2,r2,ASR#10
          BLGT generate_mini_explosion

        LDMFA (sp)!,{r0-r2}
        CMP r8,#10<<10
        MOVLE r8,#0
        MOVLE r1,#20<<10
        RSBLE r1,r1,#0
        STR r8,[r10,#112]
        MOVS r8,r8
        SUBGT r4,r4,#5<<10
        ADD r0,r0,r3
        SUBGT r1,r1,r4
        ADD r2,r2,r5
        LDR r8,[r10,#52]
        MUL r6,r8,r3
        MUL r7,r8,r5
        SUB r3,r3,r6,ASR#8
        SUB r5,r5,r7,ASR#8
        STR r3,[r10,#12]
        STR r4,[r10,#16]
        STR r5,[r10,#20]
        STMIA r10,{r0-r2}
        MOV r0,r0,ASR#10
        MOV r1,r1,ASR#10
        MOV r2,r2,ASR#10
        STMIA r12,{r0-r2}
        LDR r8,[r10,#112]
        MOVS r8,r8
        BLE craft_stopped_bouncing

        LDR r1,[r10,#36]
        LDR r2,[r10,#40]
        SUB r1,r1,r2
        MOVS r1,r1
        ADDLT r1,r1,#360
        CMP r1,#360
        SUBGE r1,r1,#360
        STR r1,[r10,#36]
        STR r1,[r12,#20]
        LDR r1,[r12,#24]
        ADD r1,r1,#5
        MOVS r1,r1
        ADDLT r1,r1,#360
        CMP r1,#360
        SUBGE r1,r1,#360
        STR r1,[r12,#24]

        .craft_stopped_bouncing
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .missile_repeat_time% EQUD 0

      .missile_motion_control
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r9,missile_repeat_time%
        SUBS r9,r9,#1
        MOVLT r9,#0
        STR r9,missile_repeat_time%
        ADD r7,r0,#10
        LDR r9,world_data_header_base%
        LDR r12,[r9,#44]
        LDR r8,[r9,#4]
        LDR r10,[r8,#4]
        ADD r12,r12,r0,ASL#6
        ADD r0,r0,#5
        LDR r1,[r10,#12]
        CMP r1,#26
        BNE plcft_no_heat_seekers
        BL point_missile_in_direction_of_craft


        .plcft_no_heat_seekers
        ADD r10,r10,r0,ASL#5
        LDR r0,[r12,#4]
        LDR r1,[r10,#12]
        MOVS r0,r0
        SUBLE r2,r2,#1
        ORRLE r1,r1,#1<<31
        BICGT r1,r1,#1<<31
        STR r1,[r10,#12]
        BLE end_missile_motion_control

        LDR r0,[r12,#44]
        LDR r1,[r12,#52]
        ADD r0,r0,r1
        MOVS r0,r0
        ADDLT r0,r0,#360
        CMP r0,#360
        SUBGE r0,r0,#360
        STR r0,[r12,#44]
        STR r0,[r10,#20]
        LDR r1,[r10,#24]
        ADD r1,r1,#6
        MOVS r1,r1
        ADDLT r1,r1,#360
        CMP r1,#360
        SUBGE r1,r1,#360
        STR r1,[r10,#24]
        LDR r1,sine_table_base%
        LDR r8,[r1,r0,ASL#2]
        LDR r1,cosine_table_base%
        LDR r9,[r1,r0,ASL#2]
        LDR r0,[r12,#32]
        LDR r1,[r12,#40]
        MUL r2,r0,r9
        MUL r3,r1,r8
        SUB r4,r2,r3
        MUL r2,r1,r9
        MUL r3,r0,r8
        ADD r5,r2,r3
        MOV r4,r4,ASR#8
        MOV r5,r5,ASR#8
        LDR r0,[r12,#20]
        LDR r1,[r12,#28]
        ADD r0,r0,r4
        ADD r1,r1,r5
        MOV r2,#16
        MUL r3,r2,r0
        MUL r4,r2,r1
        SUB r0,r0,r3,ASR#8
        SUB r1,r1,r4,ASR#8
        STR r0,[r12,#20]
        STR r1,[r12,#28]
        LDR r2,[r12,#8]
        LDR r3,[r12,#16]
        ADD r2,r2,r0
        ADD r3,r3,r1
        STR r2,[r12,#8]
        STR r3,[r12,#16]
        MOV r2,r2,ASR#10
        MOV r3,r3,ASR#10
        STR r2,[r10]
        STR r3,[r10,#8]
        MOV r1,r2
        MOV r2,#40
        RSB r2,r2,#0
        MOV r0,r7
        BL generate_smoke

        LDR r0,[r12,#4]
        SUBS r0,r0,#1
        MOVLT r0,#0
        LDRLE r10,world_data_header_base%
        LDRLE r2,[r10,#48]
        MOVLE r3,#1
        SUBLE r7,r7,#10
        BICLE r2,r2,r3,LSL r7
        STRLE r2,[r10,#48]
        STR r0,[r12,#4]

        .end_missile_motion_control
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .fire_missile
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r9,missile_repeat_time%
        MOVS r9,r9
        BNE end_fire_missile
        LDR r9,world_data_header_base%
        LDR r2,[r9,#48]
        MOV r1,#0
        TST r2,#1
        BEQ this_missile_is_available
        ADDNE r1,r1,#1
        TST r2,#2
        BEQ this_missile_is_available
        ADDNE r1,r1,#1
        TST r2,#4
        BNE end_fire_missile

        .this_missile_is_available
        MOVS r1,r1
        ORREQ r2,r2,#1
        CMP r1,#1
        ORREQ r2,r2,#2
        CMP r1,#2
        ORREQ r2,r2,#4
        STR r2,[r9,#48]
        LDR r8,[r9,#8]
        LDR r10,[r8,#120]
        SUB r10,r10,#1
        STR r10,[r8,#120]
        MOV r2,r8
        MOV r8,#10
        STR r8,missile_repeat_time%
        LDR r12,[r9,#44]
        LDR r8,[r9,#4]
        LDR r10,[r8,#4]
        ADD r10,r10,r0,ASL#5
        ADD r12,r12,r1,ASL#6
        LDR r0,[r2,#60]
        STR r0,[r12,#60]
        LDR r0,[r10]
        LDR r1,[r10,#8]
        MOV r0,r0,ASL#10
        MOV r1,r1,ASL#10
        STR r0,[r12,#8]
        STR r1,[r12,#16]
        LDR r0,[r10,#20]
        STR r0,[r12,#44]
        MOV r0,#100
        STR r0,[r12,#4]
        MOV r0,#0
        MOV r1,#0
        MOV r2,#0
        ADD r3,r12,#20
        STMIA r3,{r0-r2}
        MOV r0,#3
        MOV r1,#9
        MOV r2,#15
        MOV r3,#10
        BL play_sample


        .end_fire_missile
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .check_all_crafts_with_missiles
      STMFA (sp)!,{r0-r10,r12,link}
        MOV r0,#4

        .sp_craft_lp
        MOV r1,#2

        .sp_missile_lp
        BL check_missile_craft_collision

        SUBS r1,r1,#1
        BGE sp_missile_lp
        SUBS r0,r0,#1
        BGT sp_craft_lp
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .check_missile_craft_collision
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r9,world_data_header_base%
        LDR r12,[r9,#44]
        LDR r8,[r9,#4]
        LDR r4,[r9,#8]
        LDR r10,[r8,#4]
        ADD r10,r10,r0,ASL#5
        ADD r12,r12,r1,ASL#6
        ADD r4,r4,r0,ASL#7
        MOV r9,r1
        LDR r0,[r12,#4]
        MOVS r0,r0
        BLE end_check_missile_craft_collision

        MOV r7,#55
        MOV r8,#100
        MUL r5,r7,r7
        MUL r6,r8,r8
        ADD r5,r5,r6
        LDR r0,[r10]
        LDR r1,[r10,#8]
        LDR r2,[r12,#8]
        LDR r3,[r12,#16]
        MOV r2,r2,ASR#10
        MOV r3,r3,ASR#10
        SUB r2,r2,r0
        SUB r3,r3,r1
        MUL r0,r2,r2
        MUL r1,r3,r3
        ADD r0,r0,r1
        CMP r0,r5
        BGT end_check_missile_craft_collision
        MOV r5,#34
        STR r5,[r4,#108]
        MOV r5,#2
        STR r5,[r4,#104]
        MOV r0,#40
        RSB r0,r0,#0
        STR r0,[r4,#40]
        MOV r0,#0
        STR r0,[r12,#4]
        STMFA (sp)!,{r0-r2}
          LDMIA r4,{r0-r2}
          MOV r0,r0,ASR#10
          MOV r1,r1,ASR#10
          MOV r2,r2,ASR#10
          BL generate_big_explosion

        LDMFA (sp)!,{r0-r2}
        LDR r5,world_data_header_base%
        LDR r6,[r5,#48]
        MOV r0,#1
        BIC r6,r6,r0,LSL r9
        STR r6,[r5,#48]
        MOV r0,#125
        BL register_zoom_sprite

        MOV r0,#1
        MOV r1,#0
        MOV r2,#15
        MOV r3,#10
        BL play_sample


        .end_check_missile_craft_collision
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link
    ]

  NEXT pass%


ENDPROC


DEF PROCassemble_player_control_routines

  LOCAL adr%,pass%,link,sp
  link=14
  sp=11
  adr%=P%

  FOR pass%=8 TO10 STEP2
    P%=adr%
    L%=code% +len%

    [OPT pass%

      .polygon_workspace_base% EQUD polygon_workspace%

      .swm_rdiv_list_base% EQUD swm_rdiv_list%

      .sine_table_base% EQUD sine_table%

      .cosine_table_base% EQUD cosine_table%

      .tangent_table_base% EQUD tangent_table%

      .arc_tangent_table_base% EQUD arc_tangent_table%

      .camera_position_base% EQUD camera_position%

      .detail_level_adr% EQUD detail_level_status%

      .object_header_list_base% EQUD object_header_list%

      .world_data_header_base% EQUD world_data_header%

      .check_player_craft_control_input
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r12,world_data_header_base%
        LDR r10,[r12,#32]
        LDR r9,[r10]
        MOVS r9,r9
        BLEQ check_player_craft_control_input_mouse

        CMP r9,#1
        BLEQ check_player_craft_control_input_joystick

        CMP r9,#2
        BLEQ check_player_craft_control_input_keyboard

      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .check_player_craft_control_input_mouse
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r12,world_data_header_base%
        LDR r10,[r12,#8]
        SWI "OS_Mouse"
        MOV r0,r0,ASR#6
        SUB r0,r0,#10
        MOVS r0,r0
        RSBLT r0,r0,#0
        MOVLT r5,#1
        MOVGE r5,#0
        LDR r4,[r10,#72]
        CMP r0,r4
        MOVGT r0,r4
        MOVS r5,r5
        RSBNE r0,r0,#0
        STR r0,[r10,#40]
        MOV r4,#0
        TST r2,#2
        LDRNE r4,[r10,#64]
        STR r4,[r10,#32]
        MOV r4,#0
        STR r4,[r10,#24]
        TST r2,#1
        LDRNE r4,[r10,#68]
        STRNE r4,[r10,#24]
        TST r2,#4
        LDRNE r4,[r10,#68]
        RSBNE r4,r4,#0
        STRNE r4,[r10,#24]
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .check_player_craft_control_input_keyboard
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r12,world_data_header_base%
        LDR r10,[r12,#8]
        LDR r4,[r10,#40]
        MOVS r4,r4
        ADDLT r4,r4,#1
        MOVS r4,r4
        SUBGT r4,r4,#1
        MOV r0,#129
        MVN r1,#97
        MOV r2,#255
        SWI "OS_Byte"
        MOV r3,#2
        CMP r1,#255
        SUBEQ r3,r3,#1
        CMP r2,#255
        SUBEQ r3,r3,#1
        MOVS r3,r3
        SUBEQ r4,r4,#2
        MOV r0,#129
        MVN r1,#66
        MOV r2,#255
        SWI "OS_Byte"
        MOV r3,#2
        CMP r1,#255
        SUBEQ r3,r3,#1
        CMP r2,#255
        SUBEQ r3,r3,#1
        MOVS r3,r3
        ADDEQ r4,r4,#2
        MOVS r4,r4
        RSBLT r4,r4,#0
        MOVLT r5,#1
        MOVGE r5,#0
        LDR r6,[r10,#72]
        CMP r4,r6
        MOVGT r4,r6
        MOVS r5,r5
        RSBNE r4,r4,#0
        STR r4,[r10,#40]
        MOV r0,#129
        MVN r1,#73
        MOV r2,#255
        SWI "OS_Byte"
        MOV r3,#2
        CMP r1,#255
        SUBEQ r3,r3,#1
        CMP r2,#255
        SUBEQ r3,r3,#1
        MOVNE r4,#0
        LDREQ r4,[r10,#64]
        STR r4,[r10,#32]
        MOV r4,#0
        STR r4,[r10,#24]
        MOV r0,#129
        MVN r1,#5
        MOV r2,#255
        SWI "OS_Byte"
        MOV r3,#2
        CMP r1,#255
        SUBEQ r3,r3,#1
        CMP r2,#255
        SUBEQ r3,r3,#1
        LDREQ r4,[r10,#68]
        RSBEQ r4,r4,#0
        STREQ r4,[r10,#24]
        MOV r0,#129
        MVN r1,#8
        MOV r2,#255
        SWI "OS_Byte"
        MOV r3,#2
        CMP r1,#255
        SUBEQ r3,r3,#1
        CMP r2,#255
        SUBEQ r3,r3,#1
        LDREQ r4,[r10,#68]
        STREQ r4,[r10,#24]
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .check_player_craft_control_input_joystick
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r12,world_data_header_base%
        LDR r10,[r12,#8]
        LDR r4,[r10,#40]
        MOVS r4,r4
        ADDLT r4,r4,#1
        MOVS r4,r4
        SUBGT r4,r4,#1
        MOV r0,#0
        SWI &43F40
        ANDr3,r0,#255<<8
        MOV r3,r3,LSR#8
        CMP r3,#192
        SUBEQ r4,r4,#2
        CMP r3,#64
        ADDEQ r4,r4,#2
        MOVS r4,r4
        RSBLT r4,r4,#0
        MOVLT r5,#1
        MOVGE r5,#0
        LDR r6,[r10,#72]
        CMP r4,r6
        MOVGT r4,r6
        MOVS r5,r5
        RSBNE r4,r4,#0
        STR r4,[r10,#40]
        MOV r3,#0
        ANDr3,r0,#255<<16
        MOV r3,r3,LSR#16
        MOVS r3,r3
        MOVEQ r4,#0
        LDRNE r4,[r10,#64]
        STR r4,[r10,#32]
        MOV r0,#129
        MVN r1,#5
        MOV r2,#255
        SWI "OS_Byte"
        MOV r3,#2
        CMP r1,#255
        SUBEQ r3,r3,#1
        CMP r2,#255
        SUBEQ r3,r3,#1
        LDREQ r4,[r10,#68]
        RSBEQ r4,r4,#0
        STREQ r4,[r10,#24]
        MOV r0,#129
        MVN r1,#8
        MOV r2,#255
        SWI "OS_Byte"
        MOV r3,#2
        CMP r1,#255
        SUBEQ r3,r3,#1
        CMP r2,#255
        SUBEQ r3,r3,#1
        LDREQ r4,[r10,#68]
        STREQ r4,[r10,#24]
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .check_view_keys
      STMFA (sp)!,{r0-r10,r12,link}
        MOV r0,#129
        MVN r1,#116
        MOV r2,#255
        SWI "OS_Byte"
        MOV r3,#2
        CMP r1,#255
        SUBEQ r3,r3,#1
        CMP r2,#255
        SUBEQ r3,r3,#1
        MOVS r3,r3
        BNE f5_not_pressed
        LDR r5,camera_position_base%
        LDR r4,[r5,#16]
        SUBS r4,r4,#1
        MOVLT r4,#0
        STR r4,[r5,#16]

        .f5_not_pressed
        MVN r1,#117
        MOV r2,#255
        SWI "OS_Byte"
        MOV r3,#2
        CMP r1,#255
        SUBEQ r3,r3,#1
        CMP r2,#255
        SUBEQ r3,r3,#1
        MOVS r3,r3
        BNE f6_not_pressed
        LDR r5,camera_position_base%
        LDR r4,[r5,#16]
        ADD r4,r4,#1
        CMP r4,#4
        MOVGT r4,#4
        STR r4,[r5,#16]

        .f6_not_pressed
        MVN r1,#119
        MOV r2,#255
        SWI "OS_Byte"
        MOV r3,#2
        CMP r1,#255
        SUBEQ r3,r3,#1
        CMP r2,#255
        SUBEQ r3,r3,#1
        MOVS r3,r3
        BNE f9_not_pressed

        .f9_not_pressed
        MVN r1,#30
        MOV r2,#255
        SWI "OS_Byte"
        MOV r3,#2
        CMP r1,#255
        SUBEQ r3,r3,#1
        CMP r2,#255
        SUBEQ r3,r3,#1
        MOVS r3,r3
        BNE f10_not_pressed
        LDR r5,detail_level_adr%
        LDR r4,[r5]

        .f10_not_pressed
        MVN r1,#28
        MOV r2,#255
        SWI "OS_Byte"
        MOV r3,#2
        CMP r1,#255
        SUBEQ r3,r3,#1
        CMP r2,#255
        SUBEQ r3,r3,#1
        MOVS r3,r3
        BNE f11_not_pressed

        .f11_not_pressed
        MVN r1,#63
        MOV r2,#255
        SWI "OS_Byte"
        MOV r3,#2
        CMP r1,#255
        SUBEQ r3,r3,#1
        CMP r2,#255
        SUBEQ r3,r3,#1
        MOVS r3,r3
        BNE pgu_not_pressed
        LDR r4,camera_position_base%
        LDR r5,[r4,#40]
        ADD r5,r5,#20
        RSB r5,r5,#0
        CMP r5,#100
        MOVLT r5,#100
        RSB r5,r5,#0
        STR r5,[r4,#40]

        .pgu_not_pressed
        MVN r1,#78
        MOV r2,#255
        SWI "OS_Byte"
        MOV r3,#2
        CMP r1,#255
        SUBEQ r3,r3,#1
        CMP r2,#255
        SUBEQ r3,r3,#1
        MOVS r3,r3
        BNE pgd_not_pressed
        LDR r4,camera_position_base%
        LDR r5,[r4,#40]
        SUB r5,r5,#20
        RSB r5,r5,#0
        CMP r5,#1024
        MOVGT r5,#1024
        RSB r5,r5,#0
        STR r5,[r4,#40]

        .pgd_not_pressed
        MVN r1,#25
        MOV r2,#255
        SWI "OS_Byte"
        MOV r3,#2
        CMP r1,#255
        SUBEQ r3,r3,#1
        CMP r2,#255
        SUBEQ r3,r3,#1
        MOVS r3,r3
        BNE cleft_not_pressed
        LDR r4,camera_position_base%
        LDR r5,[r4,#28]
        SUB r5,r5,#8
        MOVS r5,r5
        ADDLT r5,r5,#360
        CMP r5,#360
        SUBGE r5,r5,#360
        STR r5,[r4,#28]

        .cleft_not_pressed
        MVN r1,#121
        MOV r2,#255
        SWI "OS_Byte"
        MOV r3,#2
        CMP r1,#255
        SUBEQ r3,r3,#1
        CMP r2,#255
        SUBEQ r3,r3,#1
        MOVS r3,r3
        BNE cright_not_pressed
        LDR r4,camera_position_base%
        LDR r5,[r4,#28]
        ADD r5,r5,#8
        MOVS r5,r5
        ADDLT r5,r5,#360
        CMP r5,#360
        SUBGE r5,r5,#360
        STR r5,[r4,#28]

        .cright_not_pressed
        MVN r1,#57
        MOV r2,#255
        SWI "OS_Byte"
        MOV r3,#2
        CMP r1,#255
        SUBEQ r3,r3,#1
        CMP r2,#255
        SUBEQ r3,r3,#1
        MOVS r3,r3
        BNE cup_not_pressed
        LDR r4,camera_position_base%
        MOV r5,#0
        STR r5,[r4,#28]

        .cup_not_pressed
        MVN r1,#41
        MOV r2,#255
        SWI "OS_Byte"
        MOV r3,#2
        CMP r1,#255
        SUBEQ r3,r3,#1
        CMP r2,#255
        SUBEQ r3,r3,#1
        MOVS r3,r3
        BNE cdown_not_pressed
        LDR r4,camera_position_base%
        MOV r5,#180
        STR r5,[r4,#28]

        .cdown_not_pressed
        MVN r1,#22
        MOV r2,#255
        SWI "OS_Byte"
        MOV r3,#2
        CMP r1,#255
        SUBEQ r3,r3,#1
        CMP r2,#255
        SUBEQ r3,r3,#1
        MOVS r3,r3
        BNE f7_not_pressed
        LDR r4,camera_position_base%
        MOV r5,#0
        STR r5,[r4,#44]

        .f7_not_pressed
        MVN r1,#118
        MOV r2,#255
        SWI "OS_Byte"
        MOV r3,#2
        CMP r1,#255
        SUBEQ r3,r3,#1
        CMP r2,#255
        SUBEQ r3,r3,#1
        MOVS r3,r3
        BNE f8_not_pressed
        LDR r4,camera_position_base%
        MOV r5,#1
        STR r5,[r4,#44]

        .f8_not_pressed
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link
    ]

  NEXT pass%


ENDPROC


DEF PROCassemble_3d_handlers

  LOCAL adr%,pass%,link,sp
  link=14
  sp=11
  adr%=P%

  FOR pass%=8 TO10 STEP2
    P%=adr%
    L%=code% +len%

    [OPT pass%

      .polygon_workspace_base% EQUD polygon_workspace%

      .swm_rdiv_list_base% EQUD swm_rdiv_list%

      .sine_table_base% EQUD sine_table%

      .cosine_table_base% EQUD cosine_table%

      .tangent_table_base% EQUD tangent_table%

      .arc_tangent_table_base% EQUD arc_tangent_table%

      .camera_position_base% EQUD camera_position%

      .object_header_list_base% EQUD object_header_list%

      .world_data_header_base% EQUD world_data_header%

      .detail_level_adr% EQUD detail_level_status%

      .screen_x_origin% EQUD 160

      .screen_y_origin% EQUD 128

      .zmax% EQUD 6144

      .zmin% EQUD -350-1024

      .xmax% EQUD 2000

      .xmin% EQUD -2000

      .check_track_detail_option
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r10,[r12,#4]
        MOV r5,#3
        CMP r10,#5
        SUBEQ r5,r5,#1
        MOV r0,#129
        MVN r1,#73
        MOV r2,#255
        SWI "OS_Byte"
        MOV r3,#2
        CMP r1,#255
        SUBEQ r3,r3,#1
        CMP r2,#255
        SUBEQ r3,r3,#1
        MOVS r3,r3
        SUBEQ r5,r5,#1
        LDR r10,[r12,#8]
        MOVS r10,r10
        SUBEQ r5,r5,#1
        LDR r9,detail_level_adr%
        LDR r8,[r9]
        TST r8,#1
        MOV r7,#0
        ORRNE r7,r7,#1
        TST r8,#4
        ORRNE r7,r7,#2
        CMP r7,#2
        MOVEQ r0,#2
        MOVS r7,r7
        MOVEQ r0,#2
        CMP r7,#1
        MOVEQ r0,#1
        CMP r7,#3
        MOVEQ r0,#0
        MOV r1,#280
        MOV r2,#120
        ADD r0,r0,#88
        BL plot_letter_sprite

        SUB r0,r0,#88
        MOVS r5,r5
        BGT ignore_track_detail_option
        SUBS r0,r0,#1
        MOVLT r0,#2
        CMP r0,#2
        BICEQ r8,r8,#1
        BICEQ r8,r8,#4
        CMP r0,#1
        ORREQ r8,r8,#1
        BICEQ r8,r8,#4
        CMP r0,#0
        ORREQ r8,r8,#1
        ORREQ r8,r8,#4

        .ignore_track_detail_option
        CMP r0,#2
        BICEQ r8,r8,#2
        STR r8,[r9]
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .check_object_detail_option
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r10,[r12,#4]
        MOV r5,#3
        CMP r10,#4
        SUBEQ r5,r5,#1
        MOV r0,#129
        MVN r1,#73
        MOV r2,#255
        SWI "OS_Byte"
        MOV r3,#2
        CMP r1,#255
        SUBEQ r3,r3,#1
        CMP r2,#255
        SUBEQ r3,r3,#1
        MOVS r3,r3
        SUBEQ r5,r5,#1
        LDR r10,[r12,#8]
        MOVS r10,r10
        SUBEQ r5,r5,#1
        LDR r9,detail_level_adr%
        LDR r8,[r9]
        TST r8,#2
        MOV r7,#0
        ORRNE r7,r7,#1
        TST r8,#4
        ORRNE r7,r7,#2
        CMP r7,#2
        MOVEQ r0,#2
        MOVS r7,r7
        MOVEQ r0,#2
        CMP r7,#1
        MOVEQ r0,#1
        CMP r7,#3
        MOVEQ r0,#0
        MOV r1,#280
        MOV r2,#140
        ADD r0,r0,#88
        BL plot_letter_sprite

        SUB r0,r0,#88
        MOVS r5,r5
        BGT ignore_object_detail_option
        SUBS r0,r0,#1
        MOVLT r0,#2
        MOVS r0,r0
        ORREQ r8,r8,#2
        ORREQ r8,r8,#4
        CMP r0,#1
        ORREQ r8,r8,#2
        BICEQ r8,r8,#4
        CMP r0,#2
        BICEQ r8,r8,#2
        BICEQ r8,r8,#4
        STR r8,[r9]

        .ignore_object_detail_option
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .check_view_distance_option
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r10,[r12,#4]
        MOV r5,#3
        CMP r10,#2
        SUBEQ r5,r5,#1
        MOV r0,#129
        MVN r1,#73
        MOV r2,#255
        SWI "OS_Byte"
        MOV r3,#2
        CMP r1,#255
        SUBEQ r3,r3,#1
        CMP r2,#255
        SUBEQ r3,r3,#1
        MOVS r3,r3
        SUBEQ r5,r5,#1
        LDR r10,[r12,#8]
        MOVS r10,r10
        SUBEQ r5,r5,#1
        LDR r0,zmax%
        SUB r0,r0,#4096
        MOV r0,r0,ASR#10
        MOV r1,#280
        MOV r2,#180
        ADD r0,r0,#88
        BL plot_letter_sprite

        SUB r0,r0,#88
        MOVS r5,r5
        BGT ignore_view_dist_option
        SUBS r0,r0,#1
        MOVLT r0,#2
        MOV r0,r0,ASL#10
        ADD r0,r0,#4096
        STR r0,zmax%

        .ignore_view_dist_option
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .plot_shadow_of_object
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r10,world_data_header_base%
        LDR r12,[r10,#4]
        LDR r10,[r12,#8]
        LDR r9,[r12,#4]
        MOV r1,r0,ASL#3
        MOV r2,r0,ASL#2
        ADD r1,r1,r2
        ADD r10,r10,r1
        ADD r9,r9,r0,ASL#5
        LDR r8,camera_position_base%
        LDR r2,[r8,#4]
        RSB r2,r2,#0
        MOV r0,#2
        LDR r1,[r10],#8
        LDR r3,[r10]
        MOV r5,#0
        LDR r7,zmax%
        CMP r3,r7
        MOVGT r5,#1
        LDR r7,zmin%
        CMP r3,r7
        MOVLT r5,#1
        LDR r7,xmin%
        CMP r1,r7
        MOVLT r5,#1
        LDR r7,xmax%
        CMP r1,r7
        MOVGT r5,#1
        LDR r4,[r9,#20]
        LDR r6,[r8,#12]
        ADD r4,r4,r6
        MOVS r4,r4
        ADDLT r4,r4,#360
        CMP r4,#360
        SUBGE r4,r4,#360
        MOVS r5,r5
        BLEQ display_object

      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .calculate_world
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r10,world_data_header_base%
        LDR r12,[r10]

        .transform_gnd_data
        LDR r10,[r12]
        MOVS r10,r10
        BLE transform_world_objects

        LDR r9,camera_position_base%
        LDR r8,[r12,#4]
        LDR r7,[r12,#8]
        LDR r1,[r9,#12]
        MOVS r1,r1
        ADDLT r1,r1,#360
        CMP r1,#360
        SUBGE r1,r1,#360
        STR r1,[r9,#12]
        LDR r0,cosine_table_base%
        LDR r5,[r0,r1,ASL#2]
        LDR r0,sine_table_base%
        LDR r6,[r0,r1,ASL#2]

        .rotate_and_trans_gnd_data_loop
          LDR r9,camera_position_base%
          LDMIA r8!,{r0-r2}
          ADD r8,r8,#8
          LDR r3,[r9],#4
          SUB r0,r0,r3
          LDR r3,[r9],#4
          SUB r1,r1,r3
          LDR r3,[r9],#4
          SUB r2,r2,r3
          STR r1,[r7,#4]
          MOV r1,r2
          MUL r2,r0,r5
          MUL r3,r1,r6
          SUB r4,r2,r3
          MOV r4,r4,ASR#8
          STR r4,[r7],#8
          MUL r2,r1,r5
          MUL r3,r0,r6
          ADD r4,r2,r3
          MOV r4,r4,ASR#8
          STR r4,[r7],#4
          SUBS r10,r10,#1
        BGT rotate_and_trans_gnd_data_loop


        .plot_gnd_objects
        MOV r0,#0
        STR r0,world_display_status%
        LDR r10,camera_position_base%
        LDR r7,[r10,#12]
        LDR r10,[r12]
        LDR r9,[r12,#4]
        LDR r8,[r12,#8]
        ADD r9,r9,#12

        .plot_gnd_objects_loop
          LDMIA r8!,{r1-r3}
          LDMIA r9!,{r0,r4}
          ADD r9,r9,#12
          ADD r4,r4,r7
          MOVS r4,r4
          ADDLT r4,r4,#360
          CMP r4,#360
          SUBGE r4,r4,#360
          MOV r6,#0
          LDR r5,zmax%
          CMP r3,r5
          MOVGT r6,#1
          LDR r5,zmin%
          CMP r3,r5
          MOVLT r6,#1
          LDR r5,xmin%
          CMP r1,r5
          MOVLT r6,#1
          LDR r5,xmax%
          CMP r1,r5
          MOVGT r6,#1
          MOVS r6,r6
          MOV r5,#0
          BLEQ display_object

          SUBS r10,r10,#1
        BGT plot_gnd_objects_loop

        MOV r1,#2
        LDR r2,detail_level_adr%
        LDR r0,[r2]
        MOVS r0,r0,LSR#1
        SUBCS r1,r1,#1
        MOVS r0,r0,LSR#1
        SUBCC r1,r1,#1
        MOVS r1,r1
        BLEQ copy_even_line_fields_below_horizon


        .transform_world_objects
        LDR r10,world_data_header_base%
        LDR r12,[r10,#4]
        LDR r10,[r12]
        MOVS r10,r10
        BEQ end_calculate_world
        LDR r9,[r12,#4]
        LDR r8,[r12,#8]
        LDR r7,camera_position_base%
        LDR r1,[r7,#12]
        LDR r0,cosine_table_base%
        LDR r5,[r0,r1,ASL#2]
        LDR r0,sine_table_base%
        LDR r6,[r0,r1,ASL#2]

        .transform_world_objects_loop
          LDR r7,camera_position_base%
          LDMIA r9!,{r0-r2}
          ADD r9,r9,#20
          LDR r3,[r7],#4
          SUB r0,r0,r3
          LDR r3,[r7],#4
          SUB r1,r1,r3
          LDR r3,[r7],#4
          SUB r2,r2,r3
          STR r1,[r8,#4]
          MOV r1,r2
          MUL r2,r0,r5
          MUL r3,r1,r6
          SUB r4,r2,r3
          MOV r4,r4,ASR#8
          STR r4,[r8],#8
          MUL r2,r1,r5
          MUL r3,r0,r6
          ADD r4,r2,r3
          MOV r4,r4,ASR#8
          STR r4,[r8],#4
          SUBS r10,r10,#1
        BGT transform_world_objects_loop


        .compile_world_visible_objects_list
        LDR r10,[r12]
        LDR r9,[r12,#4]
        LDR r8,[r12,#8]
        LDR r7,[r12,#12]
        MOV r6,#0
        MOV r5,#0

        .compile_world_visible_objects_list_loop
          LDMIA r8!,{r0-r2}
          MOV r3,#0
          LDR r4,zmin%
          CMP r2,r4
          MOVLT r3,#1
          LDR r4,zmax%
          CMP r2,r4
          MOVGT r3,#1
          LDR r4,xmin%
          CMP r0,r4
          MOVLT r3,#1
          LDR r4,xmax%
          CMP r0,r4
          MOVGT r3,#1
          MOVS r3,r3
          ADDEQ r5,r5,#1
          STREQ r6,[r7],#4
          ADD r6,r6,#1
          SUBS r10,r10,#1
        BGT compile_world_visible_objects_list_loop

        STR r5,[r12,#16]
        MOV r0,#0
        BL plot_shadow_of_object

        MOV r0,#1
        BL plot_shadow_of_object

        MOV r0,#2
        BL plot_shadow_of_object

        MOV r0,#3
        BL plot_shadow_of_object

        MOV r0,#4
        BL plot_shadow_of_object


        .bubble_sort_world_objects
        LDR r10,[r12,#8]
        LDR r9,[r12,#16]
        CMP r9,#1
        BEQ plot_world_objects
        MOVS r9,r9
        BLE end_calculate_world


        .bubble_sort_world_objects_outer
        LDR r8,[r12,#12]
        LDR r7,[r12,#16]
        SUB r7,r7,#1

        .bubble_sort_world_objects_inner
        LDMIA r8,{r0,r1}
        MOV r2,r0,ASL#3
        MOV r3,r0,ASL#2
        ADD r2,r2,r3
        ADD r4,r10,r2
        MOV r2,r1,ASL#3
        MOV r3,r1,ASL#2
        ADD r2,r2,r3
        ADD r5,r10,r2
        LDR r2,[r4,#8]
        LDR r3,[r5,#8]
        CMP r2,r3
        STRGT r0,[r8]
        STRGT r1,[r8,#4]
        STRLE r1,[r8]
        STRLE r0,[r8,#4]
        ADD r8,r8,#4
        SUBS r7,r7,#1
        BGT bubble_sort_world_objects_inner
        SUBS r9,r9,#1
        BGT bubble_sort_world_objects_outer

        .plot_world_objects
        MOV r0,#1
        STR r0,world_display_status%
        LDR r10,camera_position_base%
        LDR r5,[r10,#12]
        LDR r10,[r12,#16]
        MOVS r10,r10
        BEQ end_calculate_world
        LDR r7,[r12,#12]

        .plot_world_objects_loop
          LDR r9,[r12,#4]
          LDR r8,[r12,#8]
          LDR r6,[r7],#4
          ADD r9,r9,r6,ASL#5
          MOV r0,r6,ASL#2
          MOV r1,r6,ASL#3
          ADD r0,r0,r1
          ADD r8,r8,r0
          LDR r4,[r9,#20]
          MOVS r4,r4
          ADDLT r4,r4,#360
          STRLT r4,[r9,#20]
          CMP r4,#360
          SUBGE r4,r4,#360
          STRGE r4,[r9,#20]
          ADD r4,r4,r5
          MOVS r4,r4
          ADDLT r4,r4,#360
          CMP r4,#360
          SUBGE r4,r4,#360
          MOV r1,#1
          CMP r4,#90
          SUBLE r1,r1,#1
          CMP r4,#272
          SUBGE r1,r1,#1
          MOVS r1,r1
          BLE smoke_plotted_after_craft

          LDR r0,[r9,#12]
          MOVS r0,r0
          BLT dont_plot_this_world_object

          CMP r6,#4
          MOVLE r0,r6,ASL#1
          BLLE calculate_smoke_stream

          CMP r6,#4
          ADDLE r0,r0,#1
          BLLE calculate_smoke_stream


          .smoke_plotted_after_craft
          LDMIA r8,{r1-r3}
          LDR r0,[r9,#12]
          MOVS r0,r0
          BLT dont_plot_this_world_object

          STMFA (sp)!,{r5}
            LDR r5,[r9,#24]
            MOVS r5,r5
            ADDLT r5,r5,#360
            CMP r5,#360
            SUBGE r5,r5,#360
            STR r5,[r9,#24]
            BL display_object

          LDMFA (sp)!,{r5}
          MOV r1,#1
          CMP r4,#90
          SUBLE r1,r1,#1
          CMP r4,#272
          SUBGE r1,r1,#1
          MOVS r1,r1
          BGT dont_plot_this_world_object
          CMP r6,#4
          MOVLE r0,r6,ASL#1
          BLLE calculate_smoke_stream

          CMP r6,#4
          ADDLE r0,r0,#1
          BLLE calculate_smoke_stream


          .dont_plot_this_world_object
          SUBS r10,r10,#1
        BGT plot_world_objects_loop

        MOV r1,#2
        LDR r2,detail_level_adr%
        LDR r0,[r2]
        MOVS r0,r0,LSR#1
        SUBCS r1,r1,#1
        MOVS r0,r0,LSR#1
        SUBCS r1,r1,#1
        MOVS r1,r1
        BLEQ copy_even_line_fields_full_screen


        .end_calculate_world
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .world_display_status% EQUD 0

      .display_object
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r10,object_header_list_base%
        MOVS r0,r0
        BGE ignore_groundnets
        RSB r7,r0,#0
        SUB r7,r7,#1
        LDR r12,[r10]
        MOV r10,#720
        LDR r9,world_data_header_base%
        LDR r8,[r9,#12]
        MUL r6,r7,r10
        ADD r8,r8,r6
        STR r8,[r12,#32]
        B groundnets_done

        .ignore_groundnets
        LDR r12,[r10,r0,ASL#2]

        .groundnets_done
        ADD r10,r12,#36
        STMIA r10,{r1-r5}
        LDR r0,[r12]
        MOV r0,r0,LSR#1
        MOVS r0,r0,LSR#1
        BCS rotate_yandz_original_object_data

        .rotate_original_object_data
        LDR r10,[r12,#60]
        CMP r4,r10
        BEQ project_trans_object_data
        STRNE r4,[r12,#60]
        LDR r10,[r12,#8]
        LDR r9,[r12,#16]
        LDR r8,[r12,#20]
        LDR r0,cosine_table_base%
        LDR r6,[r0,r4,ASL#2]
        LDR r0,sine_table_base%
        LDR r7,[r0,r4,ASL#2]

        .rotate_object_loop
          LDMIA r9!,{r0-r2}
          STR r1,[r8,#4]
          MOV r1,r2
          MUL r2,r0,r6
          MUL r3,r1,r7
          SUB r4,r2,r3
          MOV r4,r4,ASR#8
          MUL r2,r1,r6
          MUL r3,r0,r7
          ADD r5,r2,r3
          MOV r5,r5,ASR#8
          STR r4,[r8],#8
          STR r5,[r8],#4
          SUBS r10,r10,#1
        BGT rotate_object_loop


        .project_trans_object_data
        LDR r10,[r12,#8]
        LDR r9,[r12,#20]
        LDR r8,[r12,#24]
        ADD r7,r12,#36
        LDMIA r7,{r3-r5}

        .project_object_loop
          LDMIA r9!,{r0-r2}
          ADD r0,r0,r3
          ADD r1,r1,r4
          ADD r2,r2,r5
          MOV r0,r0,ASL#8
          MOV r1,r1,ASL#8
          FNswm_rdiv_act(0,2,6)
          FNswm_rdiv_act(1,2,7)
          ADD r6,r6,#160
          ADD r7,r7,#128
          STMIA r8!,{r6,r7}
          SUBS r10,r10,#1
        BGT project_object_loop


        .check_object_points
        LDR r10,[r12,#8]
        LDR r9,[r12,#20]
        LDR r8,[r12,#28]
        ADD r9,r9,#8

        .check_object_points_loop
          LDR r0,[r9],#12
          LDR r2,[r12,#44]
          ADD r0,r0,r2
          LDR r1,[r8]
          CMP r0,#2
          ORRLT r1,r1,#1<<31
          BICGE r1,r1,#1<<31
          STR r1,[r8],#4
          SUBS r10,r10,#1
        BGT check_object_points_loop


        .render_object
        LDR r9,polygon_workspace_base%
        LDR r10,[r12,#12]
        LDR r8,[r12,#24]
        LDR r7,[r12,#32]

        .render_object_loop
          LDR r0,[r7],#4
          STR r0,[r9,#32]
          LDMIA r7!,{r0-r3}
          LDR r6,[r12,#28]
          LDR r4,[r6,r0,ASL#2]
          MOVS r4,r4
          BLT object_poly_out_of_range

          LDR r4,[r6,r1,ASL#2]
          MOVS r4,r4
          BLT object_poly_out_of_range

          LDR r4,[r6,r2,ASL#2]
          MOVS r4,r4
          BLT object_poly_out_of_range

          LDR r4,[r6,r3,ASL#2]
          MOVS r4,r4
          BLT object_poly_out_of_range

          ADD r6,r8,r0,ASL#3
          LDMIA r6,{r4,r5}
          STMIA r9!,{r4,r5}
          ADD r6,r8,r1,ASL#3
          LDMIA r6,{r4,r5}
          STMIA r9!,{r4,r5}
          ADD r6,r8,r2,ASL#3
          LDMIA r6,{r4,r5}
          STMIA r9!,{r4,r5}
          ADD r6,r8,r3,ASL#3
          LDMIA r6,{r4,r5}
          STMIA r9!,{r4,r5}
          LDR r9,polygon_workspace_base%
          LDR r0,[r9,#32]
          LDR r4,[r12,#0]
          MOVS r4,r4,LSR#1
          BCS perform_hidden_area_removal

          .polygon_is_visible
          MOVS r0,r0
          BLT object_polygon_not_textured

          LDR r4,world_display_status%
          MOVS r4,r4
          BNE world_object_texture
          LDR r5,detail_level_adr%
          LDR r4,[r5]
          MOVS r4,r4,LSR#1
          BLCS tmap_ilace

          LDR r5,detail_level_adr%
          LDR r4,[r5]
          MOVS r4,r4,LSR#1
          BLCC tmap_vhd

          B object_poly_out_of_range

          .world_object_texture
          LDR r5,detail_level_adr%
          LDR r4,[r5]
          MOV r4,r4,LSR#1
          MOVS r4,r4,LSR#1
          BLCS tmap_ilace

          LDR r5,detail_level_adr%
          LDR r4,[r5]
          MOV r4,r4,LSR#1
          MOVS r4,r4,LSR#1
          BLCC tmap_vhd

          B object_poly_out_of_range

          .object_polygon_not_textured
          RSB r0,r0,#0
          STR r0,[r9,#32]
          BL plain_quadragon


          .object_poly_out_of_range
          SUBS r10,r10,#1
        BGT render_object_loop


        .end_display_object
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .rotate_yandz_original_object_data
      LDR r10,[r12,#8]
      LDR r9,[r12,#16]
      LDR r8,[r12,#20]
      LDR r4,[r12,#52]
      LDR r0,cosine_table_base%
      LDR r6,[r0,r4,ASL#2]
      LDR r0,sine_table_base%
      LDR r7,[r0,r4,ASL#2]

      .rotate_object_aroundz_loop
        LDMIA r9!,{r0-r2}
        STR r2,[r8,#8]
        MUL r2,r0,r6
        MUL r3,r1,r7
        SUB r4,r2,r3
        MOV r4,r4,ASR#8
        MUL r2,r1,r6
        MUL r3,r0,r7
        ADD r5,r2,r3
        MOV r5,r5,ASR#8
        STMIA r8!,{r4,r5}
        ADD r8,r8,#4
        SUBS r10,r10,#1
      BGT rotate_object_aroundz_loop

      LDR r10,[r12,#8]
      LDR r9,[r12,#20]
      LDR r4,[r12,#48]
      LDR r0,cosine_table_base%
      LDR r6,[r0,r4,ASL#2]
      LDR r0,sine_table_base%
      LDR r7,[r0,r4,ASL#2]

      .rotate_object_aroundy_loop
        LDR r0,[r9]
        LDR r1,[r9,#8]
        MUL r2,r0,r6
        MUL r3,r1,r7
        SUB r4,r2,r3
        MOV r4,r4,ASR#8
        MUL r2,r1,r6
        MUL r3,r0,r7
        ADD r5,r2,r3
        MOV r5,r5,ASR#8
        STR r4,[r9],#8
        STR r5,[r9],#4
        SUBS r10,r10,#1
      BGT rotate_object_aroundy_loop

      B project_trans_object_data

      .perform_hidden_area_removal
      STMFA (sp)!,{r0-r8}
        LDMIA r9,{r0-r5}
        SUB r6,r0,r2
        SUB r7,r5,r3
        MUL r8,r6,r7
        SUB r6,r1,r3
        SUB r7,r4,r2
        MUL r5,r6,r7
        SUB r0,r8,r5
        MOVS r0,r0
      LDMFA (sp)!,{r0-r8}
      BGT polygon_is_visible
      BLE object_poly_out_of_range

    ]

  NEXT pass%


ENDPROC


DEF PROCassemble_camera_control_routines

  LOCAL adr%,pass%,link,sp
  link=14
  sp=11
  adr%=P%

  FOR pass%=8 TO10 STEP2
    P%=adr%
    L%=code% +len%

    [OPT pass%

      .polygon_workspace_base% EQUD polygon_workspace%

      .swm_rdiv_list_base% EQUD swm_rdiv_list%

      .sine_table_base% EQUD sine_table%

      .cosine_table_base% EQUD cosine_table%

      .tangent_table_base% EQUD tangent_table%

      .arc_tangent_table_base% EQUD arc_tangent_table%

      .camera_position_base% EQUD camera_position%

      .object_header_list_base% EQUD object_header_list%

      .world_data_header_base% EQUD world_data_header%

      .detail_level_adr% EQUD detail_level_status%

      .tracking_camera
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r12,camera_position_base%
        LDR r0,[r12,#16]
        LDR r12,world_data_header_base%
        LDR r10,[r12,#4]
        LDR r12,[r10,#4]
        ADD r12,r12,r0,ASL#5
        LDR r4,[r12]
        LDR r5,[r12,#8]
        LDR r12,camera_position_base%

        .tracking_camera_position_reset
        LDR r0,[r12]
        LDR r1,[r12,#8]
        MOV r9,#1
        MOV r10,#0
        SUBS r2,r4,r0
        ORRGE r10,r10,#1
        RSBLT r2,r2,#0
        CMP r2,#2048
        SUBGT r9,r9,#1
        SUBS r3,r5,r1
        ORRGE r10,r10,#2
        RSBLT r3,r3,#0
        CMP r3,#2048
        SUBGT r9,r9,#1
        MOVS r9,r9
        BLE reset_tracking_camera_position

        MOVS r2,r2
        MOVEQ r5,#90
        BEQ outofrange_tangent_value
        MOVS r3,r3
        MOVEQ r5,#0
        BEQ outofrange_tangent_value
        MOV r3,r3,ASL#6
        FNswm_rdiv_act(3,2,4)
        CMP r4,#3648
        MOVGT r5,#90
        BGT outofrange_tangent_value
        MOVS r4,r4
        MOVLT r5,#90
        BLT outofrange_tangent_value

        LDR r9,arc_tangent_table_base%
        LDR r5,[r9,r4,ASL#2]

        .outofrange_tangent_value
        RSB r5,r5,#90
        CMP r10,#1
        RSBEQ r5,r5,#180
        CMP r10,#0
        ADDEQ r5,r5,#181
        CMP r10,#2
        RSBEQ r5,r5,#360
        MOVS r5,r5
        ADDLT r5,r5,#360
        CMP r5,#360
        SUBGE r5,r5,#360
        STR r5,[r12,#12]

        .end_tracking_camera
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .reset_tracking_camera_position
      TST r10,#1
      ADDNE r0,r4,#800
      SUBEQ r0,r4,#800
      TST r10,#2
      ADDNE r1,r5,#800
      SUBEQ r1,r5,#800
      STR r0,[r12]
      STR r1,[r12,#8]
      B tracking_camera_position_reset

      .camera_control
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r12,camera_position_base%
        LDMIA r12,{r7-r10}
        SWI "OS_Mouse"
        MOV r0,r0,ASR#7
        SUB r0,r0,#5
        ADD r10,r10,r0
        MOVS r10,r10
        ADDLT r10,r10,#360
        CMP r10,#360
        SUBGE r10,r10,#360
        MOV r4,#0
        MOV r5,r1,ASR#4
        SUB r5,r5,#32
        LDR r0,cosine_table_base%
        LDR r1,[r0,r10,ASL#2]
        LDR r0,sine_table_base%
        LDR r2,[r0,r10,ASL#2]
        MUL r0,r4,r1
        MUL r3,r5,r2
        SUB r0,r0,r3
        MOV r0,r0,ASR#8
        MUL r3,r5,r1
        MUL r6,r4,r2
        ADD r3,r3,r6
        MOV r3,r3,ASR#8
        SUB r7,r7,r0
        ADD r9,r9,r3
        STMIA r12,{r7-r10}
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .gl_key% EQUD 1

      .focus_camera_on_object
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r10,world_data_header_base%
        LDR r9,camera_position_base%
        LDR r0,[r9,#32]
        LDR r2,[r9,#40]
        SUBS r1,r2,r0
        RSBLT r1,r1,#0
        MOVS r1,r1,ASR#2
        MOVEQ r1,#1
        CMP r1,#12
        MOVGT r1,#12
        CMP r0,r2
        SUBGT r0,r0,r1
        ADDLT r0,r0,r1
        STR r0,[r9,#32]
        LDR r0,[r9,#4]
        LDR r1,[r9,#48]
        SUBS r2,r1,r0
        RSBLT r2,r2,#0
        MOVS r2,r2,ASR#2
        MOVEQ r2,#1
        CMP r2,#4
        MOVGT r2,#4
        CMP r0,r1
        ADDLT r0,r0,r2
        SUBGT r0,r0,r2
        STR r0,[r9,#4]
        LDR r0,[r9,#16]
        LDR r12,[r10,#4]
        LDR r10,[r12,#4]
        ADD r10,r10,r0,ASL#5
        LDR r7,[r10,#20]
        LDR r8,[r9,#28]
        MOVS r8,r8
        ADDLT r8,r8,#360
        CMP r8,#360
        SUBGE r8,r8,#360
        STR r8,[r9,#28]
        ADD r7,r7,r8
        MOVS r7,r7
        ADDLT r7,r7,#360
        CMP r7,#360
        SUBGE r7,r7,#360
        STR r7,[r9,#20]
        LDR r6,[r9,#36]
        SUBS r6,r6,r7
        MOV r5,#0
        ORRGE r5,r5,#1
        MOVS r6,r6
        RSBLT r6,r6,#0
        CMP r6,#180
        ORRGE r5,r5,#2
        TST r5,#2
        RSBNE r6,r6,#360
        SUBNE r6,r6,#1
        MOVS r4,r6,ASR#2
        MOVEQ r4,#1
        CMP r4,#8
        MOVGT r4,#8
        CMP r5,#1
        RSBEQ r4,r4,#0
        CMP r5,#2
        RSBEQ r4,r4,#0
        LDR r8,[r9,#36]
        CMP r8,r7
        ADDNE r8,r8,r4
        MOVS r8,r8
        ADDLT r8,r8,#360
        CMP r8,#360
        SUBGE r8,r8,#360
        MOV r0,#129
        MVN r1,#105
        MOV r2,#255
        SWI "OS_Byte"
        MOV r3,#2
        CMP r1,#255
        SUBEQ r3,r3,#1
        CMP r2,#255
        SUBEQ r3,r3,#1
        MOVS r3,r3
        MOVGTS r3,#1
        LDR r6,[r10,#20]
        BNE glance_key_not_pressed
        MOV r8,#180
        ADD r8,r8,r6

        .glance_key_not_pressed
        LDR r4,gl_key%
        CMP r4,r3
        MOVLT r8,#0
        ADDLT r8,r8,r6
        MOVS r8,r8
        ADDLT r8,r8,#360
        CMP r8,#360
        SUBGE r8,r8,#360
        STR r3,gl_key%
        RSB r7,r8,#360
        SUB r7,r7,#1
        STR r7,[r9,#12]
        STR r8,[r9,#36]
        LDR r7,cosine_table_base%
        LDR r5,[r7,r8,ASL#2]
        LDR r7,sine_table_base%
        LDR r6,[r7,r8,ASL#2]
        MOV r3,#0
        LDR r4,[r9,#32]
        MUL r7,r3,r5
        MUL r8,r4,r6
        SUB r7,r7,r8
        MOV r2,r7,ASR#8
        MUL r7,r4,r5
        MUL r8,r3,r6
        ADD r7,r7,r8
        MOV r7,r7,ASR#8
        LDR r0,[r10]
        LDR r1,[r10,#8]
        ADD r0,r0,r2
        ADD r1,r1,r7
        STR r0,[r9],#8
        STR r1,[r9]
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link
    ]

  NEXT pass%


ENDPROC


DEF PROCassemble_graphical_display_code

  LOCAL adr%,pass%,link,sp
  LOCAL rt,nu,test,comp,st,sh,mult
  rt=0
  nu=1
  test=2
  st=3
  comp=4
  sh=5
  mult=6
  link=14
  sp=11
  adr%=P%

  FOR pass%=8 TO10 STEP2
    P%=adr%
    L%=code% +len%

    [OPT pass%

      .polygon_workspace_base% EQUD polygon_workspace%

      .swm_rdiv_list_base% EQUD swm_rdiv_list%

      .sine_table_base% EQUD sine_table%

      .cosine_table_base% EQUD cosine_table%

      .tangent_table_base% EQUD tangent_table%

      .arc_tangent_table_base% EQUD arc_tangent_table%

      .camera_position_base% EQUD camera_position%

      .object_header_list_base% EQUD object_header_list%

      .world_data_header_base% EQUD world_data_header%

      .detail_level_adr% EQUD detail_level_status%

      .world_data_header_base% EQUD world_data_header%

      .camera_position_base% EQUD camera_position%

      .show_damage_meter
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r10,world_data_header_base%
        LDR r12,[r10,#8]
        LDR r9,camera_position_base%
        LDR r8,[r9,#16]
        ADD r12,r12,r8,ASL#7
        LDR r0,[r12,#92]
        LDR r1,[r12,#96]
        CMP r0,r1
        ADDLT r0,r0,#1
        SUBGT r0,r0,#1
        STR r0,[r12,#92]
        MOV r12,r0,ASR#3
        CMP r12,#19
        MOVGE r12,#19
        MOV r10,#0
        ANDr10,r0,#7
        MOVGT r10,#0
        MOV r9,#2
        MOVS r10,r10
        SUBLE r9,r9,#1
        MOVS r12,r12
        SUBLE r9,r9,#1
        MOVS r9,r9
        BEQ end_show_damage_meter
        MOV r0,#39
        MOV r1,#236
        MOV r2,#208
        MOVS r12,r12
        BLE no_full_damage_bits


        .show_damage_meter_full_loop
          BL plot_mini_sprite

          ADD r1,r1,#4
          SUBS r12,r12,#1
        BGT show_damage_meter_full_loop


        .no_full_damage_bits
        MOVS r10,r10
        BEQ end_show_damage_meter
        ADD r0,r10,#32
        BL plot_mini_sprite


        .end_show_damage_meter
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .show_speed_meter
      STMFA (sp)!,{r0-r10,r12,link}
        CMP r0,#160
        MOVGT r0,#160
        BL jet_sound_effect

        MOV r12,r0,ASR#3
        MOV r10,#0
        ANDr10,r0,#7
        MOV r9,#2
        MOVS r10,r10
        SUBLE r9,r9,#1
        MOVS r12,r12
        SUBLE r9,r9,#1
        MOVS r9,r9
        BEQ end_show_speed_meter
        MOV r0,#7
        MOV r1,#236
        MOV r2,#228
        MOVS r12,r12
        BLE no_full_bits


        .show_speed_meter_full_loop
          MOV r0,#7
          MOV r2,#228
          BL plot_mini_sprite

          MOV r0,#31
          MOV r2,#236
          BL plot_mini_sprite

          ADD r1,r1,#4
          SUBS r12,r12,#1
        BGT show_speed_meter_full_loop


        .no_full_bits
        MOV r0,r10
        MOV r2,#228
        BL plot_mini_sprite

        ADD r0,r10,#24
        MOV r2,#236
        BL plot_mini_sprite


        .end_show_speed_meter
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .jet_sound_effect
      STMFA (sp)!,{r0-r10,r12,link}
        MOV r5,r0
        LDR r12,world_data_header_base%
        LDR r10,[r12,#8]
        LDR r9,[r10,#32]
        MOV r3,r0
        MOV r0,#2
        MOVS r9,r9
        MOVEQ r1,#3
        MOVNE r1,#2
        MOVNE r3,r3,ASR#1
        MOV r2,#15
        BL play_sample


        .end_jet_sound_effect
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .show_lap_timer
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r12,world_data_header_base%
        LDR r10,[r12,#8]
        LDR r9,camera_position_base%
        LDR r8,[r9,#16]
        ADD r10,r10,r8,ASL#7
        LDR r0,[r10,#80]
        MOV r1,#296
        MOV r2,#16
        BL plot_letter_sprite

        MOV r0,#87
        MOV r1,#296
        MOV r2,#1
        BL plot_letter_sprite

        LDR r4,[r10,#84]
        MOV r0,#37
        MOV r1,#152
        MOV r2,#0
        BL plot_letter_sprite

        MOV r5,#1
        MOV r6,#10
        CMP r4,#100
        ADDGE r5,r5,#1
        CMP r4,#1000
        ADDGE r5,r5,#1
        CMP r5,#1
        MOVEQ r1,#152
        CMP r5,#2
        MOVEQ r1,#160
        CMP r5,#3
        MOVEQ r1,#172
        FNint_div(4,6,7,0)
        FNint_div(7,6,4,0)
        MOV r2,#16
        BL plot_letter_sprite

        SUB r1,r1,#20
        CMP r5,#1
        BLE end_show_lap_timer

        FNint_div(4,6,7,0)
        MOV r2,#16
        MOVS r0,r0
        BL plot_letter_sprite

        SUB r1,r1,#20
        CMP r5,#2
        BLE end_show_lap_timer

        FNint_div(7,6,4,0)
        MOV r2,#16
        BL plot_letter_sprite


        .end_show_lap_timer
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .show_lastlap
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r12,world_data_header_base%
        LDR r10,[r12,#8]
        LDR r8,[r10,#76]
        LDR r7,[r10,#80]
        MOV r4,#2
        CMP r7,#2
        SUBGE r4,r4,#1
        CMP r8,#1
        SUBEQ r4,r4,#1
        MOVS r4,r4
        BLEQ display_last_lap_time

      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .world_data_header_base% EQUD world_data_header%

      .calculate_craft_speed
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r12,world_data_header_base%
        LDR r10,[r12,#8]
        LDR r9,camera_position_base%
        LDR r8,[r9,#16]
        ADD r10,r10,r8,ASL#7
        LDR r0,[r10,#12]
        LDR r1,[r10,#20]
        MOV r0,r0,ASR#10
        MOV r1,r1,ASR#10
        MUL r2,r0,r0
        MUL r3,r1,r1
        ADD r1,r2,r3
        CMP r1,#2
        BLGT calc_square_root

        CMP r1,#2
        BLGT show_speed_meter

        MOV r0,#80
        MOV r1,#204
        MOV r2,#228
        BL plot_letter_sprite

        MOV r0,#81
        MOV r1,#220
        MOV r2,#228
        BL plot_letter_sprite

        MOV r0,#85
        MOV r1,#204
        MOV r2,#205
        BL plot_letter_sprite

        MOV r0,#86
        MOV r1,#220
        BL plot_letter_sprite

      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .calc_square_root
      STMFA (sp)!,{r1-r10,r12,link}
        MOV rt,nu,LSR#1
        MOV st,rt,LSR#1
        CMP nu,#&15000
        MOVGT sh,#1
        MOVLT sh,#0
        CMPGT nu,#&2D000
        ADDGT sh,sh,#1
        CMPGT nu,#&5A000
        ADDGT sh,sh,#1
        CMPGT nu,#&B5000
        ADDGT sh,sh,#1
        CMPGT nu,#&168000
        ADDGT sh,sh,#1
        CMPGT nu,#&2D4000
        ADDGT sh,sh,#1
        CMPGT nu,#&5A0000
        ADDGT sh,sh,#1
        CMPGT nu,#&B40000
        ADDGT sh,sh,#1
        MOV comp,nu,LSR sh
        MOV comp,comp,LSR sh

        .squ_iter_loop
          MOV mult,rt,LSR sh
          MUL test,mult,mult
          CMP test,comp
          ADDLT rt,rt,st
          SUBGT rt,rt,st
          MOVGTS st,st,LSR#1
        BNE squ_iter_loop

      LDMFA (sp)!,{r1-r10,r12,link}
      MOV PC,link

      .display_last_lap_time
      STMFA (sp)!,{r0-r10,r12,link}
        MOV r0,#82
        MOV r1,#140
        MOV r2,#40
        BL plot_letter_sprite

        MOV r0,#83
        ADD r1,r1,#16
        MOV r2,#40
        BL plot_letter_sprite

        MOV r0,#84
        ADD r1,r1,#16
        MOV r2,#40
        BL plot_letter_sprite

        LDR r12,world_data_header_base%
        LDR r10,[r12,#8]
        LDR r9,[r10,#88]
        MOV r8,#10
        FNint_div(9,8,6,7)
        ADD r0,r7,#40
        MOV r1,#184
        MOV r2,#56
        BL plot_letter_sprite

        MOV r0,#78
        SUB r1,r1,#16
        MOV r2,#56
        BL plot_letter_sprite

        FNint_div(6,8,9,7)
        ADD r0,r7,#40
        SUB r1,r1,#16
        MOV r2,#56
        BL plot_letter_sprite

        FNint_div(9,8,6,7)
        ADD r0,r7,#40
        SUB r1,r1,#20
        MOV r2,#56
        BL plot_letter_sprite

        FNint_div(6,8,9,7)
        MOVS r7,r7
        BEQ end_show_last_lap_time
        ADD r0,r7,#40
        SUB r1,r1,#20
        MOV r2,#56
        BL plot_letter_sprite


        .end_show_last_lap_time
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .camera_position_base% EQUD camera_position%

      .display_craft_position
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r12,world_data_header_base%
        LDR r10,[r12,#8]
        LDR r12,camera_position_base%
        LDR r9,[r12,#16]
        ADD r12,r10,r9,ASL#7
        MOV r0,#94
        MOV r1,#28
        MOV r2,#0
        BL plot_letter_sprite

        LDR r0,[r12,#116]
        MOV r1,#20
        MOV r2,#16
        BL plot_letter_sprite

        ADD r1,r1,#20
        CMP r0,#5
        SUBGE r0,r0,#1
        ADD r0,r0,#175
        BL plot_letter_sprite

      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .display_missile_icons
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r12,world_data_header_base%
        LDR r10,[r12,#8]
        LDR r4,[r10,#120]
        MOVS r4,r4
        BLE end_display_missile_icons

        MOV r0,#95
        MOV r2,#188
        MOV r1,#300

        .display_missile_icons_loop
          BL plot_letter_sprite

          SUB r1,r1,#20
          SUBS r4,r4,#1
        BGT display_missile_icons_loop


        .end_display_missile_icons
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .plot_ground
      STMFA (sp)!,{r0-r10,r12,link}
        MOV r0,#132
        MOV r1,#2
        MOV r2,#34
        BL full_length_rect

        MOV r0,#134
        MOV r1,#4
        MOV r2,#33
        BL full_length_rect

        MOV r0,#138
        MOV r1,#117
        MOV r2,#32
        BL full_length_rect

        MOV r0,#255
        MOV r1,#1
        MOV r2,#0
        BL full_length_rect

      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .plot_sky
      STMFA (sp)!,{r0-r10,r12,link}
        MOV r0,#128
        MOV r1,#4
        MOV r2,#219
        BL full_length_rect

        MOV r0,#124
        MOV r1,#4
        MOV r2,#218
        BL full_length_rect

        MOV r0,#120
        MOV r1,#4
        MOV r2,#217
        BL full_length_rect

        MOV r0,#116
        MOV r1,#4
        MOV r2,#216
        BL full_length_rect

        MOV r0,#112
        MOV r1,#4
        MOV r2,#167
        BL full_length_rect

        MOV r0,#108
        MOV r1,#4
        MOV r2,#166
        BL full_length_rect

        MOV r0,#104
        MOV r1,#4
        MOV r2,#165
        BL full_length_rect

        MOV r0,#100
        MOV r1,#4
        MOV r2,#164
        BL full_length_rect

        MOV r0,#112
        MOV r1,#4
        MOV r2,#167
        BL full_length_rect

        MOV r0,#108
        MOV r1,#4
        MOV r2,#166
        BL full_length_rect

        MOV r0,#104
        MOV r1,#4
        MOV r2,#165
        BL full_length_rect

        MOV r0,#100
        MOV r1,#4
        MOV r2,#164
        BL full_length_rect

        MOV r0,#96
        MOV r1,#4
        MOV r2,#11
        BL full_length_rect

        MOV r0,#92
        MOV r1,#4
        MOV r2,#10
        BL full_length_rect

        MOV r0,#88
        MOV r1,#4
        MOV r2,#9
        BL full_length_rect

        MOV r0,#0
        MOV r1,#88
        MOV r2,#8
        BL full_length_rect

      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .plot_ground_ilace
      STMFA (sp)!,{r0-r10,r12,link}
        MOV r0,#132
        MOV r1,#2
        MOV r2,#34
        BL full_length_rect_ilace

        MOV r0,#134
        MOV r1,#4
        MOV r2,#33
        BL full_length_rect_ilace

        MOV r0,#138
        MOV r1,#118
        MOV r2,#32
        BL full_length_rect_ilace

      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .plot_sky_ilace
      STMFA (sp)!,{r0-r10,r12,link}
        MOV r0,#128
        MOV r1,#4
        MOV r2,#219
        BL full_length_rect_ilace

        MOV r0,#124
        MOV r1,#4
        MOV r2,#218
        BL full_length_rect_ilace

        MOV r0,#120
        MOV r1,#4
        MOV r2,#217
        BL full_length_rect_ilace

        MOV r0,#116
        MOV r1,#4
        MOV r2,#216
        BL full_length_rect_ilace

        MOV r0,#112
        MOV r1,#4
        MOV r2,#167
        BL full_length_rect_ilace

        MOV r0,#108
        MOV r1,#4
        MOV r2,#166
        BL full_length_rect_ilace

        MOV r0,#104
        MOV r1,#4
        MOV r2,#165
        BL full_length_rect_ilace

        MOV r0,#100
        MOV r1,#4
        MOV r2,#164
        BL full_length_rect_ilace

        MOV r0,#112
        MOV r1,#4
        MOV r2,#167
        BL full_length_rect_ilace

        MOV r0,#108
        MOV r1,#4
        MOV r2,#166
        BL full_length_rect_ilace

        MOV r0,#104
        MOV r1,#4
        MOV r2,#165
        BL full_length_rect_ilace

        MOV r0,#100
        MOV r1,#4
        MOV r2,#164
        BL full_length_rect_ilace

        MOV r0,#96
        MOV r1,#4
        MOV r2,#11
        BL full_length_rect_ilace

        MOV r0,#92
        MOV r1,#4
        MOV r2,#10
        BL full_length_rect_ilace

        MOV r0,#88
        MOV r1,#4
        MOV r2,#9
        BL full_length_rect_ilace

        MOV r0,#0
        MOV r1,#88
        MOV r2,#8
        BL full_length_rect_ilace

      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link
    ]

  NEXT pass%


ENDPROC


DEF PROCassemble_poly_renderers

  LOCAL adr%,pass%,link,sp
  link=14
  sp=11
  clipx%=320
  clipy%=256
  adr%=P%

  FOR pass%=8 TO10 STEP2
    P%=adr%
    L%=code% +len%

    [OPT pass%

      .swm_rdiv_list_base% EQUD swm_rdiv_list%

      .sine_table_base% EQUD sine_table%

      .cosine_table_base% EQUD cosine_table%

      .tangent_table_base% EQUD tangent_table%

      .arc_tangent_table_base% EQUD arc_tangent_table%

      .camera_position_base% EQUD camera_position%

      .texturemap_divisions_base% EQUD texturemap_divisions%

      .detail_level_adr% EQUD detail_level_status%

      .xcoord_state% EQUD 0

      .polygon_workspace_base% EQUD polygon_workspace%

      .scaled_sprite
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r12,texturemap_divisions_base%
        SUB r0,r0,r2,ASR#1
        SUB r1,r1,r2,ASR#1
        MOV r10,r2
        LDR r9,[r12,r2,ASL#2]
        MOV r8,#0

        .plot_scaled_sprite_loop
          MOV r3,r8,ASR#8
          BL scaled_spr_scan_line

          ADD r1,r1,#1
          ADD r8,r8,r9
          SUBS r10,r10,#1
        BGT plot_scaled_sprite_loop

      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .zoom_spr_info%
      EQUD 124
      EQUD 512

      .register_zoom_sprite
      STMFA (sp)!,{r0-r10,r12,link}
        ADR r12,zoom_spr_info%
        MOV r1,#4
        STMIA r12,{r0,r1}
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .clear_zoom_sprite
      STMFA (sp)!,{r0-r10,r12,link}
        ADR r12,zoom_spr_info%
        MOV r0,#0
        MOV r1,#160
        STMIA r12,{r0,r1}
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .plot_zoom_sprite
      STMFA (sp)!,{r0-r10,r12,link}
        ADR r12,zoom_spr_info%
        LDMIA r12,{r4,r5}
        MOV r2,r5
        CMP r2,#140
        MOV r0,#160
        MOV r1,#128
        BLLT split_sprite

        CMP r2,#140
        ADDLT r5,r5,#8
        STR r5,[r12,#4]
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .split_sprite
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r12,texturemap_divisions_base%
        SUB r0,r0,r2,ASR#1
        SUB r1,r1,r2,ASR#1
        MOV r10,#32
        FNswm_rdiv_sca8(2,10,9)
        MOV r8,r1,ASL#8
        MOV r3,#0

        .plot_split_sprite_loop
          MOV r1,r8,ASR#8
          BL split_spr_scan_line

          ADD r8,r8,r9
          ADD r3,r3,#1
          SUBS r10,r10,#1
        BGT plot_split_sprite_loop

      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .tmap_vhd
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r12,polygon_workspace_base%
        MOV r10,#0
        MOV r9,#0
        LDMIA r12,{r0-r7}
        MOVS r0,r0
        ORRGE r10,r10,#1
        CMP r0,#clipx%
        BICGE r10,r10,#1
        MOVS r2,r2
        ORRGE r10,r10,#1<<1
        CMP r2,#clipx%
        BICGE r10,r10,#1<<1
        MOVS r4,r4
        ORRGE r10,r10,#1<<2
        CMP r4,#clipx%
        BICGE r10,r10,#1<<2
        MOVS r6,r6
        ORRGE r10,r10,#1<<3
        CMP r6,#clipx%
        BICGE r10,r10,#1<<3
        MOVS r1,r1
        ORRGE r9,r9,#1
        CMP r1,#clipy%
        BICGE r9,r9,#1
        MOVS r3,r3
        ORRGE r9,r9,#1<<1
        CMP r3,#clipy%
        BICGE r9,r9,#1<<1
        MOVS r5,r5
        ORRGE r9,r9,#1<<2
        CMP r5,#clipy%
        BICGE r9,r9,#1<<2
        MOVS r7,r7
        ORRGE r9,r9,#1<<3
        CMP r7,#clipy%
        BICGE r9,r9,#1<<3
        ANDS r9,r9,r10
        BEQ tmap_vhd_end
        STR r10,xcoord_state%
        CMP r9,#15
        BLT tmap_vhd_clpd


        .tmap_vhd_side0_1
        LDR r9,texturemap_divisions_base%
        LDMIA r12,{r0-r3}
        CMP r1,r3
        BEQ tmap_vhd_side1_2
        LDRLT r10,[r12,#40]
        LDRGT r10,[r12,#44]
        MOVGT r4,r2
        MOVGT r5,r3
        MOVGT r2,r0
        MOVGT r3,r1
        MOVGT r0,r4
        MOVGT r1,r5
        SUB r2,r2,r0
        SUB r3,r3,r1
        LDR r8,[r9,r3,ASL#2]
        RSBGT r8,r8,#0
        MOVGT r7,#tmap_width%
        MOVLT r7,#0
        MOV r6,#0
        FNswm_rdiv_sca8(2,3,4)
        MOVS r0,r0,ASL#8
        ADD r10,r10,r1,ASL#4

        .tmap_vhd_side0_1_loop
          STR r6,[r10,#4]
          STR r7,[r10,#8]
          ADD r7,r7,r8
          MOV r5,r0,ASR#8
          STR r5,[r10],#16
          ADD r0,r0,r4
          SUBS r3,r3,#1
        BGT tmap_vhd_side0_1_loop


        .tmap_vhd_side1_2
        ADD r10,r12,#8
        LDMIA r10,{r0-r3}
        CMP r1,r3
        BEQ tmap_vhd_side2_3
        LDRLT r10,[r12,#40]
        LDRGT r10,[r12,#44]
        MOVGT r4,r2
        MOVGT r5,r3
        MOVGT r2,r0
        MOVGT r3,r1
        MOVGT r0,r4
        MOVGT r1,r5
        SUB r2,r2,r0
        SUB r3,r3,r1
        LDR r8,[r9,r3,ASL#2]
        RSBGT r8,r8,#0
        MOVGT r7,#tmap_width%
        MOVLT r7,#0
        MOV r6,#tmap_width%
        FNswm_rdiv_sca8(2,3,4)
        MOVS r0,r0,ASL#8
        ADD r10,r10,r1,ASL#4

        .tmap_vhd_side1_2_loop
          STR r7,[r10,#4]
          STR r6,[r10,#8]
          ADD r7,r7,r8
          MOV r5,r0,ASR#8
          STR r5,[r10],#16
          ADD r0,r0,r4
          SUBS r3,r3,#1
        BGT tmap_vhd_side1_2_loop


        .tmap_vhd_side2_3
        ADD r10,r12,#16
        LDMIA r10,{r0-r3}
        CMP r1,r3
        BEQ tmap_vhd_side3_0
        LDRLT r10,[r12,#40]
        LDRGT r10,[r12,#44]
        MOVGT r4,r2
        MOVGT r5,r3
        MOVGT r2,r0
        MOVGT r3,r1
        MOVGT r0,r4
        MOVGT r1,r5
        SUB r2,r2,r0
        SUB r3,r3,r1
        LDR r8,[r9,r3,ASL#2]
        RSBLT r8,r8,#0
        MOVGT r7,#0
        MOVLT r7,#tmap_width%
        MOV r6,#tmap_width%
        FNswm_rdiv_sca8(2,3,4)
        MOVS r0,r0,ASL#8
        ADD r10,r10,r1,ASL#4

        .tmap_vhd_side2_3_loop
          STR r6,[r10,#4]
          STR r7,[r10,#8]
          ADD r7,r7,r8
          MOV r5,r0,ASR#8
          STR r5,[r10],#16
          ADD r0,r0,r4
          SUBS r3,r3,#1
        BGT tmap_vhd_side2_3_loop


        .tmap_vhd_side3_0
        ADD r10,r12,#24
        LDMIA r10,{r0,r1}
        LDMIA r12,{r2,r3}
        CMP r1,r3
        BEQ tmap_vhd_find_extremes
        LDRLT r10,[r12,#40]
        LDRGT r10,[r12,#44]
        MOVGT r4,r2
        MOVGT r5,r3
        MOVGT r2,r0
        MOVGT r3,r1
        MOVGT r0,r4
        MOVGT r1,r5
        SUB r2,r2,r0
        SUB r3,r3,r1
        LDR r8,[r9,r3,ASL#2]
        RSBLT r8,r8,#0
        MOVGT r7,#0
        MOVLT r7,#tmap_width%
        MOV r6,#0
        FNswm_rdiv_sca8(2,3,4)
        MOVS r0,r0,ASL#8
        ADD r10,r10,r1,ASL#4

        .tmap_vhd_side3_0_loop
          STR r7,[r10,#4]
          STR r6,[r10,#8]
          ADD r7,r7,r8
          MOV r5,r0,ASR#8
          STR r5,[r10],#16
          ADD r0,r0,r4
          SUBS r3,r3,#1
        BGT tmap_vhd_side3_0_loop


        .tmap_vhd_find_extremes
        ADD r10,r12,#4
        MOV r9,#4
        MOV r1,#255
        MOV r8,#0

        .tmap_vhd_find_extremes_loop
          LDR r0,[r10],#8
          CMP r0,r1
          MOVLT r1,r0
          CMP r0,r8
          MOVGT r8,r0
          SUBS r9,r9,#1
        BGT tmap_vhd_find_extremes_loop

        SUBS r8,r8,r1
        BLE tmap_vhd_end

        LDR r10,[r12,#40]
        LDR r9,[r12,#44]
        ADD r10,r10,r1,ASL#4
        ADD r9,r9,r1,ASL#4

        .tmap_vhd_render
        LDMIA r10!,{r0,r3,r4}
        LDMIA r9!,{r2,r5,r6}
        ADD r10,r10,#4
        ADD r9,r9,#4
        SUB r2,r2,r0
        BL new_tex_line

        ADD r1,r1,#1
        SUBS r8,r8,#1
        BGT tmap_vhd_render

        .tmap_vhd_end
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .tmap_vhd_clpd

      .tmap_vhd_side0_1_clpd
      LDR r9,texturemap_divisions_base%
      LDMIA r12,{r0-r3}
      CMP r1,r3
      BEQ tmap_vhd_side1_2_clpd
      LDRLT r10,[r12,#40]
      LDRGT r10,[r12,#44]
      MOVGT r4,r2
      MOVGT r5,r3
      MOVGT r2,r0
      MOVGT r3,r1
      MOVGT r0,r4
      MOVGT r1,r5
      SUB r2,r2,r0
      SUB r3,r3,r1
      LDR r8,[r9,r3,ASL#2]
      RSBGT r8,r8,#0
      MOVGT r7,#tmap_width%
      MOVLT r7,#0
      MOV r6,#0
      CMP r3,#512
      BGE tmap_vhd_end_clpd
      FNswm_rdiv_sca8(2,3,4)
      MOVS r0,r0,ASL#8
      ADD r10,r10,r1,ASL#4
      ADD r2,r3,r1
      CMP r2,#255
      RSBGT r3,r1,#255
      MOVS r3,r3
      BLE tmap_vhd_side1_2_clpd


      .tmap_vhd_side0_1_loop_clpd
        MOVS r1,r1
        STRGE r6,[r10,#4]
        STRGE r7,[r10,#8]
        ADD r7,r7,r8
        MOV r5,r0,ASR#8
        STRGE r5,[r10],#16
        ADDLT r10,r10,#16
        ADD r0,r0,r4
        ADD r1,r1,#1
        SUBS r3,r3,#1
      BGT tmap_vhd_side0_1_loop_clpd


      .tmap_vhd_side1_2_clpd
      ADD r10,r12,#8
      LDMIA r10,{r0-r3}
      CMP r1,r3
      BEQ tmap_vhd_side2_3_clpd
      LDRLT r10,[r12,#40]
      LDRGT r10,[r12,#44]
      MOVGT r4,r2
      MOVGT r5,r3
      MOVGT r2,r0
      MOVGT r3,r1
      MOVGT r0,r4
      MOVGT r1,r5
      SUB r2,r2,r0
      SUB r3,r3,r1
      LDR r8,[r9,r3,ASL#2]
      RSBGT r8,r8,#0
      MOVGT r7,#tmap_width%
      MOVLT r7,#0
      MOV r6,#tmap_width%
      CMP r3,#512
      BGE tmap_vhd_end_clpd
      FNswm_rdiv_sca8(2,3,4)
      MOVS r0,r0,ASL#8
      ADD r10,r10,r1,ASL#4
      ADD r2,r3,r1
      CMP r2,#255
      RSBGT r3,r1,#255
      MOVS r3,r3
      BLE tmap_vhd_side2_3_clpd


      .tmap_vhd_side1_2_loop_clpd
        MOVS r1,r1
        STRGE r7,[r10,#4]
        STRGE r6,[r10,#8]
        ADD r7,r7,r8
        MOV r5,r0,ASR#8
        STRGE r5,[r10],#16
        ADDLT r10,r10,#16
        ADD r0,r0,r4
        ADD r1,r1,#1
        SUBS r3,r3,#1
      BGT tmap_vhd_side1_2_loop_clpd


      .tmap_vhd_side2_3_clpd
      ADD r10,r12,#16
      LDMIA r10,{r0-r3}
      CMP r1,r3
      BEQ tmap_vhd_side3_0_clpd
      LDRLT r10,[r12,#40]
      LDRGT r10,[r12,#44]
      MOVGT r4,r2
      MOVGT r5,r3
      MOVGT r2,r0
      MOVGT r3,r1
      MOVGT r0,r4
      MOVGT r1,r5
      SUB r2,r2,r0
      SUB r3,r3,r1
      LDR r8,[r9,r3,ASL#2]
      RSBLT r8,r8,#0
      MOVGT r7,#0
      MOVLT r7,#tmap_width%
      MOV r6,#tmap_width%
      CMP r3,#512
      BGE tmap_vhd_end_clpd
      FNswm_rdiv_sca8(2,3,4)
      MOVS r0,r0,ASL#8
      ADD r10,r10,r1,ASL#4
      ADD r2,r3,r1
      CMP r2,#255
      RSBGT r3,r1,#255
      MOVS r3,r3
      BLE tmap_vhd_side3_0_clpd


      .tmap_vhd_side2_3_loop_clpd
        MOVS r1,r1
        STRGE r6,[r10,#4]
        STRGE r7,[r10,#8]
        ADD r7,r7,r8
        MOV r5,r0,ASR#8
        STRGE r5,[r10],#16
        ADDLT r10,r10,#16
        ADD r0,r0,r4
        ADD r1,r1,#1
        SUBS r3,r3,#1
      BGT tmap_vhd_side2_3_loop_clpd


      .tmap_vhd_side3_0_clpd
      ADD r10,r12,#24
      LDMIA r10,{r0,r1}
      LDMIA r12,{r2,r3}
      CMP r1,r3
      BEQ tmap_vhd_find_extremes_clpd
      LDRLT r10,[r12,#40]
      LDRGT r10,[r12,#44]
      MOVGT r4,r2
      MOVGT r5,r3
      MOVGT r2,r0
      MOVGT r3,r1
      MOVGT r0,r4
      MOVGT r1,r5
      SUB r2,r2,r0
      SUB r3,r3,r1
      LDR r8,[r9,r3,ASL#2]
      RSBLT r8,r8,#0
      MOVGT r7,#0
      MOVLT r7,#tmap_width%
      MOV r6,#0
      CMP r3,#512
      BGE tmap_vhd_end_clpd
      FNswm_rdiv_sca8(2,3,4)
      MOVS r0,r0,ASL#8
      ADD r10,r10,r1,ASL#4
      ADD r2,r3,r1
      CMP r2,#255
      RSBGT r3,r1,#255
      MOVS r3,r3
      BLE tmap_vhd_find_extremes_clpd


      .tmap_vhd_side3_0_loop_clpd
        MOVS r1,r1
        STRGE r7,[r10,#4]
        STRGE r6,[r10,#8]
        ADD r7,r7,r8
        MOV r5,r0,ASR#8
        STRGE r5,[r10],#16
        ADDLT r10,r10,#16
        ADD r0,r0,r4
        ADD r1,r1,#1
        SUBS r3,r3,#1
      BGT tmap_vhd_side3_0_loop_clpd


      .tmap_vhd_find_extremes_clpd
      ADD r10,r12,#4
      MOV r9,#4
      MOV r1,#255
      MOV r8,#0

      .tmap_vhd_find_extremes_loop_clpd
        LDR r0,[r10],#8
        CMP r0,r1
        MOVLT r1,r0
        CMP r0,r8
        MOVGT r8,r0
        SUBS r9,r9,#1
      BGT tmap_vhd_find_extremes_loop_clpd

      MOVS r1,r1
      MOVLT r1,#0
      CMP r1,#256
      MOVGE r1,#255
      MOVS r8,r8
      MOVLT r8,#0
      CMP r8,#256
      MOVGE r8,#255
      SUBS r8,r8,r1
      BLE tmap_vhd_end_clpd

      LDR r10,[r12,#40]
      LDR r9,[r12,#44]
      ADD r10,r10,r1,ASL#4
      ADD r9,r9,r1,ASL#4
      LDR r7,xcoord_state%

      .tmap_vhd_render_clpd
      LDMIA r10!,{r0,r3,r4}
      LDMIA r9!,{r2,r5,r6}
      ADD r10,r10,#4
      ADD r9,r9,#4
      SUB r2,r2,r0
      CMP r7,#15
      BLLT new_tex_line_clpd

      CMP r7,#15
      BLEQ new_tex_line

      ADD r1,r1,#1
      SUBS r8,r8,#1
      BGT tmap_vhd_render_clpd

      .tmap_vhd_end_clpd
    LDMFA (sp)!,{r0-r10,r12,link}
    MOV PC,link

    .polygon_workspace_base% EQUD polygon_workspace%

    .tmap_ilace
    STMFA (sp)!,{r0-r10,r12,link}
      LDR r12,polygon_workspace_base%
      MOV r10,#0
      MOV r9,#0
      LDMIA r12,{r0-r7}
      BIC r1,r1,#1
      BIC r3,r3,#1
      BIC r5,r5,#1
      BIC r7,r7,#1
      STMIA r12,{r0-r7}
      MOVS r0,r0
      ORRGE r10,r10,#1
      CMP r0,#clipx%
      BICGE r10,r10,#1
      MOVS r2,r2
      ORRGE r10,r10,#1<<1
      CMP r2,#clipx%
      BICGE r10,r10,#1<<1
      MOVS r4,r4
      ORRGE r10,r10,#1<<2
      CMP r4,#clipx%
      BICGE r10,r10,#1<<2
      MOVS r6,r6
      ORRGE r10,r10,#1<<3
      CMP r6,#clipx%
      BICGE r10,r10,#1<<3
      MOVS r1,r1
      ORRGE r9,r9,#1
      CMP r1,#clipy%
      BICGE r9,r9,#1
      MOVS r3,r3
      ORRGE r9,r9,#1<<1
      CMP r3,#clipy%
      BICGE r9,r9,#1<<1
      MOVS r5,r5
      ORRGE r9,r9,#1<<2
      CMP r5,#clipy%
      BICGE r9,r9,#1<<2
      MOVS r7,r7
      ORRGE r9,r9,#1<<3
      CMP r7,#clipy%
      BICGE r9,r9,#1<<3
      ANDS r9,r9,r10
      BEQ tmap_ilace_end
      STR r10,xcoord_state%
      CMP r9,#15
      BLT tmap_ilace_clpd


      .tmap_ilace_side0_1
      LDR r9,texturemap_divisions_base%
      LDMIA r12,{r0-r3}
      CMP r1,r3
      BEQ tmap_ilace_side1_2
      LDRLT r10,[r12,#40]
      LDRGT r10,[r12,#44]
      MOVGT r4,r2
      MOVGT r5,r3
      MOVGT r2,r0
      MOVGT r3,r1
      MOVGT r0,r4
      MOVGT r1,r5
      SUB r2,r2,r0
      SUB r3,r3,r1
      LDR r8,[r9,r3,ASL#2]
      RSBGT r8,r8,#0
      MOVGT r7,#tmap_width%
      MOVLT r7,#0
      MOV r6,#0
      FNswm_rdiv_sca8(2,3,4)
      MOVS r0,r0,ASL#8
      ADD r10,r10,r1,ASL#4

      .tmap_ilace_side0_1_loop
        STR r6,[r10,#4]
        STR r7,[r10,#8]
        ADD r7,r7,r8,ASL#1
        MOV r5,r0,ASR#8
        STR r5,[r10],#32
        ADD r0,r0,r4,ASL#1
        SUBS r3,r3,#2
      BGT tmap_ilace_side0_1_loop


      .tmap_ilace_side1_2
      ADD r10,r12,#8
      LDMIA r10,{r0-r3}
      CMP r1,r3
      BEQ tmap_ilace_side2_3
      LDRLT r10,[r12,#40]
      LDRGT r10,[r12,#44]
      MOVGT r4,r2
      MOVGT r5,r3
      MOVGT r2,r0
      MOVGT r3,r1
      MOVGT r0,r4
      MOVGT r1,r5
      SUB r2,r2,r0
      SUB r3,r3,r1
      LDR r8,[r9,r3,ASL#2]
      RSBGT r8,r8,#0
      MOVGT r7,#tmap_width%
      MOVLT r7,#0
      MOV r6,#tmap_width%
      FNswm_rdiv_sca8(2,3,4)
      MOVS r0,r0,ASL#8
      ADD r10,r10,r1,ASL#4

      .tmap_ilace_side1_2_loop
        STR r7,[r10,#4]
        STR r6,[r10,#8]
        ADD r7,r7,r8,ASL#1
        MOV r5,r0,ASR#8
        STR r5,[r10],#32
        ADD r0,r0,r4,ASL#1
        SUBS r3,r3,#2
      BGT tmap_ilace_side1_2_loop


      .tmap_ilace_side2_3
      ADD r10,r12,#16
      LDMIA r10,{r0-r3}
      CMP r1,r3
      BEQ tmap_ilace_side3_0
      LDRLT r10,[r12,#40]
      LDRGT r10,[r12,#44]
      MOVGT r4,r2
      MOVGT r5,r3
      MOVGT r2,r0
      MOVGT r3,r1
      MOVGT r0,r4
      MOVGT r1,r5
      SUB r2,r2,r0
      SUB r3,r3,r1
      LDR r8,[r9,r3,ASL#2]
      RSBLT r8,r8,#0
      MOVGT r7,#0
      MOVLT r7,#tmap_width%
      MOV r6,#tmap_width%
      FNswm_rdiv_sca8(2,3,4)
      MOVS r0,r0,ASL#8
      ADD r10,r10,r1,ASL#4

      .tmap_ilace_side2_3_loop
        STR r6,[r10,#4]
        STR r7,[r10,#8]
        ADD r7,r7,r8,ASL#1
        MOV r5,r0,ASR#8
        STR r5,[r10],#32
        ADD r0,r0,r4,ASL#1
        SUBS r3,r3,#2
      BGT tmap_ilace_side2_3_loop


      .tmap_ilace_side3_0
      ADD r10,r12,#24
      LDMIA r10,{r0,r1}
      LDMIA r12,{r2,r3}
      CMP r1,r3
      BEQ tmap_ilace_find_extremes
      LDRLT r10,[r12,#40]
      LDRGT r10,[r12,#44]
      MOVGT r4,r2
      MOVGT r5,r3
      MOVGT r2,r0
      MOVGT r3,r1
      MOVGT r0,r4
      MOVGT r1,r5
      SUB r2,r2,r0
      SUB r3,r3,r1
      LDR r8,[r9,r3,ASL#2]
      RSBLT r8,r8,#0
      MOVGT r7,#0
      MOVLT r7,#tmap_width%
      MOV r6,#0
      FNswm_rdiv_sca8(2,3,4)
      MOVS r0,r0,ASL#8
      ADD r10,r10,r1,ASL#4

      .tmap_ilace_side3_0_loop
        STR r7,[r10,#4]
        STR r6,[r10,#8]
        ADD r7,r7,r8,ASL#1
        MOV r5,r0,ASR#8
        STR r5,[r10],#32
        ADD r0,r0,r4,ASL#1
        SUBS r3,r3,#2
      BGT tmap_ilace_side3_0_loop


      .tmap_ilace_find_extremes
      ADD r10,r12,#4
      MOV r9,#4
      MOV r1,#255
      MOV r8,#0

      .tmap_ilace_find_extremes_loop
        LDR r0,[r10],#8
        CMP r0,r1
        MOVLT r1,r0
        CMP r0,r8
        MOVGT r8,r0
        SUBS r9,r9,#1
      BGT tmap_ilace_find_extremes_loop

      SUBS r8,r8,r1
      BLE tmap_ilace_end

      LDR r10,[r12,#40]
      LDR r9,[r12,#44]
      ADD r10,r10,r1,ASL#4
      ADD r9,r9,r1,ASL#4
      LDR r7,detail_level_adr%
      LDR r0,[r7]
      MOV r0,r0,LSR#2
      MOVS r0,r0,LSR#1
      BCS tmap_ilace_render_ld

      .tmap_ilace_render
      LDMIA r10!,{r0,r3,r4}
      LDMIA r9!,{r2,r5,r6}
      ADD r10,r10,#20
      ADD r9,r9,#20
      SUB r2,r2,r0
      BL new_tex_line

      ADD r1,r1,#2
      SUBS r8,r8,#2
      BGT tmap_ilace_render
      B tmap_ilace_end

      .tmap_ilace_render_ld
      LDMIA r10!,{r0,r3,r4}
      LDMIA r9!,{r2,r5,r6}
      ADD r10,r10,#20
      ADD r9,r9,#20
      BIC r0,r0,#1
      BIC r2,r2,#1
      SUB r2,r2,r0
      MOVS r2,r2
      BLGT new_tex_ld

      ADD r1,r1,#2
      SUBS r8,r8,#2
      BGT tmap_ilace_render_ld

      .tmap_ilace_end
    LDMFA (sp)!,{r0-r10,r12,link}
    MOV PC,link

    .tmap_ilace_clpd

    .tmap_ilace_side0_1_clpd
    LDR r9,texturemap_divisions_base%
    LDMIA r12,{r0-r3}
    CMP r1,r3
    BEQ tmap_ilace_side1_2_clpd
    LDRLT r10,[r12,#40]
    LDRGT r10,[r12,#44]
    MOVGT r4,r2
    MOVGT r5,r3
    MOVGT r2,r0
    MOVGT r3,r1
    MOVGT r0,r4
    MOVGT r1,r5
    SUB r2,r2,r0
    SUB r3,r3,r1
    LDR r8,[r9,r3,ASL#2]
    RSBGT r8,r8,#0
    MOVGT r7,#tmap_width%
    MOVLT r7,#0
    MOV r6,#0
    CMP r3,#512
    BGE tmap_ilace_end_clpd
    FNswm_rdiv_sca8(2,3,4)
    MOVS r0,r0,ASL#8
    ADD r10,r10,r1,ASL#4
    ADD r2,r3,r1
    CMP r2,#255
    RSBGT r3,r1,#255
    MOVS r3,r3
    BLE tmap_ilace_side1_2_clpd


    .tmap_ilace_side0_1_loop_clpd
      MOVS r1,r1
      STRGE r6,[r10,#4]
      STRGE r7,[r10,#8]
      ADD r7,r7,r8,ASL#1
      MOV r5,r0,ASR#8
      STRGE r5,[r10],#32
      ADDLT r10,r10,#32
      ADD r0,r0,r4,ASL#1
      ADD r1,r1,#2
      SUBS r3,r3,#2
    BGT tmap_ilace_side0_1_loop_clpd


    .tmap_ilace_side1_2_clpd
    ADD r10,r12,#8
    LDMIA r10,{r0-r3}
    CMP r1,r3
    BEQ tmap_ilace_side2_3_clpd
    LDRLT r10,[r12,#40]
    LDRGT r10,[r12,#44]
    MOVGT r4,r2
    MOVGT r5,r3
    MOVGT r2,r0
    MOVGT r3,r1
    MOVGT r0,r4
    MOVGT r1,r5
    SUB r2,r2,r0
    SUB r3,r3,r1
    LDR r8,[r9,r3,ASL#2]
    RSBGT r8,r8,#0
    MOVGT r7,#tmap_width%
    MOVLT r7,#0
    MOV r6,#tmap_width%
    CMP r3,#512
    BGE tmap_ilace_end_clpd
    FNswm_rdiv_sca8(2,3,4)
    MOVS r0,r0,ASL#8
    ADD r10,r10,r1,ASL#4
    ADD r2,r3,r1
    CMP r2,#255
    RSBGT r3,r1,#255
    MOVS r3,r3
    BLE tmap_ilace_side2_3_clpd


    .tmap_ilace_side1_2_loop_clpd
      MOVS r1,r1
      STRGE r7,[r10,#4]
      STRGE r6,[r10,#8]
      ADD r7,r7,r8,ASL#1
      MOV r5,r0,ASR#8
      STRGE r5,[r10],#32
      ADDLT r10,r10,#32
      ADD r0,r0,r4,ASL#1
      ADD r1,r1,#2
      SUBS r3,r3,#2
    BGT tmap_ilace_side1_2_loop_clpd


    .tmap_ilace_side2_3_clpd
    ADD r10,r12,#16
    LDMIA r10,{r0-r3}
    CMP r1,r3
    BEQ tmap_ilace_side3_0_clpd
    LDRLT r10,[r12,#40]
    LDRGT r10,[r12,#44]
    MOVGT r4,r2
    MOVGT r5,r3
    MOVGT r2,r0
    MOVGT r3,r1
    MOVGT r0,r4
    MOVGT r1,r5
    SUB r2,r2,r0
    SUB r3,r3,r1
    LDR r8,[r9,r3,ASL#2]
    RSBLT r8,r8,#0
    MOVGT r7,#0
    MOVLT r7,#tmap_width%
    MOV r6,#tmap_width%
    CMP r3,#512
    BGE tmap_ilace_end_clpd
    FNswm_rdiv_sca8(2,3,4)
    MOVS r0,r0,ASL#8
    ADD r10,r10,r1,ASL#4
    ADD r2,r3,r1
    CMP r2,#255
    RSBGT r3,r1,#255
    MOVS r3,r3
    BLE tmap_ilace_side3_0_clpd


    .tmap_ilace_side2_3_loop_clpd
      MOVS r1,r1
      STRGE r6,[r10,#4]
      STRGE r7,[r10,#8]
      ADD r7,r7,r8,ASL#1
      MOV r5,r0,ASR#8
      STRGE r5,[r10],#32
      ADDLT r10,r10,#32
      ADD r0,r0,r4,ASL#1
      ADD r1,r1,#2
      SUBS r3,r3,#2
    BGT tmap_ilace_side2_3_loop_clpd


    .tmap_ilace_side3_0_clpd
    ADD r10,r12,#24
    LDMIA r10,{r0,r1}
    LDMIA r12,{r2,r3}
    CMP r1,r3
    BEQ tmap_ilace_find_extremes_clpd
    LDRLT r10,[r12,#40]
    LDRGT r10,[r12,#44]
    MOVGT r4,r2
    MOVGT r5,r3
    MOVGT r2,r0
    MOVGT r3,r1
    MOVGT r0,r4
    MOVGT r1,r5
    SUB r2,r2,r0
    SUB r3,r3,r1
    LDR r8,[r9,r3,ASL#2]
    RSBLT r8,r8,#0
    MOVGT r7,#0
    MOVLT r7,#tmap_width%
    MOV r6,#0
    CMP r3,#512
    BGE tmap_ilace_end_clpd
    FNswm_rdiv_sca8(2,3,4)
    MOVS r0,r0,ASL#8
    ADD r10,r10,r1,ASL#4
    ADD r2,r3,r1
    CMP r2,#255
    RSBGT r3,r1,#255
    MOVS r3,r3
    BLE tmap_ilace_find_extremes_clpd


    .tmap_ilace_side3_0_loop_clpd
      MOVS r1,r1
      STRGE r7,[r10,#4]
      STRGE r6,[r10,#8]
      ADD r7,r7,r8,ASL#1
      MOV r5,r0,ASR#8
      STRGE r5,[r10],#32
      ADDLT r10,r10,#32
      ADD r0,r0,r4,ASL#1
      ADD r1,r1,#2
      SUBS r3,r3,#2
    BGT tmap_ilace_side3_0_loop_clpd


    .tmap_ilace_find_extremes_clpd
    ADD r10,r12,#4
    MOV r9,#4
    MOV r1,#255
    MOV r8,#0

    .tmap_ilace_find_extremes_loop_clpd
      LDR r0,[r10],#8
      CMP r0,r1
      MOVLT r1,r0
      CMP r0,r8
      MOVGT r8,r0
      SUBS r9,r9,#1
    BGT tmap_ilace_find_extremes_loop_clpd

    MOVS r1,r1
    MOVLT r1,#0
    CMP r1,#256
    MOVGE r1,#255
    MOVS r8,r8
    MOVLT r8,#0
    CMP r8,#256
    MOVGE r8,#255
    SUBS r8,r8,r1
    BLE tmap_ilace_end_clpd

    LDR r10,[r12,#40]
    LDR r9,[r12,#44]
    ADD r10,r10,r1,ASL#4
    ADD r9,r9,r1,ASL#4
    LDR r7,detail_level_adr%
    LDR r0,[r7]
    LDR r7,xcoord_state%
    MOV r0,r0,LSR#2
    MOVS r0,r0,LSR#1
    BCS tmap_ilace_render_clpd_ld

    .tmap_ilace_render_clpd
    LDMIA r10!,{r0,r3,r4}
    LDMIA r9!,{r2,r5,r6}
    ADD r10,r10,#20
    ADD r9,r9,#20
    SUB r2,r2,r0
    CMP r7,#15
    BLLT new_tex_line_clpd

    CMP r7,#15
    BLEQ new_tex_line

    ADD r1,r1,#2
    SUBS r8,r8,#2
    BGT tmap_ilace_render_clpd
    B tmap_ilace_end_clpd

    .tmap_ilace_render_clpd_ld
    LDMIA r10!,{r0,r3,r4}
    LDMIA r9!,{r2,r5,r6}
    ADD r10,r10,#20
    ADD r9,r9,#20
    BIC r0,r0,#1
    BIC r2,r2,#1
    SUB r2,r2,r0
    CMP r7,#15
    BLLT new_tex_ld_clpd

    CMP r7,#15
    BLEQ new_tex_ld

    ADD r1,r1,#2
    SUBS r8,r8,#2
    BGT tmap_ilace_render_clpd_ld

    .tmap_ilace_end_clpd
  LDMFA (sp)!,{r0-r10,r12,link}
  MOV PC,link

  .swm_rdiv_list_base% EQUD swm_rdiv_list%

  .plain_quadragon
  STMFA (sp)!,{r0-r10,r12,link}
    LDR r12,polygon_workspace_base%
    MOV r10,#0
    MOV r9,#0
    LDMIA r12,{r0-r7}
    MOVS r0,r0
    ORRGE r10,r10,#1
    CMP r0,#clipx%
    BICGE r10,r10,#1
    MOVS r2,r2
    ORRGE r10,r10,#1<<1
    CMP r2,#clipx%
    BICGE r10,r10,#1<<1
    MOVS r4,r4
    ORRGE r10,r10,#1<<2
    CMP r4,#clipx%
    BICGE r10,r10,#1<<2
    MOVS r6,r6
    ORRGE r10,r10,#1<<3
    CMP r6,#clipx%
    BICGE r10,r10,#1<<3
    MOVS r1,r1
    ORRGE r9,r9,#1
    CMP r1,#clipy%
    BICGE r9,r9,#1
    MOVS r3,r3
    ORRGE r9,r9,#1<<1
    CMP r3,#clipy%
    BICGE r9,r9,#1<<1
    MOVS r5,r5
    ORRGE r9,r9,#1<<2
    CMP r5,#clipy%
    BICGE r9,r9,#1<<2
    MOVS r7,r7
    ORRGE r9,r9,#1<<3
    CMP r7,#clipy%
    BICGE r9,r9,#1<<3
    ANDS r9,r9,r10
    BEQ finish_plain_polygon
    MOV r10,r12
    MOV r9,#4

    .plain_quadragon_sides
    CMP r9,#1
    LDMEQIA r10,{r0,r1}
    LDMEQIA r12,{r2,r3}
    LDMNEIA r10,{r0-r3}
    ADDNE r10,r10,#8
    CMP r1,r3
    BEQ plain_quadragon_next_side
    MOVGT r4,r0
    MOVGT r5,r1
    MOVGT r0,r2
    MOVGT r1,r3
    MOVGT r2,r4
    MOVGT r3,r5
    LDRLT r8,[r12,#40]
    LDRGT r8,[r12,#44]
    SUB r2,r2,r0
    SUB r3,r3,r1
    FNswm_rdiv_sca8(2,3,4)
    MOV r0,r0,ASL#8
    ADD r6,r1,r3
    CMP r6,#255
    RSBGT r3,r1,#255
    MOVS r3,r3
    BLE plain_quadragon_next_side


    .plain_quadragon_sides_loop
      MOVS r5,r0,ASR#8
      MOVLT r5,#0
      CMP r5,#320
      MOVGT r5,#320
      MOVS r1,r1
      STRGE r5,[r8,r1,ASL#4]
      ADD r0,r0,r4
      ADD r1,r1,#1
      SUBS r3,r3,#1
    BGT plain_quadragon_sides_loop


    .plain_quadragon_next_side
    SUBS r9,r9,#1
    BGT plain_quadragon_sides

    .plain_quadragon_find_extremes
    ADD r10,r12,#4
    MOV r9,#4
    MOV r1,#255
    MOV r8,#0

    .plain_quadragon_find_extremes_loop
      LDR r0,[r10],#8
      CMP r0,r1
      MOVLT r1,r0
      CMP r0,r8
      MOVGT r8,r0
      SUBS r9,r9,#1
    BGT plain_quadragon_find_extremes_loop

    MOVS r1,r1
    MOVLT r1,#0
    CMP r1,#255
    MOVGT r1,#255
    MOVS r8,r8
    MOVLT r8,#0
    CMP r8,#255
    MOVGT r8,#255

    .render_plain_polygon
    SUBS r8,r8,r1
    BLE finish_plain_polygon

    LDR r10,[r12,#40]
    LDR r9,[r12,#44]
    LDR r3,[r12,#32]

    .render_plain_polygon_loop
      LDR r0,[r10,r1,ASL#4]
      LDR r2,[r9,r1,ASL#4]
      SUBS r2,r2,r0
      CMP r2,#3
      BLLT small_horizontal_line

      CMP r2,#3
      BLGE horizontal_line

      ADD r1,r1,#1
      SUBS r8,r8,#1
    BGT render_plain_polygon_loop


    .finish_plain_polygon
  LDMFA (sp)!,{r0-r10,r12,link}
  MOV PC,link

  .detail_level_adr% EQUD detail_level_status%

  .detail_level_status% EQUD %00000000
]

NEXT pass%


ENDPROC


DEF PROCassemble_screen_handlers

LOCAL pass%,link,sp,stack%
len%=131072
link=14
sp=11
DIM stack% 8192
DIM code% len%

FOR pass%=8 TO10 STEP2
P%=code%
L%=code% +len%

[OPT pass%

  .init_stack
  LDR sp,stack_base%
  MOV PC,link

  .bank% EQUD 1

  .vduin% EQUD 148
  EQUD -1

  .vduout% EQUD 0

  .screen_swap
  STMFA (sp)!,{r0-r10,r12,link}
    MOV r0,#19
    SWI "OS_Byte"
    LDR r4,bank%
    RSB r4,r4,#3
    STR r4,bank%
    MOV r0,#112
    MOV r1,r4
    SWI "OS_Byte"
    MOV r0,#113
    RSB r1,r4,#3
    SWI "OS_Byte"
    ADR r0,vduin%
    ADR r1,vduout%
    SWI "OS_ReadVduVariables"
    LDR r12,vduout%
    STR r12,screen_adr%
  LDMFA (sp)!,{r0-r10,r12,link}
  MOV PC,link

  .clr_scr
  STMFA (sp)!,{r0-r10,r12,link}
    LDR r12,screen_adr%
    MOV r9,#256
    MOV r0,#0
    ORR r0,r0,r0,LSL#8
    ORR r0,r0,r0,LSL#16
    MOV r1,r0
    MOV r2,r0
    MOV r3,r0
    MOV r4,r0
    MOV r5,r0
    MOV r6,r0
    MOV r7,r0

    .clrscr_loop
    ]


    FOR I%=1 TO10

      [OPT pass%
        STMIA r12!,{r0-r7}
      ]

      NEXT

      [OPT pass%
        SUBS r9,r9,#1
      BGT clrscr_loop

    LDMFA (sp)!,{r0-r10,r12,link}
    MOV PC,link

    .request_screen_adr
    STMFA (sp)!,{r0-r10,link}
      LDR r12,screen_adr%
    LDMFA (sp)!,{r0-r10,link}
    MOV PC,link

    .clear_even_line_fields
    STMFA (sp)!,{r0-r10,r12,link}
      LDR r12,screen_adr%
      MOV r9,#128
      MOV r0,#8
      ORR r0,r0,r0,LSL#8
      ORR r0,r0,r0,LSL#16
      MOV r1,r0
      MOV r2,r0
      MOV r3,r0
      MOV r4,r0
      MOV r5,r0
      MOV r6,r0
      MOV r7,r0

      .clrscr_loop_even_line_fields
      ]


      FOR I%=1 TO10

        [OPT pass%
          STMIA r12!,{r0-r7}
        ]

        NEXT

        [OPT pass%
          ADD r12,r12,#320
          SUBS r9,r9,#1
        BGT clrscr_loop_even_line_fields

      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .clear_even_line_fields_below_horiz
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r12,screen_adr%
        MOV r9,#130
        MOV r0,#8
        ORR r0,r0,r0,LSL#8
        ORR r0,r0,r0,LSL#16
        MOV r1,r0
        MOV r2,r0
        MOV r3,r0
        MOV r4,r0
        MOV r5,r0
        MOV r6,r0
        MOV r7,r0

        .clrscr_loop1_even_line_fields_below_horiz
        ]


        FOR I%=1 TO10

          [OPT pass%
            STMIA r12!,{r0-r7}
          ]

          NEXT

          [OPT pass%
            SUBS r9,r9,#1
          BGT clrscr_loop1_even_line_fields_below_horiz

          MOV r9,#63

          .clrscr_loop2_even_line_fields_below_horiz
          ]


          FOR I%=1 TO10

            [OPT pass%
              STMIA r12!,{r0-r7}
            ]

            NEXT

            [OPT pass%
              ADD r12,r12,#320
              SUBS r9,r9,#1
            BGT clrscr_loop2_even_line_fields_below_horiz

          LDMFA (sp)!,{r0-r10,r12,link}
          MOV PC,link

          .copy_even_line_fields_below_horizon
          STMFA (sp)!,{r0-r10,r12,link}
            LDR r12,screen_adr%
            MOV r10,#130
            RSB r9,r10,#254
            MOV r9,r9,ASR#1
            MOV r0,r10,ASL#8
            MOV r1,r10,ASL#6
            ADD r0,r0,r1
            ADD r12,r12,r0
            ADD r10,r12,#320

            .copy_even_line_fields_below_horizon_loop
              LDMIA r12!,{r0-r7}
              STMIA r10!,{r0-r7}
              LDMIA r12!,{r0-r7}
              STMIA r10!,{r0-r7}
              LDMIA r12!,{r0-r7}
              STMIA r10!,{r0-r7}
              LDMIA r12!,{r0-r7}
              STMIA r10!,{r0-r7}
              LDMIA r12!,{r0-r7}
              STMIA r10!,{r0-r7}
              LDMIA r12!,{r0-r7}
              STMIA r10!,{r0-r7}
              LDMIA r12!,{r0-r7}
              STMIA r10!,{r0-r7}
              LDMIA r12!,{r0-r7}
              STMIA r10!,{r0-r7}
              LDMIA r12!,{r0-r7}
              STMIA r10!,{r0-r7}
              LDMIA r12!,{r0-r7}
              STMIA r10!,{r0-r7}
              ADD r12,r12,#320
              ADD r10,r10,#320
              SUBS r9,r9,#1
            BGT copy_even_line_fields_below_horizon_loop

          LDMFA (sp)!,{r0-r10,r12,link}
          MOV PC,link

          .copy_even_line_fields_full_screen
          STMFA (sp)!,{r0-r10,r12,link}
            LDR r12,screen_adr%
            MOV r10,#0
            RSB r9,r10,#254
            MOV r9,r9,ASR#1
            MOV r0,r10,ASL#8
            MOV r1,r10,ASL#6
            ADD r0,r0,r1
            ADD r12,r12,r0
            ADD r10,r12,#320

            .copy_even_line_fields_full_screen_loop
              LDMIA r12!,{r0-r7}
              STMIA r10!,{r0-r7}
              LDMIA r12!,{r0-r7}
              STMIA r10!,{r0-r7}
              LDMIA r12!,{r0-r7}
              STMIA r10!,{r0-r7}
              LDMIA r12!,{r0-r7}
              STMIA r10!,{r0-r7}
              LDMIA r12!,{r0-r7}
              STMIA r10!,{r0-r7}
              LDMIA r12!,{r0-r7}
              STMIA r10!,{r0-r7}
              LDMIA r12!,{r0-r7}
              STMIA r10!,{r0-r7}
              LDMIA r12!,{r0-r7}
              STMIA r10!,{r0-r7}
              LDMIA r12!,{r0-r7}
              STMIA r10!,{r0-r7}
              LDMIA r12!,{r0-r7}
              STMIA r10!,{r0-r7}
              ADD r12,r12,#320
              ADD r10,r10,#320
              SUBS r9,r9,#1
            BGT copy_even_line_fields_full_screen_loop

          LDMFA (sp)!,{r0-r10,r12,link}
          MOV PC,link

          .plot_dot
          STMFA (sp)!,{r0-r10,r12,link}
            MOVS r6,r6
            BLT end_plot_dot

            MOVS r7,r7
            BLT end_plot_dot

            CMP r6,#320
            BGE end_plot_dot
            CMP r7,#256
            BGE end_plot_dot
            LDR r12,screen_adr%
            ADD r12,r12,r6
            MOV r2,r7,ASL#8
            MOV r3,r7,ASL#6
            ADD r2,r2,r3
            ADD r12,r12,r2
            MOV r10,#255
            STRB r10,[r12]

            .end_plot_dot
          LDMFA (sp)!,{r0-r10,r12,link}
          MOV PC,link

          .swm_rdiv_list_base% EQUD swm_rdiv_list%

          .new_tex_line
          STMFA (sp)!,{r0-r10,r12,link}
            MOVS r2,r2
            BLE end_new_tex_line

            LDR r12,screen_adr%
            ADD r12,r12,r0
            MOV r7,r1,ASL#8
            MOV r8,r1,ASL#6
            ADD r7,r7,r8
            ADD r12,r12,r7
            SUB r5,r5,r3
            MOV r3,r3,ASL#8
            FNswm_rdiv_sca8(5,2,7)
            SUB r6,r6,r4
            MOV r4,r4,ASL#8
            FNswm_rdiv_sca8(6,2,8)
            LDR r9,polygon_workspace_base%
            LDR r10,[r9,#36]
            LDR r0,[r9,#32]
            TST r0,#512
            BLNE tex_scan_line_msk

            TST r0,#512
            BNEend_new_tex_line
            ADDr10,r10,r0,ASL#10
            CMPr2,#4
            BLTtex_short_line

            MOVr5,#0
            ANDSr5,r12,#3
            BEQnew_tex_no_pre_bytes
            RSBr5,r5,#4
            SUBr2,r2,r5

            .new_tex_pre_bytes_loop
              MOVr0,r3,ASR#16
              MOVr1,r4,ASR#16
              ORRr0,r0,r1,LSL#5
              LDRBr9,[r10,r0]
              STRBr9,[r12],#1
              ADD r3,r3,r7
              ADD r4,r4,r8
              SUBS r5,r5,#1
            BGT new_tex_pre_bytes_loop


            .new_tex_no_pre_bytes
            ANDr6,r2,#3
            BIC r2,r2,#3
            MOVS r2,r2,ASR#2
            BLE new_tex_no_full_words


            .new_tex_line_loop
              MOV r0,r3,ASR#16
              MOV r1,r4,ASR#16
              ORR r0,r0,r1,LSL#5
              LDRB r9,[r10,r0]
              ADD r3,r3,r7
              ADD r4,r4,r8
              MOV r0,r3,ASR#16
              MOV r1,r4,ASR#16
              ORR r0,r0,r1,LSL#5
              LDRB r5,[r10,r0]
              ORR r9,r9,r5,LSL#8
              ADD r3,r3,r7
              ADD r4,r4,r8
              MOV r0,r3,ASR#16
              MOV r1,r4,ASR#16
              ORR r0,r0,r1,LSL#5
              LDRB r5,[r10,r0]
              ORR r9,r9,r5,LSL#16
              ADD r3,r3,r7
              ADD r4,r4,r8
              MOV r0,r3,ASR#16
              MOV r1,r4,ASR#16
              ORR r0,r0,r1,LSL#5
              LDRB r5,[r10,r0]
              ORR r9,r9,r5,LSL#24
              ADD r3,r3,r7
              ADD r4,r4,r8
              STR r9,[r12],#4
              SUBS r2,r2,#1
            BGT new_tex_line_loop


            .new_tex_no_full_words
            MOVS r6,r6
            BLE end_new_tex_line


            .new_tex_post_bytes_loop
              MOV r0,r3,ASR#16
              MOV r1,r4,ASR#16
              ORR r0,r0,r1,LSL#5
              LDRB r9,[r10,r0]
              STRB r9,[r12],#1
              ADD r3,r3,r7
              ADD r4,r4,r8
              SUBS r6,r6,#1
            BGT new_tex_post_bytes_loop


            .end_new_tex_line
          LDMFA (sp)!,{r0-r10,r12,link}
          MOV PC,link

          .tex_short_line
          MOV r0,r3,ASR#16
          MOV r1,r4,ASR#16
          ORR r0,r0,r1,LSL#5
          LDRB r9,[r10,r0]
          STRB r9,[r12],#1
          ADD r3,r3,r7
          ADD r4,r4,r8
          SUBS r2,r2,#1
          BGT tex_short_line
        LDMFA (sp)!,{r0-r10,r12,link}
        MOV PC,link

        .new_tex_line_clpd
        STMFA (sp)!,{r0-r10,r12,link}
          MOVS r2,r2
          BLE end_new_tex_line_clpd

          LDR r12,screen_adr%
          ADD r12,r12,r0
          MOV r7,r1,ASL#8
          MOV r8,r1,ASL#6
          ADD r7,r7,r8
          ADD r12,r12,r7
          SUB r5,r5,r3
          MOV r3,r3,ASL#8
          FNswm_rdiv_sca8(5,2,7)
          SUB r6,r6,r4
          MOV r4,r4,ASL#8
          FNswm_rdiv_sca8(6,2,8)
          MOVS r0,r0
          RSBLT r9,r0,#0
          MULLT r1,r9,r7
          ADDLT r3,r3,r1
          MULLT r1,r9,r8
          ADDLT r4,r4,r1
          ADDLT r12,r12,r9
          SUBLT r2,r2,r9
          MOVS r2,r2
          BLE end_new_tex_line_clpd

          ADD r9,r0,r2
          CMP r9,#320
          RSBGE r2,r0,#320
          MOVS r2,r2
          BLE end_new_tex_line_clpd

          LDR r9,polygon_workspace_base%
          LDR r10,[r9,#36]
          LDR r0,[r9,#32]
          TST r0,#512
          BLNE tex_scan_line_msk

          TST r0,#512
          BNE end_new_tex_line_clpd
          ADD r10,r10,r0,ASL#10
          CMP r2,#4
          BLT tex_short_line

          MOV r5,#0
          ANDS r5,r12,#3
          BEQ new_tex_no_pre_bytes_clpd
          RSB r5,r5,#4
          SUB r2,r2,r5

          .new_tex_pre_bytes_loop_clpd
            MOV r0,r3,ASR#16
            MOV r1,r4,ASR#16
            ORR r0,r0,r1,LSL#5
            LDRB r9,[r10,r0]
            STRB r9,[r12],#1
            ADD r3,r3,r7
            ADD r4,r4,r8
            SUBS r5,r5,#1
          BGT new_tex_pre_bytes_loop_clpd


          .new_tex_no_pre_bytes_clpd
          ANDr6,r2,#3
          BIC r2,r2,#3
          MOVS r2,r2,ASR#2
          BLE new_tex_no_full_words_clpd


          .new_tex_line_loop_clpd
            MOV r0,r3,ASR#16
            MOV r1,r4,ASR#16
            ORR r0,r0,r1,LSL#5
            LDRB r9,[r10,r0]
            ADD r3,r3,r7
            ADD r4,r4,r8
            MOV r0,r3,ASR#16
            MOV r1,r4,ASR#16
            ORR r0,r0,r1,LSL#5
            LDRB r5,[r10,r0]
            ORR r9,r9,r5,LSL#8
            ADD r3,r3,r7
            ADD r4,r4,r8
            MOV r0,r3,ASR#16
            MOV r1,r4,ASR#16
            ORR r0,r0,r1,LSL#5
            LDRB r5,[r10,r0]
            ORR r9,r9,r5,LSL#16
            ADD r3,r3,r7
            ADD r4,r4,r8
            MOV r0,r3,ASR#16
            MOV r1,r4,ASR#16
            ORR r0,r0,r1,LSL#5
            LDRB r5,[r10,r0]
            ORR r9,r9,r5,LSL#24
            ADD r3,r3,r7
            ADD r4,r4,r8
            STR r9,[r12],#4
            SUBS r2,r2,#1
          BGT new_tex_line_loop_clpd


          .new_tex_no_full_words_clpd
          MOVS r6,r6
          BLE end_new_tex_line_clpd


          .new_tex_post_bytes_loop_clpd
            MOV r0,r3,ASR#16
            MOV r1,r4,ASR#16
            ORR r0,r0,r1,LSL#5
            LDRB r9,[r10,r0]
            STRB r9,[r12],#1
            ADD r3,r3,r7
            ADD r4,r4,r8
            SUBS r6,r6,#1
          BGT new_tex_post_bytes_loop_clpd


          .end_new_tex_line_clpd
        LDMFA (sp)!,{r0-r10,r12,link}
        MOV PC,link

        .new_tex_ld
        STMFA (sp)!,{r0-r10,r12,link}
          CMP r2,#1
          BLE end_tex_ld

          LDR r12,screen_adr%
          ADD r12,r12,r0
          MOV r7,r1,ASL#8
          MOV r8,r1,ASL#6
          ADD r7,r7,r8
          ADD r12,r12,r7
          SUB r5,r5,r3
          MOV r3,r3,ASL#8
          FNswm_rdiv_sca8(5,2,7)
          SUB r6,r6,r4
          MOV r4,r4,ASL#8
          FNswm_rdiv_sca8(6,2,8)
          LDR r9,polygon_workspace_base%
          LDR r10,[r9,#36]
          LDR r0,[r9,#32]
          TST r0,#512
          BLNE tex_scan_line_msk_ld

          TST r0,#512
          BNE end_tex_ld
          ADD r10,r10,r0,ASL#10
          BIC r12,r12,#1
          ANDS r5,r12,#2
          SUBNE r2,r2,#2
          ANDr6,r2,#2
          BIC r2,r2,#3
          MOVS r5,r5
          BEQ ld_tex_no_pre_bytes
          MOV r0,r3,ASR#16
          MOV r1,r4,ASR#16
          ORR r0,r0,r1,LSL#5
          LDRB r9,[r10,r0]
          STRB r9,[r12],#1
          STRB r9,[r12],#1
          ADD r3,r3,r7,ASL#1
          ADD r4,r4,r8,ASL#1

          .ld_tex_no_pre_bytes
          MOVS r2,r2
          BLE ld_tex_post_bytes


          .tex_ld_loop
            MOV r5,#0
            MOV r0,r3,ASR#16
            MOV r1,r4,ASR#16
            ORR r0,r0,r1,LSL#5
            LDRB r9,[r10,r0]
            MOV r5,r9
            ORR r5,r5,r9,LSL#8
            ADD r3,r3,r7,ASL#1
            ADD r4,r4,r8,ASL#1
            MOV r0,r3,ASR#16
            MOV r1,r4,ASR#16
            ORR r0,r0,r1,LSL#5
            LDRB r9,[r10,r0]
            ORR r5,r5,r9,LSL#16
            ORR r5,r5,r9,LSL#24
            ADD r3,r3,r7,ASL#1
            ADD r4,r4,r8,ASL#1
            STR r5,[r12],#4
            SUBS r2,r2,#4
          BGT tex_ld_loop


          .ld_tex_post_bytes
          MOVS r6,r6
          BEQ end_tex_ld
          MOV r0,r3,ASR#16
          MOV r1,r4,ASR#16
          ORR r0,r0,r1,LSL#5
          LDRB r9,[r10,r0]
          STRB r9,[r12],#1
          STRB r9,[r12],#1
          ADD r3,r3,r7,ASL#1
          ADD r4,r4,r8,ASL#1

          .end_tex_ld
        LDMFA (sp)!,{r0-r10,r12,link}
        MOV PC,link

        .menu_screen_data_base% EQUD menu_screen_data%

        .screen_adr% EQUD 0

        .stack_base% EQUD stack%

        .camera_position_base% EQUD camera_position%

        .store_menu_screen
        STMFA (sp)!,{r0-r10,r12,link}
          LDR r12,menu_screen_data_base%
          LDR r10,screen_adr%
          MOV r9,#2560

          .store_menu_screen_loop
            LDMIA r10!,{r0-r7}
            STMIA r12!,{r0-r7}
            SUBS r9,r9,#1
          BGT store_menu_screen_loop

        LDMFA (sp)!,{r0-r10,r12,link}
        MOV PC,link

        .refresh_menu_screen
        STMFA (sp)!,{r0-r10,r12,link}
          LDR r12,menu_screen_data_base%
          LDR r10,screen_adr%
          MOV r9,#2560

          .refresh_menu_screen_loop
            LDMIA r12!,{r0-r7}
            STMIA r10!,{r0-r7}
            SUBS r9,r9,#1
          BGT refresh_menu_screen_loop

        LDMFA (sp)!,{r0-r10,r12,link}
        MOV PC,link

        .new_tex_ld_clpd
        STMFA (sp)!,{r0-r10,r12,link}
          CMP r2,#1
          BLE end_tex_ld_clpd

          LDR r12,screen_adr%
          ADD r12,r12,r0
          MOV r7,r1,ASL#8
          MOV r8,r1,ASL#6
          ADD r7,r7,r8
          ADD r12,r12,r7
          SUB r5,r5,r3
          MOV r3,r3,ASL#8
          FNswm_rdiv_sca8(5,2,7)
          SUB r6,r6,r4
          MOV r4,r4,ASL#8
          FNswm_rdiv_sca8(6,2,8)
          MOVS r0,r0
          RSBLT r9,r0,#0
          MULLT r1,r9,r7
          ADDLT r3,r3,r1
          MULLT r1,r9,r8
          ADDLT r4,r4,r1
          ADDLT r12,r12,r9
          SUBLT r2,r2,r9
          MOVS r2,r2
          BLE end_tex_ld_clpd

          ADD r9,r0,r2
          CMP r9,#320
          RSBGE r2,r0,#320
          MOVS r2,r2
          BLE end_tex_ld_clpd

          LDR r9,polygon_workspace_base%
          LDR r10,[r9,#36]
          LDR r0,[r9,#32]
          TST r0,#512
          BLNE tex_scan_line_msk_ld

          TST r0,#512
          BNE end_tex_ld_clpd
          ADD r10,r10,r0,ASL#10
          BIC r12,r12,#1
          ANDS r5,r12,#2
          SUBNE r2,r2,#2
          ANDr6,r2,#2
          BIC r2,r2,#3
          MOVS r5,r5
          BEQ ld_tex_no_pre_bytes_clpd
          MOV r0,r3,ASR#16
          MOV r1,r4,ASR#16
          ORR r0,r0,r1,LSL#5
          LDRB r9,[r10,r0]
          STRB r9,[r12],#1
          STRB r9,[r12],#1
          ADD r3,r3,r7,ASL#1
          ADD r4,r4,r8,ASL#1

          .ld_tex_no_pre_bytes_clpd
          MOVS r2,r2
          BLE ld_tex_post_bytes


          .tex_ld_loop_clpd
            MOV r5,#0
            MOV r0,r3,ASR#16
            MOV r1,r4,ASR#16
            ORR r0,r0,r1,LSL#5
            LDRB r9,[r10,r0]
            MOV r5,r9
            ORR r5,r5,r9,LSL#8
            ADD r3,r3,r7,ASL#1
            ADD r4,r4,r8,ASL#1
            MOV r0,r3,ASR#16
            MOV r1,r4,ASR#16
            ORR r0,r0,r1,LSL#5
            LDRB r9,[r10,r0]
            ORR r5,r5,r9,LSL#16
            ORR r5,r5,r9,LSL#24
            ADD r3,r3,r7,ASL#1
            ADD r4,r4,r8,ASL#1
            STR r5,[r12],#4
            SUBS r2,r2,#4
          BGT tex_ld_loop_clpd


          .ld_tex_post_bytes_clpd
          MOVS r6,r6
          BEQ end_tex_ld_clpd
          MOV r0,r3,ASR#16
          MOV r1,r4,ASR#16
          ORR r0,r0,r1,LSL#5
          LDRB r9,[r10,r0]
          STRB r9,[r12],#1
          STRB r9,[r12],#1
          ADD r3,r3,r7,ASL#1
          ADD r4,r4,r8,ASL#1

          .end_tex_ld_clpd
        LDMFA (sp)!,{r0-r10,r12,link}
        MOV PC,link

        .horizontal_line
        STMFA (sp)!,{r0-r10,r12,link}
          LDR r12,screen_adr%
          ADD r12,r12,r0
          MOV r4,r1,ASL#8
          MOV r5,r1,ASL#6
          ADD r4,r4,r5
          ADD r12,r12,r4
          ORR r3,r3,r3,LSL#8
          ORR r3,r3,r3,LSL#16
          MOV r10,#0
          ANDS r10,r12,#3
          BEQ no_initial_bytes
          RSB r10,r10,#4
          SUB r2,r2,r10

          .initial_bytes
          MOVS r10,r10,LSR#1
          STRCSB r3,[r12],#1
          STRNEB r3,[r12],#1
          STRNEB r3,[r12],#1

          .no_initial_bytes
          ANDr10,r2,#3
          BIC r2,r2,#3

          .plot_words
          MOVS r2,r2,LSR#2
          BEQ no_words_to_plot
          MOVS r2,r2,LSR#1
          STRCS r3,[r12],#4
          BEQ no_words_to_plot
          MOV r0,r3
          MOVS r2,r2,LSR#1
          STMCSIA r12!,{r0,r3}
          BEQ no_words_to_plot
          MOV r1,r3
          MOV r4,r3
          MOVS r2,r2,LSR#1
          STMCSIA r12!,{r0,r3,r1,r4}
          BEQ no_words_to_plot
          MOV r5,r3
          MOV r6,r3
          MOV r7,r3
          MOV r8,r3
          MOVS r2,r2,LSR#1
          STMCSIA r12!,{r0,r3,r1,r4,r5-r8}
          BEQ no_words_to_plot
          MOVS r2,r2,LSR#1
          STMCSIA r12!,{r0,r3,r1,r4,r5-r8}
          STMCSIA r12!,{r0,r3,r1,r4,r5-r8}
          BEQ no_words_to_plot
          MOVS r2,r2,LSR#1
          STMCSIA r12!,{r0,r3,r1,r4,r5-r8}
          STMCSIA r12!,{r0,r3,r1,r4,r5-r8}
          STMCSIA r12!,{r0,r3,r1,r4,r5-r8}
          STMCSIA r12!,{r0,r3,r1,r4,r5-r8}
          BEQ no_words_to_plot
          MOVS r2,r2,LSR#1
          STMCSIA r12!,{r0,r3,r1,r4,r5-r8}
          STMCSIA r12!,{r0,r3,r1,r4,r5-r8}
          STMCSIA r12!,{r0,r3,r1,r4,r5-r8}
          STMCSIA r12!,{r0,r3,r1,r4,r5-r8}
          STMCSIA r12!,{r0,r3,r1,r4,r5-r8}
          STMCSIA r12!,{r0,r3,r1,r4,r5-r8}
          STMCSIA r12!,{r0,r3,r1,r4,r5-r8}
          STMCSIA r12!,{r0,r3,r1,r4,r5-r8}
          BEQ no_words_to_plot
          MOVS r2,r2,LSR#1
          STMCSIA r12!,{r0,r3,r1,r4,r5-r8}
          STMCSIA r12!,{r0,r3,r1,r4,r5-r8}
          STMCSIA r12!,{r0,r3,r1,r4,r5-r8}
          STMCSIA r12!,{r0,r3,r1,r4,r5-r8}
          STMCSIA r12!,{r0,r3,r1,r4,r5-r8}
          STMCSIA r12!,{r0,r3,r1,r4,r5-r8}
          STMCSIA r12!,{r0,r3,r1,r4,r5-r8}
          STMCSIA r12!,{r0,r3,r1,r4,r5-r8}
          STMCSIA r12!,{r0,r3,r1,r4,r5-r8}
          STMCSIA r12!,{r0,r3,r1,r4,r5-r8}
          STMCSIA r12!,{r0,r3,r1,r4,r5-r8}
          STMCSIA r12!,{r0,r3,r1,r4,r5-r8}
          STMCSIA r12!,{r0,r3,r1,r4,r5-r8}
          STMCSIA r12!,{r0,r3,r1,r4,r5-r8}
          STMCSIA r12!,{r0,r3,r1,r4,r5-r8}
          STMCSIA r12!,{r0,r3,r1,r4,r5-r8}

          .no_words_to_plot
          MOVS r10,r10,LSR#1
          STRCSB r3,[r12],#1
          STRNEB r3,[r12],#1
          STRNEB r3,[r12],#1

          .finish_horizontal_line
        LDMFA (sp)!,{r0-r10,r12,link}
        MOV PC,link

        .tex_scan_line_msk
        STMFA (sp)!,{r0-r10,r12,link}
          BIC r0,r0,#512
          ADD r10,r10,r0,ASL#10

          .tex_scan_line_loop_msk
            MOV r0,r3,ASR#16
            MOV r1,r4,ASR#16
            ORR r0,r0,r1,LSL#5
            LDRB r9,[r10,r0]
            MOVS r9,r9
            STRNEB r9,[r12],#1
            ADDEQ r12,r12,#1
            ADD r3,r3,r7
            ADD r4,r4,r8
            SUBS r2,r2,#1
          BGT tex_scan_line_loop_msk


          .end_tex_scan_line_msk
        LDMFA (sp)!,{r0-r10,r12,link}
        MOV PC,link

        .tex_scan_line_msk_ld
        STMFA (sp)!,{r0-r10,r12,link}
          BIC r0,r0,#512
          ADD r10,r10,r0,ASL#10
          BIC r12,r12,#1
          BIC r2,r2,#1

          .tex_scan_line_loop_ld_msk
            MOV r0,r3,ASR#16
            MOV r1,r4,ASR#16
            ORR r0,r0,r1,LSL#5
            LDRB r9,[r10,r0]
            MOVS r9,r9
            STRNEB r9,[r12],#1
            STRNEB r9,[r12],#1
            ADDEQ r12,r12,#2
            ADD r3,r3,r7,ASL#1
            ADD r4,r4,r8,ASL#1
            SUBS r2,r2,#2
          BGT tex_scan_line_loop_ld_msk


          .end_tex_scan_line_ld_msk
        LDMFA (sp)!,{r0-r10,r12,link}
        MOV PC,link

        .small_horizontal_line
        STMFA (sp)!,{r0-r10,r12,link}
          MOVS r2,r2
          BLE end_small_horizontal_line

          LDR r12,screen_adr%
          ADD r12,r12,r0
          MOV r4,r1,ASL#8
          MOV r5,r1,ASL#6
          ADD r4,r4,r5
          ADD r12,r12,r4

          .small_horizontal_line_loop
            STRB r3,[r12],#1
            SUBS r2,r2,#1
          BGT small_horizontal_line_loop


          .end_small_horizontal_line
        LDMFA (sp)!,{r0-r10,r12,link}
        MOV PC,link

        .full_length_rect
        STMFA (sp)!,{r0-r10,r12,link}
          LDR r12,screen_adr%
          MOV r8,r0,ASL#8
          MOV r9,r0,ASL#6
          ADD r8,r8,r9
          ADD r12,r12,r8
          MOV r0,r2
          ORR r0,r0,r2,LSL#8
          ORR r0,r0,r0,LSL#16
          MOV r10,r1
          MOV r1,r0
          MOV r2,r0
          MOV r3,r0
          MOV r4,r0
          MOV r5,r0
          MOV r6,r0
          MOV r7,r0

          .plot_rect_loop
            STMIA r12!,{r0-r7}
            STMIA r12!,{r0-r7}
            STMIA r12!,{r0-r7}
            STMIA r12!,{r0-r7}
            STMIA r12!,{r0-r7}
            STMIA r12!,{r0-r7}
            STMIA r12!,{r0-r7}
            STMIA r12!,{r0-r7}
            STMIA r12!,{r0-r7}
            STMIA r12!,{r0-r7}
            SUBS r10,r10,#1
          BGT plot_rect_loop

        LDMFA (sp)!,{r0-r10,r12,link}
        MOV PC,link

        .full_length_rect_ilace
        STMFA (sp)!,{r0-r10,r12,link}
          LDR r12,screen_adr%
          TST r0,#1
          ADDNE r0,r0,#1
          MOV r8,r0,ASL#8
          MOV r9,r0,ASL#6
          ADD r8,r8,r9
          ADD r12,r12,r8
          MOV r0,r2
          ORR r0,r0,r2,LSL#8
          ORR r0,r0,r0,LSL#16
          MOV r10,r1
          MOV r1,r0
          MOV r2,r0
          MOV r3,r0
          MOV r4,r0
          MOV r5,r0
          MOV r6,r0
          MOV r7,r0

          .plot_rect_loop_ilace
            STMIA r12!,{r0-r7}
            STMIA r12!,{r0-r7}
            STMIA r12!,{r0-r7}
            STMIA r12!,{r0-r7}
            STMIA r12!,{r0-r7}
            STMIA r12!,{r0-r7}
            STMIA r12!,{r0-r7}
            STMIA r12!,{r0-r7}
            STMIA r12!,{r0-r7}
            STMIA r12!,{r0-r7}
            ADD r12,r12,#320
            SUBS r10,r10,#2
          BGT plot_rect_loop_ilace

        LDMFA (sp)!,{r0-r10,r12,link}
        MOV PC,link

        .letter_sprites_base% EQUD letter_sprites%

        .mini_sprites_base% EQUD mini_sprites%

        .plot_letter_sprite
        STMFA (sp)!,{r0-r10,r12,link}
          LDR r12,screen_adr%
          MOV r3,r2,ASL#8
          MOV r4,r2,ASL#6
          ADD r3,r3,r4
          ADD r12,r12,r3
          BIC r1,r1,#3
          ADD r12,r12,r1
          LDR r10,letter_sprites_base%
          ADD r10,r10,r0,ASL#9
          ADD r9,r10,#256
          MOV r8,#15

          .plot_letter_sprite_loop
            LDMIA r12,{r0-r3}
            LDMIA r9!,{r4-r7}
            ANDr0,r0,r4
            ANDr1,r1,r5
            ANDr2,r2,r6
            ANDr3,r3,r7
            LDMIA r10!,{r4-r7}
            ORR r4,r4,r0
            ORR r5,r5,r1
            ORR r6,r6,r2
            ORR r7,r7,r3
            STMIA r12,{r4-r7}
            ADD r12,r12,#320
            SUBS r8,r8,#1
          BGE plot_letter_sprite_loop

        LDMFA (sp)!,{r0-r10,r12,link}
        MOV PC,link

        .plot_mini_sprite
        STMFA (sp)!,{r0-r10,r12,link}
          LDR r12,screen_adr%
          MOV r3,r2,ASL#8
          MOV r4,r2,ASL#6
          ADD r3,r3,r4
          ADD r12,r12,r3
          ADD r12,r12,r1
          LDR r10,mini_sprites_base%
          ADD r10,r10,r0,ASL#5
          MOV r9,#7

          .plot_mini_sprite_loop
            LDR r0,[r10],#4
            STR r0,[r12],#320
            SUBS r9,r9,#1
          BGE plot_mini_sprite_loop

        LDMFA (sp)!,{r0-r10,r12,link}
        MOV PC,link

        .polygon_workspace_base% EQUD polygon_workspace%

        .polygon_workspace%
        EQUD 20
        EQUD 40
        EQUD 10
        EQUD 100
        EQUD 120
        EQUD 90
        EQUD 100
        EQUD 60
        EQUD 0
        EQUD textures%
        EQUD lhs_list%
        EQUD rhs_list%

        .swm_rdiv_list_base% EQUD swm_rdiv_list%

        .smoke_base% EQUD smoke%

        .plot_smoke
        STMFA (sp)!,{r0-r10,r12,link}
          CMP r0,#120
          BGE plot_small_smoke
          LDR r12,screen_adr%
          ADD r12,r12,r1
          CMP r2,#20
          BLT end_plot_smoke

          CMP r2,#230
          BGT end_plot_smoke
          CMP r1,#300
          BGT end_plot_smoke
          CMP r1,#20
          BLT end_plot_smoke

          MOV r4,r2,ASL#8
          MOV r5,r2,ASL#6
          ADD r5,r5,r4
          ADD r12,r12,r5
          LDR r10,smoke_base%
          ADD r10,r10,r0,ASL#8
        ]


        FOR smk%=0 TO63

          [OPT 10
            LDR r0,[r10],#4
            STRB r3,[r12,r0]
          ]

        NEXT smk%


        [OPT 10

          .end_plot_smoke
        LDMFA (sp)!,{r0-r10,r12,link}
        MOV PC,link

        .plot_small_smoke
        MOV r5,#1
        MOVS r2,r2
        SUBLT r5,r5,#1
        CMP r2,#255
        SUBGE r5,r5,#1
        MOVS r1,r1
        SUBLT r5,r5,#1
        CMP r1,#316
        SUBGT r5,r5,#1
        MOVS r5,r5
        LDMLEFA (sp)!,{r0-r10,r12,link}
        MOVLE PC,link
        LDR r12,screen_adr%
        ADD r12,r12,r1
        MOV r4,r2,ASL#8
        MOV r5,r2,ASL#6
        ADD r5,r5,r4
        ADD r12,r12,r5
        STRB r3,[r12],#1
        STRB r3,[r12],#316
        STRB r3,[r12,#3]
        STRB r3,[r12,#4]
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .plot_sprite32
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r12,screen_adr%
        MOV r1,r1,ASL#5
        MOV r2,r2,ASL#5
        ADD r12,r12,r1
        MOV r3,r2,ASL#8
        MOV r4,r2,ASL#6
        ADD r3,r3,r4
        ADD r12,r12,r3
        LDR r9,polygon_workspace_base%
        LDR r10,[r9,#36]
        ADD r10,r10,r0,ASL#10
        MOV r9,#32

        .plot_sprite32_loop
          LDMIA r10!,{r0-r7}
          STMIA r12,{r0-r7}
          ADD r12,r12,#320
          SUBS r9,r9,#1
        BGT plot_sprite32_loop

      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .screen_store_base% EQUD screen_store%

      .store_screen
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r12,screen_adr%
        LDR r10,screen_store_base%
        MOV r9,#256

        .store_screen_loop
          LDMIA r12!,{r0-r7}
          STMIA r10!,{r0-r7}
          LDMIA r12!,{r0-r7}
          STMIA r10!,{r0-r7}
          LDMIA r12!,{r0-r7}
          STMIA r10!,{r0-r7}
          LDMIA r12!,{r0-r7}
          STMIA r10!,{r0-r7}
          LDMIA r12!,{r0-r7}
          STMIA r10!,{r0-r7}
          LDMIA r12!,{r0-r7}
          STMIA r10!,{r0-r7}
          LDMIA r12!,{r0-r7}
          STMIA r10!,{r0-r7}
          LDMIA r12!,{r0-r7}
          STMIA r10!,{r0-r7}
          LDMIA r12!,{r0-r7}
          STMIA r10!,{r0-r7}
          LDMIA r12!,{r0-r7}
          STMIA r10!,{r0-r7}
          SUBS r9,r9,#1
        BGT store_screen_loop

      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .refresh_screen
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r12,screen_adr%
        LDR r10,screen_store_base%
        MOV r9,#256

        .refresh_screen_loop
          LDMIA r10!,{r0-r7}
          STMIA r12!,{r0-r7}
          LDMIA r10!,{r0-r7}
          STMIA r12!,{r0-r7}
          LDMIA r10!,{r0-r7}
          STMIA r12!,{r0-r7}
          LDMIA r10!,{r0-r7}
          STMIA r12!,{r0-r7}
          LDMIA r10!,{r0-r7}
          STMIA r12!,{r0-r7}
          LDMIA r10!,{r0-r7}
          STMIA r12!,{r0-r7}
          LDMIA r10!,{r0-r7}
          STMIA r12!,{r0-r7}
          LDMIA r10!,{r0-r7}
          STMIA r12!,{r0-r7}
          LDMIA r10!,{r0-r7}
          STMIA r12!,{r0-r7}
          LDMIA r10!,{r0-r7}
          STMIA r12!,{r0-r7}
          SUBS r9,r9,#1
        BGT refresh_screen_loop

      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .texturemap_divisions_base% EQUD texturemap_divisions%

      .scaled_spr_scan_line
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r12,screen_adr%
        LDR r9,polygon_workspace_base%
        LDR r10,[r9,#36]
        ADD r10,r10,r4,ASL#10
        ADD r10,r10,r3,ASL#5
        MOV r3,r1,ASL#8
        MOV r4,r1,ASL#6
        ADD r3,r3,r4
        ADD r12,r12,r3
        ADD r12,r12,r0
        LDR r9,texturemap_divisions_base%
        LDR r3,[r9,r2,ASL#2]
        MOV r4,#0

        .scaled_spr_scan_line_loop
          LDRB r8,[r10,r4,ASR#8]
          MOVS r8,r8
          STRNEB r8,[r12],#1
          ADDEQ r12,r12,#1
          ADD r4,r4,r3
          SUBS r2,r2,#1
        BGT scaled_spr_scan_line_loop

      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .split_spr_scan_line
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r12,screen_adr%
        LDR r9,polygon_workspace_base%
        LDR r10,[r9,#36]
        ADD r10,r10,r4,ASL#10
        ADD r10,r10,r3,ASL#5
        MOV r3,r1,ASL#8
        MOV r4,r1,ASL#6
        ADD r3,r3,r4
        ADD r12,r12,r3
        ADD r12,r12,r0
        MOV r4,#32
        FNswm_rdiv_sca8(2,4,3)
        MOV r0,#0

        .split_spr_scan_line_loop
          LDRB r5,[r10],#1
          MOVS r5,r5
          STRNEB r5,[r12,r0,ASR#8]
          ADD r0,r0,r3
          SUBS r4,r4,#1
        BGT split_spr_scan_line_loop

      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .black_rectangle
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r12,screen_adr%
        MOV r0,r0,LSR#2
        MOV r1,#0

        .black_loop
          STR r1,[r12],#4
          SUBS r0,r0,#1
        BGT black_loop

      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .screen_fade
      STMFA (sp)!,{r0-r10,r12,link}
        BL request_screen_adr

        MOV r1,r0
        MOV r1,r1,LSR#2
        MOV r2,#20480
        MOV r10,#5120
        BIC r8,r0,#12
        MUL r0,r2,r1
        ADD r12,r12,r0
        BL black_rectangle


        .fade_loop
          LDR r9,[r12]
          MOV r4,#1
          MOV r5,#3
          MOV r0,#0
          MOV r1,#0
          MOV r2,#0
          MOV r3,#0
          ANDr1,r9,r5,LSL#5
          MOV r1,r1,LSR#5
          TST r9,r4,LSL#4
          ORRNE r0,r0,r4,LSL#1
          TST r9,r4,LSL#2
          ORRNE r0,r0,r4
          TST r9,r4,LSL#7
          ORRNE r2,r2,r4,LSL#1
          TST r9,r4,LSL#3
          ORRNE r2,r2,r4
          SUBS r0,r0,r8
          MOVLT r0,#0
          SUBS r1,r1,r8
          MOVLT r1,#0
          SUBS r2,r2,r8
          MOVLT r2,#0
          ANDr3,r1,r5
          MOV r3,r3,LSL#5
          TST r0,r4,LSL#1
          ORRNE r3,r3,r4,LSL#4
          TST r0,r4
          ORRNE r3,r3,r4,LSL#2
          TST r2,r4,LSL#1
          ORRNE r3,r3,r4,LSL#7
          TST r2,r4
          ORRNE r3,r3,r4,LSL#3
          MOV r0,#0
          MOV r1,#0
          MOV r2,#0
          MOV r6,r4,LSL#8
          MOV r7,r5,LSL#8
          ANDr1,r9,r7,LSL#5
          MOV r1,r1,LSR#13
          TST r9,r6,LSL#4
          ORRNE r0,r0,r4,LSL#1
          TST r9,r6,LSL#2
          ORRNE r0,r0,r4
          TST r9,r6,LSL#7
          ORRNE r2,r2,r4,LSL#1
          TST r9,r6,LSL#3
          ORRNE r2,r2,r4
          SUBS r0,r0,r8
          MOVLT r0,#0
          SUBS r1,r1,r8
          MOVLT r1,#0
          SUBS r2,r2,r8
          MOVLT r2,#0
          TST r0,r4,LSL#1
          ORRNE r3,r3,r6,LSL#4
          TST r0,r4
          ORRNE r3,r3,r6,LSL#2
          TST r2,r4,LSL#1
          ORRNE r3,r3,r6,LSL#7
          TST r2,r4
          ORRNE r3,r3,r6,LSL#3
          ANDr0,r1,r5
          MOV r0,r0,LSL#13
          ORR r3,r3,r0
          MOV r0,#0
          MOV r1,#0
          MOV r2,#0
          MOV r6,r4,LSL#16
          MOV r7,r5,LSL#16
          ANDr1,r9,r7,LSL#5
          MOV r1,r1,LSR#21
          TST r9,r6,LSL#4
          ORRNE r0,r0,r4,LSL#1
          TST r9,r6,LSL#2
          ORRNE r0,r0,r4
          TST r9,r6,LSL#7
          ORRNE r2,r2,r4,LSL#1
          TST r9,r6,LSL#3
          ORRNE r2,r2,r4
          SUBS r0,r0,r8
          MOVLT r0,#0
          SUBS r1,r1,r8
          MOVLT r1,#0
          SUBS r2,r2,r8
          MOVLT r2,#0
          TST r0,r4,LSL#1
          ORRNE r3,r3,r6,LSL#4
          TST r0,r4
          ORRNE r3,r3,r6,LSL#2
          TST r2,r4,LSL#1
          ORRNE r3,r3,r6,LSL#7
          TST r2,r4
          ORRNE r3,r3,r6,LSL#3
          ANDr0,r1,r5
          MOV r0,r0,LSL#21
          ORR r3,r3,r0
          MOV r0,#0
          MOV r1,#0
          MOV r2,#0
          MOV r6,r4,LSL#24
          MOV r7,r5,LSL#24
          ANDr1,r9,r7,LSL#5
          MOV r1,r1,LSR#29
          TST r9,r6,LSL#4
          ORRNE r0,r0,r4,LSL#1
          TST r9,r6,LSL#2
          ORRNE r0,r0,r4
          TST r9,r6,LSL#7
          ORRNE r2,r2,r4,LSL#1
          TST r9,r6,LSL#3
          ORRNE r2,r2,r4
          SUBS r0,r0,r8
          MOVLT r0,#0
          SUBS r1,r1,r8
          MOVLT r1,#0
          SUBS r2,r2,r8
          MOVLT r2,#0
          TST r0,r4,LSL#1
          ORRNE r3,r3,r6,LSL#4
          TST r0,r4
          ORRNE r3,r3,r6,LSL#2
          TST r2,r4,LSL#1
          ORRNE r3,r3,r6,LSL#7
          TST r2,r4
          ORRNE r3,r3,r6,LSL#3
          ANDr0,r1,r5
          MOV r0,r0,LSL#29
          ORR r3,r3,r0
          STR r3,[r12],#4
          SUBS r10,r10,#1
        BGT fade_loop

      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .section_fade
      STMFA (sp)!,{r0-r10,r12,link}
        LDR r12,screen_adr%
        MOV r3,r1,ASL#8
        MOV r4,r1,ASL#6
        ADD r3,r3,r4
        MOV r4,r2,ASL#8
        MOV r5,r2,ASL#6
        ADD r4,r4,r5
        ADD r12,r12,r3
        SUB r10,r4,r3
        MOV r10,r10,ASR#2
        MOV r8,r0

        .sec_fade_loop
          LDR r9,[r12]
          MOV r4,#1
          MOV r5,#3
          MOV r0,#0
          MOV r1,#0
          MOV r2,#0
          MOV r3,#0
          ANDr1,r9,r5,LSL#5
          MOV r1,r1,LSR#5
          TST r9,r4,LSL#4
          ORRNE r0,r0,r4,LSL#1
          TST r9,r4,LSL#2
          ORRNE r0,r0,r4
          TST r9,r4,LSL#7
          ORRNE r2,r2,r4,LSL#1
          TST r9,r4,LSL#3
          ORRNE r2,r2,r4
          SUBS r0,r0,r8
          MOVLT r0,#0
          SUBS r1,r1,r8
          MOVLT r1,#0
          SUBS r2,r2,r8
          MOVLT r2,#0
          ANDr3,r1,r5
          MOV r3,r3,LSL#5
          TST r0,r4,LSL#1
          ORRNE r3,r3,r4,LSL#4
          TST r0,r4
          ORRNE r3,r3,r4,LSL#2
          TST r2,r4,LSL#1
          ORRNE r3,r3,r4,LSL#7
          TST r2,r4
          ORRNE r3,r3,r4,LSL#3
          MOV r0,#0
          MOV r1,#0
          MOV r2,#0
          MOV r6,r4,LSL#8
          MOV r7,r5,LSL#8
          ANDr1,r9,r7,LSL#5
          MOV r1,r1,LSR#13
          TST r9,r6,LSL#4
          ORRNE r0,r0,r4,LSL#1
          TST r9,r6,LSL#2
          ORRNE r0,r0,r4
          TST r9,r6,LSL#7
          ORRNE r2,r2,r4,LSL#1
          TST r9,r6,LSL#3
          ORRNE r2,r2,r4
          SUBS r0,r0,r8
          MOVLT r0,#0
          SUBS r1,r1,r8
          MOVLT r1,#0
          SUBS r2,r2,r8
          MOVLT r2,#0
          TST r0,r4,LSL#1
          ORRNE r3,r3,r6,LSL#4
          TST r0,r4
          ORRNE r3,r3,r6,LSL#2
          TST r2,r4,LSL#1
          ORRNE r3,r3,r6,LSL#7
          TST r2,r4
          ORRNE r3,r3,r6,LSL#3
          ANDr0,r1,r5
          MOV r0,r0,LSL#13
          ORR r3,r3,r0
          MOV r0,#0
          MOV r1,#0
          MOV r2,#0
          MOV r6,r4,LSL#16
          MOV r7,r5,LSL#16
          ANDr1,r9,r7,LSL#5
          MOV r1,r1,LSR#21
          TST r9,r6,LSL#4
          ORRNE r0,r0,r4,LSL#1
          TST r9,r6,LSL#2
          ORRNE r0,r0,r4
          TST r9,r6,LSL#7
          ORRNE r2,r2,r4,LSL#1
          TST r9,r6,LSL#3
          ORRNE r2,r2,r4
          SUBS r0,r0,r8
          MOVLT r0,#0
          SUBS r1,r1,r8
          MOVLT r1,#0
          SUBS r2,r2,r8
          MOVLT r2,#0
          TST r0,r4,LSL#1
          ORRNE r3,r3,r6,LSL#4
          TST r0,r4
          ORRNE r3,r3,r6,LSL#2
          TST r2,r4,LSL#1
          ORRNE r3,r3,r6,LSL#7
          TST r2,r4
          ORRNE r3,r3,r6,LSL#3
          ANDr0,r1,r5
          MOV r0,r0,LSL#21
          ORR r3,r3,r0
          MOV r0,#0
          MOV r1,#0
          MOV r2,#0
          MOV r6,r4,LSL#24
          MOV r7,r5,LSL#24
          ANDr1,r9,r7,LSL#5
          MOV r1,r1,LSR#29
          TST r9,r6,LSL#4
          ORRNE r0,r0,r4,LSL#1
          TST r9,r6,LSL#2
          ORRNE r0,r0,r4
          TST r9,r6,LSL#7
          ORRNE r2,r2,r4,LSL#1
          TST r9,r6,LSL#3
          ORRNE r2,r2,r4
          SUBS r0,r0,r8
          MOVLT r0,#0
          SUBS r1,r1,r8
          MOVLT r1,#0
          SUBS r2,r2,r8
          MOVLT r2,#0
          TST r0,r4,LSL#1
          ORRNE r3,r3,r6,LSL#4
          TST r0,r4
          ORRNE r3,r3,r6,LSL#2
          TST r2,r4,LSL#1
          ORRNE r3,r3,r6,LSL#7
          TST r2,r4
          ORRNE r3,r3,r6,LSL#3
          ANDr0,r1,r5
          MOV r0,r0,LSL#29
          ORR r3,r3,r0
          STR r3,[r12],#4
          SUBS r10,r10,#1
        BGT sec_fade_loop

      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .section_store_base% EQUD section_store%

      .store_section
      STMFA (sp)!,{r0-r10,r12,link}
        BL request_screen_adr

        LDR r10,section_store_base%
        MOV r1,r0,ASL#8
        MOV r2,r0,ASL#6
        ADD r1,r1,r2
        ADD r12,r12,r1
        MOV r9,#3840

        .sec_store_lp
        LDR r0,[r12],#4
        STR r0,[r10],#4
        SUBS r9,r9,#4
        BGE sec_store_lp
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .refresh_section
      STMFA (sp)!,{r0-r10,r12,link}
        BL request_screen_adr

        LDR r10,section_store_base%
        MOV r1,r0,ASL#8
        MOV r2,r0,ASL#6
        ADD r1,r1,r2
        ADD r12,r12,r1
        MOV r9,#3840

        .sec_refresh_lp
        LDR r0,[r10],#4
        STR r0,[r12],#4
        SUBS r9,r9,#4
        BGE sec_refresh_lp
      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link

      .whole_screen_fade
      STMFA (sp)!,{r0-r10,r12,link}
        BL request_screen_adr

        MOV r10,#20480
        MOV r8,r0

        .whole_fade_loop
          LDR r9,[r12]
          MOV r4,#1
          MOV r5,#3
          MOV r0,#0
          MOV r1,#0
          MOV r2,#0
          MOV r3,#0
          ANDr1,r9,r5,LSL#5
          MOV r1,r1,LSR#5
          TST r9,r4,LSL#4
          ORRNE r0,r0,r4,LSL#1
          TST r9,r4,LSL#2
          ORRNE r0,r0,r4
          TST r9,r4,LSL#7
          ORRNE r2,r2,r4,LSL#1
          TST r9,r4,LSL#3
          ORRNE r2,r2,r4
          SUBS r0,r0,r8
          MOVLT r0,#0
          SUBS r1,r1,r8
          MOVLT r1,#0
          SUBS r2,r2,r8
          MOVLT r2,#0
          ANDr3,r1,r5
          MOV r3,r3,LSL#5
          TST r0,r4,LSL#1
          ORRNE r3,r3,r4,LSL#4
          TST r0,r4
          ORRNE r3,r3,r4,LSL#2
          TST r2,r4,LSL#1
          ORRNE r3,r3,r4,LSL#7
          TST r2,r4
          ORRNE r3,r3,r4,LSL#3
          MOV r0,#0
          MOV r1,#0
          MOV r2,#0
          MOV r6,r4,LSL#8
          MOV r7,r5,LSL#8
          ANDr1,r9,r7,LSL#5
          MOV r1,r1,LSR#13
          TST r9,r6,LSL#4
          ORRNE r0,r0,r4,LSL#1
          TST r9,r6,LSL#2
          ORRNE r0,r0,r4
          TST r9,r6,LSL#7
          ORRNE r2,r2,r4,LSL#1
          TST r9,r6,LSL#3
          ORRNE r2,r2,r4
          SUBS r0,r0,r8
          MOVLT r0,#0
          SUBS r1,r1,r8
          MOVLT r1,#0
          SUBS r2,r2,r8
          MOVLT r2,#0
          TST r0,r4,LSL#1
          ORRNE r3,r3,r6,LSL#4
          TST r0,r4
          ORRNE r3,r3,r6,LSL#2
          TST r2,r4,LSL#1
          ORRNE r3,r3,r6,LSL#7
          TST r2,r4
          ORRNE r3,r3,r6,LSL#3
          ANDr0,r1,r5
          MOV r0,r0,LSL#13
          ORR r3,r3,r0
          MOV r0,#0
          MOV r1,#0
          MOV r2,#0
          MOV r6,r4,LSL#16
          MOV r7,r5,LSL#16
          ANDr1,r9,r7,LSL#5
          MOV r1,r1,LSR#21
          TST r9,r6,LSL#4
          ORRNE r0,r0,r4,LSL#1
          TST r9,r6,LSL#2
          ORRNE r0,r0,r4
          TST r9,r6,LSL#7
          ORRNE r2,r2,r4,LSL#1
          TST r9,r6,LSL#3
          ORRNE r2,r2,r4
          SUBS r0,r0,r8
          MOVLT r0,#0
          SUBS r1,r1,r8
          MOVLT r1,#0
          SUBS r2,r2,r8
          MOVLT r2,#0
          TST r0,r4,LSL#1
          ORRNE r3,r3,r6,LSL#4
          TST r0,r4
          ORRNE r3,r3,r6,LSL#2
          TST r2,r4,LSL#1
          ORRNE r3,r3,r6,LSL#7
          TST r2,r4
          ORRNE r3,r3,r6,LSL#3
          ANDr0,r1,r5
          MOV r0,r0,LSL#21
          ORR r3,r3,r0
          MOV r0,#0
          MOV r1,#0
          MOV r2,#0
          MOV r6,r4,LSL#24
          MOV r7,r5,LSL#24
          ANDr1,r9,r7,LSL#5
          MOV r1,r1,LSR#29
          TST r9,r6,LSL#4
          ORRNE r0,r0,r4,LSL#1
          TST r9,r6,LSL#2
          ORRNE r0,r0,r4
          TST r9,r6,LSL#7
          ORRNE r2,r2,r4,LSL#1
          TST r9,r6,LSL#3
          ORRNE r2,r2,r4
          SUBS r0,r0,r8
          MOVLT r0,#0
          SUBS r1,r1,r8
          MOVLT r1,#0
          SUBS r2,r2,r8
          MOVLT r2,#0
          TST r0,r4,LSL#1
          ORRNE r3,r3,r6,LSL#4
          TST r0,r4
          ORRNE r3,r3,r6,LSL#2
          TST r2,r4,LSL#1
          ORRNE r3,r3,r6,LSL#7
          TST r2,r4
          ORRNE r3,r3,r6,LSL#3
          ANDr0,r1,r5
          MOV r0,r0,LSL#29
          ORR r3,r3,r0
          STR r3,[r12],#4
          SUBS r10,r10,#1
        BGT whole_fade_loop

      LDMFA (sp)!,{r0-r10,r12,link}
      MOV PC,link
    ]

  NEXT pass%


ENDPROC


DEF PROCdisplay_single_object

  LOCAL object%,ff%,cnt%
  cnt%=0
  object%=1
  D%=180
  E%=0

  REPEAT
    MOUSE mx,my,b
    CALL screen_swap
    CALL clr_scr

    IF INKEY-59:object%+=1

    IF INKEY-60:object%-=1

    IF object%<0:object%=0

    IF object%>=no_of_objects%:object%=(no_of_objects%-1)
    A%=object%
    B%=0
    C%=0
    F%=(my/8)
    E%+=(mx/32)

    IF E%>=360:E%-=360
    CALL display_object

    IF b=4:OSCLI"SCREENSAVE <Perpetual_Motion$Dir>.ScrShots.Scrn"+STR$~cnt%:cnt%+=1
  UNTIL0


ENDPROC


DEF FNint_div(nu,div,qu,rem)

  LOCAL mark%()
  DIM mark%(12)
  mark%()=0
  mark%(nu)=1
  mark%(div)=1
  mark%(qu)=1
  mark%(rem)=1
  mark%(11)=1
  I%=0

  REPEAT

    IF mark%(I%)=0:pl =I%:mark%(I%)=1:I%=13
    I%+=1
  UNTIL I%>=13

  I%=0

  REPEAT

    IF mark%(I%)=0:ds =I%:mark%(I%)=1:I%=13
    I%+=1
  UNTIL I%>=13

  I%=0

  REPEAT

    IF mark%(I%)=0:ms =I%:mark%(I%)=1:I%=13
    I%+=1
  UNTIL I%>=13


  [OPT pass%
    STMFA (sp)!,{nu,div,pl,ds,ms}
      ANDS ms,nu,#1<<31
      RSBMI nu,nu,#0
      EORds,ms,div
      CMP div,#0
      RSBMI div,div,#0
      MOV rem,#0
      MOV qu,#0
      MOV pl,#1<<31
    ]


    FOR I%=0 TO31

      [OPT pass%
        MOVS nu,nu,ASL#1
        ADC rem,rem,rem
        CMP rem,div
        SUBGE rem,rem,div
        ORRGE qu,qu,pl
        MOVS pl,pl,LSR#1
      ]

    NEXT I%


    [OPT pass%
      CMP ds,#0
      RSBMI qu,qu,#0
      CMP ms,#0
      RSBMI rem,rem,#0
    LDMFA (sp)!,{nu,div,pl,ds,ms}
  ]


=0



DEF FNswm_rdiv_act(no%,div%,ans%)

  wk0%=0
  wk1%=1
  wk2%=2
  LOCAL wk0%,wk1%,wk2%,I%

  FOR I%=0 TO14

    IF wk0%=no%:wk0%+=1

    IF wk0%=div%:wk0%+=1

    IF wk0%=ans%:wk0%+=1

    IF wk0%=wk1%:wk0%+=1

    IF wk0%=wk2%:wk0%+=1
  NEXT I%


  FOR I%=0 TO14

    IF wk1%=no%:wk1%+=1

    IF wk1%=div%:wk1%+=1

    IF wk1%=ans%:wk1%+=1

    IF wk1%=wk0%:wk1%+=1

    IF wk1%=wk2%:wk1%+=1
  NEXT I%


  FOR I%=0 TO14

    IF wk2%=no%:wk2%+=1

    IF wk2%=div%:wk2%+=1

    IF wk2%=ans%:wk2%+=1

    IF wk2%=wk0%:wk2%+=1

    IF wk2%=wk1%:wk2%+=1
  NEXT I%


  IF wk0%=wk1%:ERROR0,(" identical work registers in division macro... "):END

  IF wk1%=wk2%:ERROR0,(" identical work registers in division macro... "):END

  IF wk0%=wk2%:ERROR0,(" identical work registers in division macro... "):END

  IF no%=div%:ERROR0,(" identical analytical registers in division macro... "):END

  IF div%=ans%:ERROR0,(" identical analytical registers in division macro... "):END

  IF no%=ans%:ERROR0,(" identical analytical registers in division macro... "):END

  [OPT pass%
    STMFA (sp)!,{wk0%,wk1%,wk2%}
      LDR wk0%,swm_rdiv_list_base%
      ANDS wk1%,div%,#1<<31
      RSBMI div%,div%,#0
      LDR wk2%,[wk0%,div%,LSL#2]
      MUL ans%,wk2%,no%
      MOV ans%,ans%,ASR#div_scale%
      CMP wk1%,#0
      RSBMI ans%,ans%,#0
    LDMFA (sp)!,{wk0%,wk1%,wk2%}
  ]


=0



DEF FNswm_rdiv_sca(no%,div%,ans%)

  wk0%=0
  wk1%=1
  wk2%=2
  LOCAL wk0%,wk1%,wk2%,I%

  FOR I%=0 TO14

    IF wk0%=no%:wk0%+=1

    IF wk0%=div%:wk0%+=1

    IF wk0%=ans%:wk0%+=1

    IF wk0%=wk1%:wk0%+=1

    IF wk0%=wk2%:wk0%+=1
  NEXT I%


  FOR I%=0 TO14

    IF wk1%=no%:wk1%+=1

    IF wk1%=div%:wk1%+=1

    IF wk1%=ans%:wk1%+=1

    IF wk1%=wk0%:wk1%+=1

    IF wk1%=wk2%:wk1%+=1
  NEXT I%


  FOR I%=0 TO14

    IF wk2%=no%:wk2%+=1

    IF wk2%=div%:wk2%+=1

    IF wk2%=ans%:wk2%+=1

    IF wk2%=wk0%:wk2%+=1

    IF wk2%=wk1%:wk2%+=1
  NEXT I%


  IF wk0%=wk1%:ERROR0,(" identical work registers in division macro... "):END

  IF wk1%=wk2%:ERROR0,(" identical work registers in division macro... "):END

  IF wk0%=wk2%:ERROR0,(" identical work registers in division macro... "):END

  IF no%=div%:ERROR0,(" identical analytical registers in division macro... "):END

  IF div%=ans%:ERROR0,(" identical analytical registers in division macro... "):END

  IF no%=ans%:ERROR0,(" identical analytical registers in division macro... "):END

  [OPT pass%
    STMFA (sp)!,{wk0%,wk1%,wk2%}
      LDR wk0%,swm_rdiv_list_base%
      ANDS wk1%,div%,#1<<31
      RSBMI div%,div%,#0
      LDR wk2%,[wk0%,div%,LSL#2]
      MUL ans%,wk2%,no%
      CMP wk1%,#0
      RSBMI ans%,ans%,#0
    LDMFA (sp)!,{wk0%,wk1%,wk2%}
  ]


=0



DEF FNswm_rdiv_sca8(no%,div%,ans%)

  wk0%=0
  wk1%=1
  wk2%=2
  LOCAL wk0%,wk1%,wk2%,I%

  FOR I%=0 TO14

    IF wk0%=no%:wk0%+=1

    IF wk0%=div%:wk0%+=1

    IF wk0%=ans%:wk0%+=1

    IF wk0%=wk1%:wk0%+=1

    IF wk0%=wk2%:wk0%+=1
  NEXT I%


  FOR I%=0 TO14

    IF wk1%=no%:wk1%+=1

    IF wk1%=div%:wk1%+=1

    IF wk1%=ans%:wk1%+=1

    IF wk1%=wk0%:wk1%+=1

    IF wk1%=wk2%:wk1%+=1
  NEXT I%


  FOR I%=0 TO14

    IF wk2%=no%:wk2%+=1

    IF wk2%=div%:wk2%+=1

    IF wk2%=ans%:wk2%+=1

    IF wk2%=wk0%:wk2%+=1

    IF wk2%=wk1%:wk2%+=1
  NEXT I%


  IF wk0%=wk1%:ERROR0,(" identical work registers in division macro... "):END

  IF wk1%=wk2%:ERROR0,(" identical work registers in division macro... "):END

  IF wk0%=wk2%:ERROR0,(" identical work registers in division macro... "):END

  IF no%=div%:ERROR0,(" identical analytical registers in division macro... "):END

  IF div%=ans%:ERROR0,(" identical analytical registers in division macro... "):END

  IF no%=ans%:ERROR0,(" identical analytical registers in division macro... "):END

  [OPT pass%
    STMFA (sp)!,{wk0%,wk1%,wk2%}
      LDR wk0%,swm_rdiv_list_base%
      ANDS wk1%,div%,#1<<31
      RSBMI div%,div%,#0
      LDR wk2%,[wk0%,div%,LSL#2]
      MUL ans%,wk2%,no%
      MOV ans%,ans%,ASR#(div_scale%-8)
      CMP wk1%,#0
      RSBMI ans%,ans%,#0
    LDMFA (sp)!,{wk0%,wk1%,wk2%}
  ]


=0


;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
;/////////////////////////////////////////////////////////////////////

DEF PROCsetup_3d_world

  world_data_size%=64
  DIM world_data% (world_data_size%*1024)
  DIM world_data_header% 100
  P%=world_data%
  L%=world_data% +(world_data_size%*1024)
  gnd_objects_no%=145
  world_objects_no%=145
  orig_gnd_base%=FNinit_orig_gnd_base
  trans_gnd_base%=FNinit_trans_gnd_base
  gnd_ob_header_base%=FNinit_gnd_header
  world_orig_data_base%=FNinit_world_orig_data_base
  world_trans_data_base%=FNinit_world_trans_data_base
  world_visible_object_list_base%=FNinit_world_visible_object_list_base
  world_ob_header_base%=FNinit_world_ob_header_base
  !world_data_header%=gnd_ob_header_base%
  !(world_data_header%+4)=world_ob_header_base%
  craft_motion_control_base%=FNinit_craft_motion_control
  !(world_data_header%+8)=craft_motion_control_base%
  !(craft_motion_control_base%+104)=1
  fh=OPENIN"<Perpetual_Motion$Dir>.GroundNets.GNetData"
  INPUT#fh,no_of_groundnets%
  groundnet_data_base%=FNinitialise_groundnet_data
  !(world_data_header%+12)=groundnet_data_base%
  CLOSE#fh
  no_of_boundaries%=60
  boundary_data_base%=FNinitialise_boundary_data
  !(world_data_header%+16)=boundary_data_base%
  !(world_data_header%+20)=no_of_boundaries%
  no_of_path_points%=20
  path_data_base%=FNinitialise_path_data
  !(world_data_header%+24)=path_data_base%
  checkzone_data_base%=FNinitialise_checkzones
  !(world_data_header%+28)=checkzone_data_base%
  race_data_base%=FNinit_race_data
  !(world_data_header%+32)=race_data_base%
  no_of_effects_tiles%=24
  effects_tiles_base%=FNinit_effects_tiles
  !(world_data_header%+36)=effects_tiles_base%
  smoke_streams_base%=FNinit_smoke_streams
  !(world_data_header%+40)=smoke_streams_base%
  missiles_base%=FNinit_missiles
  !(world_data_header%+44)=missiles_base%
  !(world_data_header%+48)=0
  !(world_data_header%+52)=1
  text_base%=FNinit_text
  !(world_data_header%+56)=text_base%
  explosion_z_table_base%=FNinit_explosion_z_table
  !(world_data_header%+60)=explosion_z_table_base%
  exposion_pos_base%=FNinit_explosion_data
  !(world_data_header%+64)=exposion_pos_base%
  league_data_base%=FNinit_league
  !(world_data_header%+68)=league_data_base%
  DIM reclap% 4
  !(world_data_header%+72)=!reclap%

ENDPROC


DEF FNinit_league

  LOCAL adr%
  adr%=P%

  [OPT 10
    EQUD 0
    EQUD 0
  ]


=adr%



DEF FNinit_explosion_data

  LOCAL adr%,I%
  adr%=P%

  [OPT 10
    EQUD 0
  ]

  z=-2500

  FOR I%=0 TO15

    [OPT 10
      EQUD -250
      EQUD -60
      EQUD z
      EQUD 0
    ]

    z+=60
  NEXT I%


=adr%



DEF FNinit_explosion_z_table

  LOCAL adr%,I%,z%,size%
  adr%=P%

  FOR z%=50 TO4096
    size%=(64*256)/z%

    [OPT 10
      EQUD size%
    ]

  NEXT z%


=adr%



DEF FNinit_text

  LOCAL adr%,I%,text_strm_no%
  adr%=P%
  text_strm_no%=25

  FOR I%=0 TO(text_strm_no%-1)

    [OPT 10
      EQUD 0
      EQUD 0
      EQUD 5
    ]


    FOR J%=0 TO255

      [OPT 10
        EQUB RND(9)
      ]

    NEXT J%

  NEXT I%

  OSCLI"LOAD <Perpetual_Motion$Dir>.TxtDat "+STR$~adr%

=adr%



DEF FNinit_missiles

  LOCAL adr%,I%
  adr%=P%

  FOR I%=0 TO2

    [OPT 10
      EQUD 0
      EQUD 0
      EQUD ((RND(100)-50)<<10)
      EQUD 0
      EQUD ((RND(100)-50)<<10)
      EQUD 0
      EQUD 0
      EQUD 0
      EQUD 0
      EQUD 0
      EQUD (20<<10)
      EQUD 0
      EQUD 0
      EQUD 0
      EQUD 0
      EQUD 0
    ]

  NEXT I%


=adr%



DEF FNinit_smoke_streams

  LOCAL adr%,smkel%,z_smoke_pos%
  adr%=P%

  [OPT 10
    EQUD 0
    EQUD 0
    EQUD 0
    EQUD 0
    EQUD 0
    EQUD 0
    EQUD 0
    EQUD 0
    EQUD 0
    EQUD 0
    EQUD 0
    EQUD 0
    EQUD 0
    EQUD 0
    EQUD 0
    EQUD 0
  ]

  z_smoke_pos%=-2500

  FOR smkel%=0 TO255

    [OPT 10
      EQUD RND(300)-150
      EQUD -20+(RND(40)-20)
      EQUD z_smoke_pos%
      EQUD 0
    ]

    z_smoke_pos%+=4
  NEXT smkel%


=adr%



DEF FNinit_effects_tiles

  LOCAL adr%,I%
  adr%=P%

  [OPT 10
    EQUD no_of_effects_tiles%
  ]


  FOR I%=0 TO(no_of_effects_tiles%-1)

    [OPT 10
      EQUD 0
      EQUD -75
      EQUD 75
    ]

  NEXT I%


=adr%



DEF FNinit_race_data

  LOCAL adr%,I%
  adr%=P%

  [OPT 10
    EQUD 0
    EQUD 8
    EQUD 0
    EQUD 0
    EQUD 0
    EQUD 0
    EQUD 0
    EQUD 0
    EQUD 0
    EQUD 0
    EQUD 0
    EQUD 0
    EQUD 0
    EQUD 0
    EQUD 0
    EQUD 0
    EQUD 0
    EQUD 0
    EQUD 0
  ]


=adr%



DEF FNinitialise_checkzones

  LOCAL adr%,I%
  adr%=P%

  FOR I%=0 TO5

    [OPT 10
      EQUD 0
      EQUD 0
      EQUD 0
      EQUD 0
    ]

  NEXT I%


=adr%



DEF FNinitialise_path_data

  LOCAL adr%,pno%,x%,z%
  adr%=P%

  [OPT 10
    EQUD no_of_path_points%
  ]


  FOR pno%=0 TO(no_of_path_points%-1)

    [OPT 10
      EQUD 0
      EQUD 0
    ]

  NEXT pno%


=adr%



DEF FNinitialise_boundary_data

  LOCAL adr%,bno%,stat%,a%,b%,c%
  adr%=P%

  FOR bno%=0 TO(no_of_boundaries%-1)

    [OPT 10
      EQUD 0
      EQUD 0
      EQUD 0
      EQUD 0
      EQUD 0
      EQUD 0
    ]

  NEXT bno%


=adr%



DEF FNinitialise_groundnet_data

  LOCAL adr%,gnet%,facet%,type%,p0%,p1%,p2%,p3%
  adr%=P%

  FOR gnet%=0 TO(no_of_groundnets%-1)

    FOR facet%=0 TO35
      INPUT#fh,type%
      INPUT#fh,p0%
      INPUT#fh,p1%
      INPUT#fh,p2%
      INPUT#fh,p3%

      [OPT 10
        EQUD type%
        EQUD p0%
        EQUD p1%
        EQUD p2%
        EQUD p3%
      ]

    NEXT facet%

  NEXT gnet%


=adr%



DEF FNinit_craft_motion_control

  LOCAL adr%,craft%,z_craft_coord%,x_craft_coord%
  adr%=P%
  z_craft_coord%=-2500
  x_craft_coord%=-250

  FOR craft%=0 TO4

    [OPT 10
      EQUD (x_craft_coord%<<10)
      EQUD (-60<<10)
      EQUD (z_craft_coord%<<10)
      EQUD 0
      EQUD 0
      EQUD 0
      EQUD 0
      EQUD 0
      EQUD 0
      EQUD 0
      EQUD 0
      EQUD 92
      EQUD 0
      EQUD 16
      EQUD 0
      EQUD 0
      EQUD (6<<10)+512
      EQUD (1<<10)
      EQUD 6
      EQUD 1
      EQUD 1
      EQUD 0
      EQUD 0
      EQUD 0
      EQUD 0
      EQUD 100
      EQUD 0
      EQUD 0
      EQUD 40<<10
      EQUD 5
      EQUD 3
      EQUD 8128
    ]

    z_craft_coord%+=300
    x_craft_coord%=x_craft_coord%*-1
  NEXT craft%


=adr%



DEF FNinit_world_orig_data_base

  LOCAL adr%,el%,ob%,z
  adr%=P%
  z=0

  FOR el%=0 TO(world_objects_no%-1)
    ob%=3

    IF el%>=0:IF el%<=4:ob%=1

    IF el%>=5:IF el%<=7:ob%=21

    [OPT 10
      EQUD RND(100)-50
      EQUD -40
      EQUD z
      EQUD ob%
      EQUD 0
      EQUD 0
      EQUD 0
      EQUD 0
    ]

    z+=70
  NEXT el%


=adr%



DEF FNinit_world_trans_data_base

  LOCAL adr%,el%
  adr%=P%

  FOR el%=0 TO(world_objects_no%-1)

    [OPT 10
      EQUD 0
      EQUD 0
      EQUD 0
    ]

  NEXT el%


=adr%



DEF FNinit_world_visible_object_list_base

  LOCAL adr%,max_no_of_onscreen_objects%,el%
  max_no_of_onscreen_objects%=256
  adr%=P%

  FOR el%=0 TO(max_no_of_onscreen_objects%-1)

    [OPT 10
      EQUD 0
    ]

  NEXT el%


=adr%



DEF FNinit_world_ob_header_base

  LOCAL adr%
  adr%=P%

  [OPT 10
    EQUD world_objects_no%
    EQUD world_orig_data_base%
    EQUD world_trans_data_base%
    EQUD world_visible_object_list_base%
    EQUD 0
  ]


=adr%



DEF FNinit_orig_gnd_base

  LOCAL adr%,el%,z
  adr%=P%
  z=-2700

  FOR el%=0 TO(gnd_objects_no%-1)

    [OPT 10
      EQUD 0
      EQUD 0
      EQUD z
      EQUD -1
      EQUD 0
    ]

    z+=900
  NEXT el%


=adr%



DEF FNinit_trans_gnd_base

  LOCAL adr%,el%
  adr%=P%

  FOR el%=0 TO(gnd_objects_no%-1)

    [OPT 10
      EQUD 0
      EQUD 0
      EQUD 0
    ]

  NEXT el%


=adr%



DEF FNinit_gnd_header

  LOCAL adr%
  adr%=P%

  [OPT 10
    EQUD gnd_objects_no%
    EQUD orig_gnd_base%
    EQUD trans_gnd_base%
  ]


=adr%



DEF PROCsetup_3d_objects

  fh=OPENIN"<Perpetual_Motion$Dir>.Objects.ObjectData"
  INPUT#fh,no_of_objects%
  object_data_size%=64
  DIM object_data% (object_data_size%*1024)
  DIM object_header_list% (no_of_objects%*4)
  P%=object_data%
  L%=object_data% +(object_data_size%*1024)

  FOR object_no%=0 TO( no_of_objects%-1 )
    INPUT#fh,object_points%
    INPUT#fh,object_facets%
    INPUT#fh,object_status_a%
    INPUT#fh,object_status_b%
    object_orig_data%=FNinit_object_orig_data
    object_trans_data%=FNinit_object_trans_data
    object_proj_data%=FNinit_object_proj_data
    object_point_info_data%=FNinit_object_point_info_data
    object_render_data%=FNinit_object_render_data
    object_header%=FNinit_object_header
    object_header_list%!(object_no%*4)=object_header%
  NEXT object_no%

  CLOSE#fh

ENDPROC


DEF PROCload_object_set(obsetno%)


  IF obsetno%=0:fh=OPENIN"<Perpetual_Disc2$Dir>.Objects.ObjDataLD"

  IF obsetno%=1:fh=OPENIN"<Perpetual_Disc2$Dir>.Objects.ObjDataMD"

  IF obsetno%=2:fh=OPENIN"<Perpetual_Disc2$Dir>.Objects.ObjDataHD"
  INPUT#fh,no_of_objects%

  FOR obno%=0 TO( no_of_objects%-1 )
    hdadr%=!(object_header_list%+(obno%*4))
    INPUT#fh,object_points%
    INPUT#fh,object_facets%
    INPUT#fh,object_status_a%
    INPUT#fh,object_status_b%
    hdadr%!0=object_status_a%
    hdadr%!4=object_status_b%
    hdadr%!8=object_points%
    hdadr%!12=object_facets%
    origadr%=!(hdadr%+16)

    FOR pt%=0 TO(object_points%-1)
      INPUT#fh,x%
      INPUT#fh,y%
      INPUT#fh,z%
      origadr%!0=x%
      origadr%!4=y%
      origadr%!8=z%
      origadr%+=12
    NEXT pt%

    rendadr%=!(hdadr%+32)

    FOR fac%=0 TO(object_facets%-1)
      INPUT#fh,type%
      INPUT#fh,p0%
      INPUT#fh,p1%
      INPUT#fh,p2%
      INPUT#fh,p3%
      rendadr%!0=type%
      rendadr%!4=p0%
      rendadr%!8=p1%
      rendadr%!12=p2%
      rendadr%!16=p3%
      rendadr%+=20
    NEXT fac%

  NEXT obno%

  CLOSE#fh

ENDPROC


DEF FNinit_object_header

  LOCAL adr%
  adr%=P%

  [OPT 10
    EQUD object_status_a%
    EQUD object_status_b%
    EQUD object_points%
    EQUD object_facets%
    EQUD object_orig_data%
    EQUD object_trans_data%
    EQUD object_proj_data%
    EQUD object_point_info_data%
    EQUD object_render_data%
    EQUD 0
    EQUD 0
    EQUD 0
    EQUD 0
    EQUD 0
    EQUD 0
    EQUD 5273
  ]


=adr%



DEF FNinit_object_orig_data

  LOCAL adr%,pno%,x%,y%,z%
  adr%=P%

  FOR pno%=0 TO(object_points%-1)
    INPUT#fh,x%
    INPUT#fh,y%
    INPUT#fh,z%

    [OPT 10
      EQUD x%
      EQUD y%
      EQUD z%
    ]

  NEXT pno%


=adr%



DEF FNinit_object_trans_data

  LOCAL adr%,pno%
  adr%=P%

  FOR pno%=0 TO(object_points%-1)

    [OPT 10
      EQUD 0
      EQUD 0
      EQUD 0
    ]

  NEXT pno%


=adr%



DEF FNinit_object_proj_data

  LOCAL adr%,pno%
  adr%=P%

  FOR pno%=0 TO(object_points%-1)

    [OPT 10
      EQUD 0
      EQUD 0
    ]

  NEXT pno%


=adr%



DEF FNinit_object_point_info_data

  LOCAL adr%,pno%,int%
  adr%=P%

  FOR pno%=0 TO(object_points%-1)

    [OPT 10
      EQUD 0
    ]

  NEXT pno%


=adr%



DEF FNinit_object_render_data

  LOCAL adr%,fno%,type%,p0%,p1%,p2%,p3%
  adr%=P%

  FOR fno%=0 TO(object_facets%-1)
    INPUT#fh,type%
    INPUT#fh,p0%
    INPUT#fh,p1%
    INPUT#fh,p2%
    INPUT#fh,p3%

    [OPT 10
      EQUD type%
      EQUD p0%
      EQUD p1%
      EQUD p2%
      EQUD p3%
    ]

  NEXT fno%


=adr%



DEF PROCinitialise_edge_tables

  DIM lhs_list% 256*16
  DIM rhs_list% 256*16

ENDPROC


DEF PROCsetup_textures

  LOCAL no_of_textures%,no_of_colsets%,no%,I%
  tmap_width%=(32<<8)-64
  texturemap_divisions%!0=0

  FOR I%=1 TO511
    no%=tmap_width%/I%
    texturemap_divisions%!(I%<<2)=no%
  NEXT I%

  OSCLI"LOAD <Perpetual_Disc2$Dir>.Texture.TexData "+STR$~textures%

ENDPROC


DEF PROCsetup_camera

  DIM camera_position% 13*4
  camera_position%!0=0
  camera_position%!4=-130
  camera_position%!8=0
  camera_position%!12=0
  camera_position%!16=0
  camera_position%!20=0
  camera_position%!24=0
  camera_position%!28=0
  camera_position%!32=-340
  camera_position%!36=0
  camera_position%!40=-340
  camera_position%!44=0
  camera_position%!48=-130

ENDPROC


DEF PROCsetup_sprites

  no_of_letter_sprites%=180
  no_of_mini_sprites%=40
  smoke_no%=120
  DIM letter_sprites% (no_of_letter_sprites%*512)
  DIM mini_sprites% (no_of_mini_sprites%*32)
  DIM smoke% (smoke_no%*(64*4))
  DIM section_store% (12*320)
  OSCLI"LOAD <Perpetual_Motion$Dir>.Sprites.LtrData "+STR$~letter_sprites%
  OSCLI"LOAD <Perpetual_Motion$Dir>.Sprites.MiniData "+STR$~mini_sprites%
  OSCLI"LOAD <Perpetual_Motion$Dir>.SmkEffect.Smoke "+STR$~smoke%

ENDPROC


DEF PROCsetup_soundfx

  DIM sounds% 143500
  RESTORE <line>tj~
  L%=sounds%

  FOR Z%=0 TO 12
    READ A$
    A$="<Perpetual_Motion$Dir>.Sound."+A$
    SYS "OS_File",255,A$,L%,0 TO ,,,,S%
    SYS "QTM_RegisterSample",32+Z%,L%,S%,0,0,64,0
    L%+=S%
    NEXT

  ENDPROC

  DATA "Explosion","CheckZone","Engine","Wind","Three","Two","One","Go","Finallap","Swoosh","Bang","Siren","Bong"

  DEF PROCsetup_reference_lists

    DIM swm_rdiv_list% 8192*4
    div_scale%=18
    DIM sine_table% 360*4
    DIM cosine_table% 360*4
    DIM tangent_table% 90*4
    DIM arc_tangent_table% 3667*4
    OSCLI"LOAD <Perpetual_Motion$Dir>.Reference.Sine_ref "+STR$~sine_table%
    OSCLI"LOAD <Perpetual_Motion$Dir>.Reference.Cos_ref "+STR$~cosine_table%
    OSCLI"LOAD <Perpetual_Motion$Dir>.Reference.Tan_ref "+STR$~tangent_table%
    OSCLI"LOAD <Perpetual_Motion$Dir>.Reference.ArcTan_ref "+STR$~arc_tangent_table%
    OSCLI"LOAD <Perpetual_Motion$Dir>.Reference.Div_Ref "+STR$~swm_rdiv_list%

  ENDPROC


  DEF PROCinit_filenames

    nooftracks%=9
    DIM trackfile$(nooftracks%)
    DIM pathfile$(nooftracks%)
    DIM boundfile$(nooftracks%)
    DIM checkfile$(nooftracks%)
    DIM effectfile$(nooftracks%)
    DIM rcedatfile$(nooftracks%)
    DIM reclapfile$(nooftracks%)
    RESTORE <line>dX~

    FOR I%=0 TO(nooftracks%-1)
      READ trackfile$(I%),pathfile$(I%),boundfile$(I%),checkfile$(I%),effectfile$(I%),rcedatfile$(I%),reclapfile$(I%)
    NEXT I%


  ENDPROC

  DATA "<Perpetual_Disc2$Dir>.Tracks.Track0"
  DATA "<Perpetual_Disc2$Dir>.Tracks.Path0"
  DATA "<Perpetual_Disc2$Dir>.Tracks.Bound0"
  DATA "<Perpetual_Disc2$Dir>.Tracks.CheckZ0"
  DATA "<Perpetual_Disc2$Dir>.Tracks.Effects0"
  DATA "<Perpetual_Disc2$Dir>.Tracks.RceDat0"
  DATA "<Perpetual_Disc2$Dir>.Tracks._Record0"
  DATA "<Perpetual_Disc2$Dir>.Tracks.Track1"
  DATA "<Perpetual_Disc2$Dir>.Tracks.Path1"
  DATA "<Perpetual_Disc2$Dir>.Tracks.Bound1"
  DATA "<Perpetual_Disc2$Dir>.Tracks.CheckZ1"
  DATA "<Perpetual_Disc2$Dir>.Tracks.Effects1"
  DATA "<Perpetual_Disc2$Dir>.Tracks.RceDat1"
  DATA "<Perpetual_Disc2$Dir>.Tracks._Record1"
  DATA "<Perpetual_Disc2$Dir>.Tracks.Track2"
  DATA "<Perpetual_Disc2$Dir>.Tracks.Path2"
  DATA "<Perpetual_Disc2$Dir>.Tracks.Bound2"
  DATA "<Perpetual_Disc2$Dir>.Tracks.CheckZ2"
  DATA "<Perpetual_Disc2$Dir>.Tracks.Effects2"
  DATA "<Perpetual_Disc2$Dir>.Tracks.RceDat2"
  DATA "<Perpetual_Disc2$Dir>.Tracks._Record2"
  DATA "<Perpetual_Disc2$Dir>.Tracks.Track3"
  DATA "<Perpetual_Disc2$Dir>.Tracks.Path3"
  DATA "<Perpetual_Disc2$Dir>.Tracks.Bound3"
  DATA "<Perpetual_Disc2$Dir>.Tracks.CheckZ3"
  DATA "<Perpetual_Disc2$Dir>.Tracks.Effects3"
  DATA "<Perpetual_Disc2$Dir>.Tracks.RceDat3"
  DATA "<Perpetual_Disc2$Dir>.Tracks._Record3"
  DATA "<Perpetual_Disc2$Dir>.Tracks.Track4"
  DATA "<Perpetual_Disc2$Dir>.Tracks.Path4"
  DATA "<Perpetual_Disc2$Dir>.Tracks.Bound4"
  DATA "<Perpetual_Disc2$Dir>.Tracks.CheckZ4"
  DATA "<Perpetual_Disc2$Dir>.Tracks.Effects4"
  DATA "<Perpetual_Disc2$Dir>.Tracks.RceDat4"
  DATA "<Perpetual_Disc2$Dir>.Tracks._Record4"
  DATA "<Perpetual_Disc2$Dir>.Tracks.Track5"
  DATA "<Perpetual_Disc2$Dir>.Tracks.Path5"
  DATA "<Perpetual_Disc2$Dir>.Tracks.Bound5"
  DATA "<Perpetual_Disc2$Dir>.Tracks.CheckZ5"
  DATA "<Perpetual_Disc2$Dir>.Tracks.Effects5"
  DATA "<Perpetual_Disc2$Dir>.Tracks.RceDat5"
  DATA "<Perpetual_Disc2$Dir>.Tracks._Record5"
  DATA "<Perpetual_Disc2$Dir>.Tracks.Track6"
  DATA "<Perpetual_Disc2$Dir>.Tracks.Path6"
  DATA "<Perpetual_Disc2$Dir>.Tracks.Bound6"
  DATA "<Perpetual_Disc2$Dir>.Tracks.CheckZ6"
  DATA "<Perpetual_Disc2$Dir>.Tracks.Effects6"
  DATA "<Perpetual_Disc2$Dir>.Tracks.RceDat6"
  DATA "<Perpetual_Disc2$Dir>.Tracks._Record6"
  DATA "<Perpetual_Disc2$Dir>.Tracks.Track7"
  DATA "<Perpetual_Disc2$Dir>.Tracks.Path7"
  DATA "<Perpetual_Disc2$Dir>.Tracks.Bound7"
  DATA "<Perpetual_Disc2$Dir>.Tracks.CheckZ7"
  DATA "<Perpetual_Disc2$Dir>.Tracks.Effects7"
  DATA "<Perpetual_Disc2$Dir>.Tracks.RceDat7"
  DATA "<Perpetual_Disc2$Dir>.Tracks._Record7"
  DATA "<Perpetual_Disc2$Dir>.Tracks.Track8"
  DATA "<Perpetual_Disc2$Dir>.Tracks.Path8"
  DATA "<Perpetual_Disc2$Dir>.Tracks.Bound8"
  DATA "<Perpetual_Disc2$Dir>.Tracks.CheckZ8"
  DATA "<Perpetual_Disc2$Dir>.Tracks.Effects8"
  DATA "<Perpetual_Disc2$Dir>.Tracks.RceDat8"
  DATA "<Perpetual_Disc2$Dir>.Tracks._Record8"

  DEF PROCload_track(trackno%)

    LOCAL x%,y%,z%,ob%,rot%,roty%,rotz%,adr%,I%,noofobs%,colrad%,bno%,badr%,pno%,nopathpts%
    LOCAL effno%,type%
    fh=OPENIN trackfile$(trackno%)
    INPUT#fh,noofobs%

    IF gnd_objects_no%<noofobs% ERROR0,("You didn't leave enough space for all of the ground objects you fool"):CLOSE#fh:END

    FOR I%=0 TO(noofobs%-1)
      INPUT#fh,x%
      INPUT#fh,y%
      INPUT#fh,z%
      INPUT#fh,ob%
      INPUT#fh,rot%
      adr%=orig_gnd_base%+(I%*20)
      !(adr%)=x%
      !(adr%+4)=y%
      !(adr%+8)=z%
      !(adr%+12)=ob%
      !(adr%+16)=rot%
    NEXT I%

    !(gnd_ob_header_base%)=noofobs%
    INPUT#fh,noofobs%

    IF world_objects_no%<noofobs% ERROR0,("You didn't leave enough space for all of the world objects you fool"):CLOSE#fh:END

    FOR I%=8 TO(noofobs%-1)
      INPUT#fh,x%
      INPUT#fh,y%
      INPUT#fh,z%
      INPUT#fh,ob%
      INPUT#fh,colrad%
      INPUT#fh,roty%
      INPUT#fh,rotz%
      adr%=world_orig_data_base%+(I%*32)
      !(adr%)=x%
      !(adr%+4)=y%
      !(adr%+8)=z%
      !(adr%+12)=ob%
      !(adr%+16)=colrad%
      !(adr%+20)=roty%
      !(adr%+24)=rotz%
    NEXT I%

    CLOSE#fh
    !(world_ob_header_base%)=noofobs%
    fh=OPENIN boundfile$(trackno%)
    INPUT#fh,no_of_bounds%

    IF no_of_boundaries%<no_of_bounds% ERROR0,("You didn't leave enough space for all of the boundaries you fool"):CLOSE#fh:END
    badr%=boundary_data_base%

    FOR bno%=0 TO(no_of_bounds%-1)
      INPUT#fh,stat%
      INPUT#fh,a%
      INPUT#fh,b%
      INPUT#fh,c%
      !(badr%)=stat%
      !(badr%+4)=a%
      !(badr%+8)=b%
      !(badr%+12)=c%
      badr%+=24
    NEXT bno%

    !(world_data_header%+20)=no_of_bounds%
    CLOSE#fh
    fh=OPENIN pathfile$(trackno%)
    INPUT#fh,nopathpts%

    IF no_of_path_points%<nopathpts% ERROR0,("You didn't leave enough space for all of the path points you fool"):CLOSE#fh:END
    !(path_data_base%)=nopathpts%
    badr%=(path_data_base%+4)

    FOR pno%=0 TO(nopathpts%-1)
      INPUT#fh,x%
      INPUT#fh,z%
      !(badr%)=x%
      !(badr%+4)=z%
      badr%+=8
    NEXT pno%

    CLOSE#fh
    OSCLI"LOAD "+checkfile$(trackno%)+" "+STR$~checkzone_data_base%
    fh=OPENIN effectfile$(trackno%)
    INPUT#fh,effno%

    IF no_of_effects_tiles%<effno% ERROR0,("You didn't leave enough space for all of the effects tiles you fool"):CLOSE#fh:END
    !(effects_tiles_base%)=effno%
    badr%=(effects_tiles_base%+4)

    FOR pno%=0 TO(effno%-1)
      INPUT#fh,type%
      INPUT#fh,x%
      INPUT#fh,z%
      !(badr%)=type%
      !(badr%+4)=x%
      !(badr%+8)=z%
      badr%+=12
    NEXT pno%

    CLOSE#fh
    controltype%=!race_data_base%
    OSCLI"LOAD "+rcedatfile$(trackno%)+" "+STR$~race_data_base%

    FOR I%=1 TO4
      !(craft_motion_control_base%+(I%*128)+64)=!(race_data_base%+12+((I%-1)*16))
      !(craft_motion_control_base%+(I%*128)+68)=!(race_data_base%+12+((I%-1)*16)+4)
      !(craft_motion_control_base%+(I%*128)+72)=!(race_data_base%+12+((I%-1)*16)+8)
    NEXT I%

    !race_data_base%=controltype%
    OSCLI"LOAD "+reclapfile$(trackno%)+" "+STR$~reclap%
    world_data_header%!72=!reclap%

  ENDPROC


  DEF PROCregister_new_lap_record

    LOCAL end%,trk%
    trk%=!play_track_no%
    !(world_data_header%+72)=!(!(world_data_header%+8)+124)
    !reclap% =!(!(world_data_header%+8)+124)
    end%=reclap%+4
    OSCLI"SAVE "+reclapfile$(trk%)+" "+STR$~reclap%+" "+STR$~end%

  ENDPROC

